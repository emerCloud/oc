<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Storage on ownCloud</title>
    <link>https://owncloud.dev/extensions/storage/</link>
    <description>Recent content in Storage on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://owncloud.dev/extensions/storage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Architecture</title>
      <link>https://owncloud.dev/extensions/storage/architecture/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/architecture/</guid>
      <description>Frontend The oCIS frontend service starts all services that handle incoming HTTP requests:
 ocdav for ownCloud flavoured WebDAV ocs for sharing, user provisioning, capabilities and other OCS API endpoints datagateway for up and downloads TODO: ocm      GET /data/&amp;lt;transfer_token&amp;gt;      GET /da...     PROPFIND /webdav      PROPFIN...     POST /ocs/v1/apps/files_sharing/api/v1/shares   path=/path/to/file   shareType=0   shareWith=&amp;lt;username&amp;gt;       POST /o.</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>https://owncloud.dev/extensions/storage/namespaces/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/namespaces/</guid>
      <description>A namespace is a set of paths with a common prefix. Depending on the endpoint you are talking to you will encounter a different kind of namespace: In ownCloud 10 all paths are considered relative to the users home. The CS3 API uses a global namespace and the storage providers use a local namespace with paths relative to the storage providers root.
    /rel/path/to/file.ext     /rel/p.</description>
    </item>
    
    <item>
      <title>Terminology</title>
      <link>https://owncloud.dev/extensions/storage/terminology/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/terminology/</guid>
      <description>Communication is hard. And clear communication is even harder. You may encounter the following terms throughout the documentation, in the code or when talking to other developers. Just keep in mind that whenever you hear or read storage, that term needs to be clarified, because on its own it is too vague. PR welcome.
Resources A resource is a logical concept. Resources can be of different types:
 an actual file a container, e.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/storage/configuration/</link>
      <pubDate>Wed, 02 Jun 2021 16:31:32 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  storage storage-users storage users storage gateway storage groups storage storage storage sharing storage storage-public-link storage auth-basic storage frontend storage auth-bearer storage health storage storage-home storage storage-metadata   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver Ocis Driver S3ng Driver       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://owncloud.dev/extensions/storage/users/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/users/</guid>
      <description>Demo driver This is a simple user driver for testing. It contains three users:
einstein:relativity marie:radioactivity richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:
export STORAGE_USERS_DRIVER=demo JSON driver In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:
export STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples</description>
    </item>
    
    <item>
      <title>Storages</title>
      <link>https://owncloud.dev/extensions/storage/storages/</link>
      <pubDate>Mon, 27 Apr 2020 18:46:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/storages/</guid>
      <description>Storage commands storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.
Storage providers To manage the file tree oCIS uses storage providers that are accessing the underlying storage using a storage driver.</description>
    </item>
    
    <item>
      <title>Ports</title>
      <link>https://owncloud.dev/extensions/storage/ports/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/ports/</guid>
      <description>Currently, every service needs to be configured with a port so oCIS can start them on localhost. We will automate this by using a service registry for more services, until eventually only the proxy has to be configured with a public port.
For now, the storage service uses these ports to preconfigure those services:
   port service     9109 health, used by cli?   9140 frontend   9141 frontend debug   9142 gateway   9143 gateway debug   9144 users   9145 users debug   9146 authbasic   9147 authbasic debug   9148 authbearer   9149 authbearer debug   9150 sharing   9151 sharing debug   9154 storage home grpc   9155 storage home http   9156 storage home debug   9157 storage users grpc   9158 storage users http   9159 storage users debug   9160 groups   9161 groups debug   9178 storage public link   9179 storage public link data   9215 storage meta grpc   9216 storage meta http   9217 storage meta debug    </description>
    </item>
    
    <item>
      <title>Updating reva</title>
      <link>https://owncloud.dev/extensions/storage/updating/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/updating/</guid>
      <description>    Updating reva     Updating reva  Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  </description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/extensions/storage/releasing/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/releasing/</guid>
      <description>Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.
Preparation  Before releasing, make sure that reva has been updated to the desired version  Release  Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. Prefix the tag with the submodule storage/v.</description>
    </item>
    
  </channel>
</rss>