<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on ownCloud</title>
    <link>https://owncloud.github.io/ocis/development/</link>
    <description>Recent content in Development on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 20:35:00 +0100</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/ocis/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/development/getting-started/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/getting-started/</guid>
      <description>Requirements Repository structure Starting points  Developing oCIS Developing extensions       Requirements We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.
Besides standard development tools like git and a text editor, you need the following software for development:</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://owncloud.github.io/ocis/development/build/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/build/</guid>
      <description>Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image     Build requirements see Development - Getting Started
Get the sources git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary The oCIS binary source is in the ocis folder inside the oCIS repository. In this folder you can build the oCIS binary:
cd ocis make generate make build After building you have the binary within the bin/ folder.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/ocis/development/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/testing/</guid>
      <description>Acceptance tests  Getting the tests Run a redis server in a docker container Run ocis Run the acceptance tests use existing tests for BDD       Acceptance tests We are using the ownCloud 10 acceptance test suite against oCIS. To set this up you need the ownCloud 10 core repo, a LDAP server that the acceptance tests can use to manage users, a redis server for file-versions and the oCIS code.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://owncloud.github.io/ocis/development/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/extensions/</guid>
      <description>How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking phoenix (and ocis-phoenix) The ownCloud design system External phoenix apps Phoenix extension points  Phoenix core Files app   API driven development     How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.github.io/ocis/development/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/debugging/</guid>
      <description>Debugging  Start ocis  Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process   Gather error messages Managing dependencies and testing changes       Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.github.io/ocis/development/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
 Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://owncloud.github.io/ocis/development/build-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/build-docs/</guid>
      <description>Build the documentation Add changes to the documentation     Build the documentation Just run make -C docs docs-serve from within the root level of the oCIS git repository.
Add changes to the documentation Please keep this documentation in sync with the oCIS source code.
Changes on the documentation are automatically applied to this site when merged to the master branch.</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://owncloud.github.io/ocis/development/continuous-integration/</link>
      <pubDate>Thu, 01 Oct 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/continuous-integration/</guid>
      <description>Concepts Things done in CI Flags in commit message and PR title  Knowledge base       oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.
Concepts The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration.
Upon running the pipeline, your branch gets merged to the master branch.</description>
    </item>
    
  </channel>
</rss>