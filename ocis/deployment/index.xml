<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on ownCloud</title>
    <link>https://owncloud.github.io/ocis/deployment/</link>
    <description>Recent content in Deployment on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 20:35:00 +0100</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/ocis/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.github.io/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud     Example for Hetzner Cloud   create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
  Access server via ssh as root</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</guid>
      <description>Use the binary  Add your hostname to the idp config Start the ocis fullstack server   Use Docker Compose     Out of the box the ocis single binary and the owncloud/ocis docker image are configured to run on localhost for quick testing and development.
If you need to access ocis on a VM or a remote machine e.g. when testing a mobile client you need to configure ocis to run on a different host.</description>
    </item>
    
    <item>
      <title>oCIS with Traefik</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_traefik/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_traefik/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik Configuration   Local setup     Overview  oCIS running behind traefik as reverse proxy Valid ssl certificates for the domains for ssl termination  Find this example on GitHub
Server Deployment Requirements  Linux server(s) with docker and docker-compose installed Two domains set up and pointing to your server(s)  See also example server setup</description>
    </item>
    
    <item>
      <title>ownCloud Web with ownCloud 10</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_oc10_backend/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_oc10_backend/</guid>
      <description>Overview Server Deployment  Requirements Setup on server Config  Repository structure Traefik ocis  web/config.json identifier-registration.yaml proxy-config.json Environment variables in docker-compose.yaml   oc10     Local setup  Domains Disable certificate checks       This deployment scenario shows how to use ownCloud Web as frontend for an existing ownCloud 10 production installation. It enables ownCloud 10 users to log in and work with their files using the new ownCloud Web.</description>
    </item>
    
    <item>
      <title>oCIS with external IDP</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_external_idp/</link>
      <pubDate>Mon, 12 Oct 2020 14:39:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_external_idp/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS server Install IDP server Configuration  Repository structure Traefik Konnectd ocis     Local setup     This scenario shows how to setup oCIS and konnectd as external IDP (identity provider). Both have separate domains and will be configured to work together.
Overview  Server 1: oCIS running behind traefik as reverse proxy Server 2: IDP running behind traefik as reverse proxy Valid ssl certificates for the domains for ssl termination  Find this example on GitHub</description>
    </item>
    
  </channel>
</rss>