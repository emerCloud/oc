<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on ownCloud</title>
    <link>https://owncloud.dev/ocis/deployment/</link>
    <description>Recent content in Deployment on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Oct 2020 20:35:00 +0100</lastBuildDate>
    
	<atom:link href="https://owncloud.dev/ocis/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Continuous Deployment</title>
      <link>https://owncloud.dev/ocis/deployment/continuous_deployment/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/continuous_deployment/</guid>
      <description>oCIS with Traefik  Latest Released   oCIS with WOPI server  Latest Released   oCIS with latest ownCloud Web  Latest   oCIS with Keycloak  Latest Released   oCIS with Hello extension  Latest   oCIS with S3 storage backend (MinIO)  Latest   oCIS with CS3 users  Latest Released     We are continuously deploying the following deployment examples.</description>
    </item>
    
    <item>
      <title>Monitoring &amp; Tracing</title>
      <link>https://owncloud.dev/ocis/deployment/monitoring-tracing/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/monitoring-tracing/</guid>
      <description>Overview about the proposed solution  Monitoring &amp;amp; tracing clients Monitoring &amp;amp; tracing server     Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.
If you are a developer and want to trace during developing you should have a look at example server setup.
This documentation describes how to set up a long running monitoring &amp;amp; tracing infrastructure for one or multiple oCIS servers or deployments.</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.dev/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/basic-remote-setup/</guid>
      <description>Start the oCIS fullstack server from binary  Using automatically generated certificates Using already present certificates   Start the oCIS fullstack server with Docker Compose     The default configuration of the oCIS binary and the owncloud/ocis docker image assume, that you access oCIS on localhost. This enables you to do quick testing and development without any configuration.
If you need to access oCIS running in a docker container, on a VM or a remote machine via an other hostname than localhost, you need to configure this hostname in oCIS.</description>
    </item>
    
    <item>
      <title>oCIS with Hello extension</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_hello/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_hello/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS running behind Traefik as reverse proxy oCIS Hello extension runs beside the main oCIS stack and providing the Hello functionality Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists of 3 containers.</description>
    </item>
    
    <item>
      <title>oCIS with Keycloak</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_keycloak/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_keycloak/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists 4 containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with S3 storage backend (MinIO)</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_s3/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_s3/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS running behind Traefik as reverse proxy MinIO as S3 compatible storage provider oCIS is configured to use S3 as user storage provider Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists 3 containers.</description>
    </item>
    
    <item>
      <title>oCIS with Traefik</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_traefik/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_traefik/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS running behind Traefik as reverse proxy Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists of two containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with WOPI server</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_wopi/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_wopi/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS, Wopi server and Collabora running behind Traefik as reverse proxy Collabora enables you to edit text documents in your browser Wopi server acts as a bridge to make the oCIS storage accessible to Collabora Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub</description>
    </item>
    
    <item>
      <title>ownCloud 10 with ownCloud Web</title>
      <link>https://owncloud.dev/ocis/deployment/owncloud10_with_oc_web/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/owncloud10_with_oc_web/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     This deployment scenario shows how to use ownCloud Web as frontend for an existing ownCloud 10 production installation. It enables ownCloud 10 users to log in and work with their files using the new ownCloud Web. While the scenario includes an ownCloud 10 instance, it only exists to show the necessary configuration for your already existing ownCloud 10 installation.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.dev/ocis/deployment/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/bridge/</guid>
      <description>Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-web  Get it! Run it!   Start ocis-idp  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis.</description>
    </item>
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.dev/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud     Example for Hetzner Cloud   create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
  Access server via ssh as root</description>
    </item>
    
  </channel>
</rss>