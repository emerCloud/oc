<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ownCloud</title>
    <link>https://owncloud.dev/</link>
    <description>Recent content on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Oct 2021 14:18:21 +0000</lastBuildDate><atom:link href="https://owncloud.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Introduce an accounts service</title>
      <link>https://owncloud.dev/ocis/adr/0001-introduce-accounts-service/</link>
      <pubDate>Mon, 15 Jun 2020 20:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0001-introduce-accounts-service/</guid>
      <description>Status: superseded by ADR-0003 Deciders: @butonic, @felixboehm, @micbar, @pmaier1 Date: 2020-06-15  Technical Story: persist accounts
Context and Problem Statement    To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email und username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.</description>
    </item>
    
    <item>
      <title>Deploy as an app in ownCloud 10</title>
      <link>https://owncloud.dev/clients/web/deployments/oc10-app/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/deployments/oc10-app/</guid>
      <description>Prerequisites Deploying ownCloud Web Configure oauth2 Configure ownCloud 10  Set ownCloud Web address Configure link routing Make ownCloud Web the default web interface   Configure ownCloud Web Integrate ownCloud Classic features in ownCloud Web  Add links to the app switcher Add links to the user menu ONLYOFFICE   Accessing ownCloud Web     The ownCloud Web is being deployed as an app to ownCloud marketplace to enable easy early integration into existing ownCloud 10 instances.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/ocis/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags   Root Command Sub Commands  ocis health ocis run ocis kill ocis list ocis server List of available Extension subcommands  ocis glauth ocis accounts ocis idp ocis storage-gateway ocis storage-users ocis webdav ocis proxy ocis storage-groupprovider ocis storage-userprovider ocis thumbnails ocis ocs ocis storage-auth-basic ocis storage-auth-bearer ocis storage-sharing ocis web ocis storage-app-provider ocis settings ocis storage-frontend ocis storage-metadata ocis storage-public-link ocis storage-home ocis version ocis store         Configuration    oCIS Single Binary is not responsible for configuring extensions.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.dev/integration/file_picker/getting-started/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/getting-started/</guid>
      <description>Components of the File picker  File picker Location picker       ownCloud File picker is a web component which can be integrated into existing web applications. It connects to an ownCloud server and enables a user to select resources which are then provided in a response of a fired event. Visit installation to see how to integrate the File picker into your product.</description>
    </item>
    
    <item>
      <title>2. Persist accounts in a CS3 storage</title>
      <link>https://owncloud.dev/ocis/adr/0002-persist-accounts-using-cs3-storage/</link>
      <pubDate>Fri, 21 Aug 2020 20:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0002-persist-accounts-using-cs3-storage/</guid>
      <description>Status: accepted Deciders: @butonic, @felixboehm Date: 2020-08-21  Technical Story: File system based indexing
Context and Problem Statement    To set up High Availability (HA) or a geo-replicated setup we need to persist accounts in a distributed way. To efficiently query the accounts by email or username, and not only by id, they need to be indexed. Unfortunately, the bleve index we currently store locally on disk cannot be shared by multiple instances, preventing a scale out deployment.</description>
    </item>
    
    <item>
      <title>3. Use external User Management</title>
      <link>https://owncloud.dev/ocis/adr/0003-external-user-management/</link>
      <pubDate>Wed, 09 Dec 2020 20:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0003-external-user-management/</guid>
      <description>Status: accepted Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2020-12-09  Technical Story: Skip account-service by talking to CS3 user-api
Context and Problem Statement    To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email and username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://owncloud.dev/integration/file_picker/installation/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/installation/</guid>
      <description>Setup authentication  OpenID Connect config OAuth2 config Pass bearer token   Install File picker package Select browser storage Integrate in HTML page with vanilla JavaScript Integrate in Vue web application Set correct variation Theming Buttons and events  Select button Cancel button       Setup authentication    The config for the server backend and authentication needs to be provided in json format.</description>
    </item>
    
    <item>
      <title>4. Support Hot Migration</title>
      <link>https://owncloud.dev/ocis/adr/0004-support-hot-migration/</link>
      <pubDate>Wed, 09 Dec 2020 20:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0004-support-hot-migration/</guid>
      <description>Status: proposed Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2021-03-16  Technical Story: [description | ticket/issue URL]
Context and Problem Statement    Migration is one of the most important topics of the oCIS story. We need to provide a concept how to migrate from oC10 to oCIS.
Decision Drivers     Do not lose file blob or meta data.  To prevent a sync surge from clients the etag for files should be migrated.</description>
    </item>
    
    <item>
      <title>Accessing Resources</title>
      <link>https://owncloud.dev/integration/file_picker/accessing-resources/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/accessing-resources/</guid>
      <description>Access resources     If using File picker as a web component, it is returning selected resources via events called select and update. To access them, you need to set an event listener where you&amp;rsquo;ll be able to get them as part of the response of the callback function.
Access resources    &amp;lt;file-picker id=&amp;#34;file-picker&amp;#34; variation=&amp;#34;resource&amp;#34;&amp;gt;&amp;lt;/file-picker&amp;gt; &amp;lt;script&amp;gt; const item = document.getElementById(&amp;#39;file-picker&amp;#39;) let resources = [] item.</description>
    </item>
    
    <item>
      <title>5. Account Management through CS3 API</title>
      <link>https://owncloud.dev/ocis/adr/0005-cs3-api-account-management/</link>
      <pubDate>Mon, 12 Apr 2021 15:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0005-cs3-api-account-management/</guid>
      <description>Status: proposed Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-04-12  Technical Story: Write only management API for User and Group resources
Context and Problem Statement    What would be a more effective way of using network resources and handle account management within the oCIS-Reva ecosystem? Separating account management at the service level is pragmatic and allows for fast iterations, but also steadily accumulates inconsistencies and bloats technical debt.</description>
    </item>
    
    <item>
      <title>Customising</title>
      <link>https://owncloud.dev/integration/file_picker/customisations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/customisations/</guid>
      <description>Variation  File Picker Location Picker   Actions  Select Cancel       It is possible to customise certain parts of the File Picker with the help of props.
Variation    File picker comes in two different variations - File Picker and Location Picker. To specify which one should be used, set property variation to resource or location.
File Picker    File picker variation is used to select resources from within your ownCloud instace.</description>
    </item>
    
    <item>
      <title>6. Service Discovery within oCIS and Reva</title>
      <link>https://owncloud.dev/ocis/adr/0006-service-discovery/</link>
      <pubDate>Mon, 19 Apr 2021 13:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0006-service-discovery/</guid>
      <description>Status: accepted Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-04-19  Technical Story: Introduce Named Services.
Context and Problem Statement    Reva relies heavily on config files. A known implication of this approach are having to know a-priori where a service is running (host + port). We want to move away from hardcoded values and rely instead on named services for service discovery. Furthermore, we would like both platforms (Reva + oCIS) to have the same source of truth at any given time, not having one to notify the other whenever a service status changes.</description>
    </item>
    
    <item>
      <title>Component reference</title>
      <link>https://owncloud.dev/integration/file_picker/component-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/component-reference/</guid>
      <description>Props Events     &amp;lt;file-picker&amp;gt; Props       Property Type Default Description     variation String  Specifies if File Picker (resource) or Location Picker (location) should be used   configLocation String window.location.origin + &#39;/file-picker-config.json&#39; Defines where the config file should be located   bearerToken String null Bearer token used for requests authentication. If specified, authorization step is skipped   configObject `String Object`    isSdkProvided Boolean false Asserts whether ownCloud SDK is already initialised in the consuming app   selectBtnLabel String null Replaces the select button label   isSelectBtnDisplayed Boolean true Asserts whether the select button should be displayed   cancelBtnLabel String nulll Displays the cancel button and uses the given value as a label   isOdsProvided Boolean false Asserts whether the ownCloud Design System has been already initialised in the consuming app   locale String null Sets the language in which the File Picker should be displayed.</description>
    </item>
    
    <item>
      <title>7. Open Graph API for oCIS File Spaces</title>
      <link>https://owncloud.dev/ocis/adr/0007-api-for-spaces/</link>
      <pubDate>Mon, 03 May 2021 09:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0007-api-for-spaces/</guid>
      <description>Status: accepted Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2021-03-19  Technical Story: API to enable the concept of Spaces
Context and Problem Statement    As one of the building blocks for Spaces in oCIS we plan to add an API that returns information about available spaces. This ADR discusses the API design oriented on the Microsoft Graph API.
 Note: The term &amp;ldquo;spaces&amp;rdquo; is used here in the context of &amp;ldquo;a space where files can be saved&amp;rdquo;, similar to a directory.</description>
    </item>
    
    <item>
      <title>Focus Management</title>
      <link>https://owncloud.dev/integration/file_picker/focus-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/integration/file_picker/focus-management/</guid>
      <description>Focusing content of File Picker Initial folder load focus     File Picker comes only with partial focus management. If you want to focus an element, it needs to be achieved through a code in the consuming app.
Focusing content of File Picker    If you&amp;rsquo;re including File Picker as a web component, managing focus is slightly different from focusing content of any other component in the DOM tree.</description>
    </item>
    
    <item>
      <title>8. Configuration</title>
      <link>https://owncloud.dev/ocis/adr/0008-configuration/</link>
      <pubDate>Mon, 03 May 2021 15:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0008-configuration/</guid>
      <description>Status: proposed Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-05-03  Context and Problem Statement    As per urfave/cli&amp;rsquo;s doc:
 The precedence for flag value sources is as follows (highest to lowest):
Command line flag value from user Environment variable (if specified) Configuration file (if specified) Default defined on the flag   An issue arises in point 2, in the sense that configuration file refers to a single file containing the value for the env variable.</description>
    </item>
    
    <item>
      <title>9. Extension Template</title>
      <link>https://owncloud.dev/ocis/adr/0009-extension-template/</link>
      <pubDate>Thu, 10 Jun 2021 15:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0009-extension-template/</guid>
      <description>Status: proposed Deciders: @c0rby  Date: 2021-06-10  Technical Story: [description | ticket/issue URL] Context and Problem Statement    We want to accelerate and simplify extension development by removing the necessity to type or copy the boilerplate code. Can we provide a template or a similar mechanism to aid when developing new extensions?
Decision Drivers     The solution should be easily maintainable.  It should always be up-to-date.</description>
    </item>
    
    <item>
      <title>10. Extension Policies</title>
      <link>https://owncloud.dev/ocis/adr/0010-policy-enforcement/</link>
      <pubDate>Wed, 30 Jun 2021 14:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0010-policy-enforcement/</guid>
      <description>Status: proposed Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1, @fschade Date: 2021-06-30  Context and Problem Statement    There should be a way to impose certain limitations in areas of the code that require licensing. This document researches an approach to achieve it.
Decision Drivers     as a team, we want to have the licensing code concentrated in a central module we don&amp;rsquo;t want to stop/start the extension whenever a policy is updated (hot reload)  Considered Options     Build the evaluation engine in-house.</description>
    </item>
    
    <item>
      <title>Continuous Deployment</title>
      <link>https://owncloud.dev/ocis/deployment/continuous_deployment/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/continuous_deployment/</guid>
      <description>oCIS with Traefik  Latest Released   oCIS with WOPI server  Latest Released   oCIS with latest ownCloud Web  Latest   oCIS with Keycloak  Latest Released   Parallel deployment of oC10 and oCIS  Latest   oCIS with Hello extension  Latest   oCIS with S3 storage backend (MinIO)  Latest   oCIS with CS3 users  Latest Released     We are continuously deploying the following deployment examples.</description>
    </item>
    
    <item>
      <title>Monitoring &amp; Tracing</title>
      <link>https://owncloud.dev/ocis/deployment/monitoring-tracing/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/monitoring-tracing/</guid>
      <description>Overview about the proposed solution  Monitoring &amp;amp; tracing clients Monitoring &amp;amp; tracing server     Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.
If you are a developer and want to trace during developing you should have a look at example server setup.
This documentation describes how to set up a long running monitoring &amp;amp; tracing infrastructure for one or multiple oCIS servers or deployments.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://owncloud.dev/extensions/storage/architecture/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/architecture/</guid>
      <description>Frontend    The oCIS frontend service starts all services that handle incoming HTTP requests:
 ocdav for ownCloud flavoured WebDAV ocs for sharing, user provisioning, capabilities and other OCS API endpoints datagateway for up and downloads TODO: ocm      GET /data/&amp;lt;transfer_token&amp;gt;      GET /da...     PROPFIND /webdav      PROPFIN...     POST /ocs/v1/apps/files_sharing/api/v1/shares   path=/path/to/file   shareType=0   shareWith=&amp;lt;username&amp;gt;       POST /o.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.dev/clients/web/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/getting-started/</guid>
      <description>Installation  Docker Source code   Configuration    Options     Setting up backend and running Running     Installation    Docker    Make sure to have Docker, Docker-Compose, Node.js and Yarn installed.
This setup currently doesn&amp;rsquo;t work on Windows out of the box.
 Workaround One of our contributors has opened a PR to a dependency that prevents us from successfully bundling the frontend.</description>
    </item>
    
    <item>
      <title>11. WebUI URL format</title>
      <link>https://owncloud.dev/ocis/adr/0011-global-url-format/</link>
      <pubDate>Wed, 07 Jul 2021 14:55:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0011-global-url-format/</guid>
      <description>Status: accepted Deciders: @refs, @butonic, @micbar, @dragotin, @hodyroff, @pmaier1, @fschade, @tbsbdr, @kulmann Date: 2021-07-07  Context and Problem Statement    When speaking about URLs we have to make a difference between browser URLs and API URLs. Only browser URLs are visible to end users and will be bookmarked. The currently existing and bookmarked ownCloud 10 URLs look something like this:
GET https://demo.owncloud.com/apps/files/?dir=/path/to/resource&amp;amp;fileid=5472225 303 Location: https://demo.owncloud.com/apps/files/?dir=/path/to/resource When the URL contains a fileid parameter the server will look up the corresponding dir, overwriting whatever was set before the redirect.</description>
    </item>
    
    <item>
      <title>12. Tracing</title>
      <link>https://owncloud.dev/ocis/adr/0012-tracing/</link>
      <pubDate>Tue, 17 Aug 2021 12:56:53 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/adr/0012-tracing/</guid>
      <description>Status: proposed Deciders: @butonic, @micbar, @dragotin, @mstingl, @pmaier1, @fschade Date: 2021-08-17  Context and Problem Statement    At the time of this writing we are in a situation where our logs have too much verbosity, rendering impossible or rather difficult to debug an instance. For this reason we are giving some care to our traces by updating dependencies from OpenCensus to OpenTelemetry.
Decision Drivers     We don&amp;rsquo;t want to rely only on logs to debug an instance.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.dev/ocis/development/getting-started/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/getting-started/</guid>
      <description>Requirements Repository structure Starting points  Developing oCIS Developing extensions       Requirements    We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.
Besides standard development tools like git and a text editor, you need the following software for development:</description>
    </item>
    
    <item>
      <title>Namespaces</title>
      <link>https://owncloud.dev/extensions/storage/namespaces/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/namespaces/</guid>
      <description>A namespace is a set of paths with a common prefix. Depending on the endpoint you are talking to you will encounter a different kind of namespace: In ownCloud 10 all paths are considered relative to the users home. The CS3 API uses a global namespace and the storage providers use a local namespace with paths relative to the storage providers root.
    /rel/path/to/file.ext     /rel/p.</description>
    </item>
    
    <item>
      <title>Systemd service</title>
      <link>https://owncloud.dev/ocis/deployment/systemd/</link>
      <pubDate>Sun, 27 Sep 2020 06:00:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/systemd/</guid>
      <description>Install the oCIS binary Systemd service definition Starting the oCIS service     Install the oCIS binary    Download the oCIS binary of your preferred version and for your CPU architecture and operating system from download.owncloud.com.
Rename the downloaded binary to ocis and move it to /usr/bin/. As a next step, you need to mark it as executable with chmod +x /usr/bin/ocis.</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.dev/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/basic-remote-setup/</guid>
      <description>Start the oCIS fullstack server from binary  Using automatically generated certificates Using already present certificates   Start the oCIS fullstack server with Docker Compose     The default configuration of the oCIS binary and the owncloud/ocis docker image assume, that you access oCIS on localhost. This enables you to do quick testing and development without any configuration.
If you need to access oCIS running in a docker container, on a VM or a remote machine via an other hostname than localhost, you need to configure this hostname in oCIS.</description>
    </item>
    
    <item>
      <title>Terminology</title>
      <link>https://owncloud.dev/extensions/storage/terminology/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/terminology/</guid>
      <description>Communication is hard. And clear communication is even harder. You may encounter the following terms throughout the documentation, in the code or when talking to other developers. Just keep in mind that whenever you hear or read storage, that term needs to be clarified, because on its own it is too vague. PR welcome.
Resources    A resource is a logical concept. Resources can be of different types:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/webdav/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:21 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/webdav/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags   Root Command Sub Commands  webdav health webdav server webdav version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/store/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:20 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/store/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags store health store ocis-store store server store version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/thumbnails/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:20 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/thumbnails/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags thumbnails ocis-thumbnails thumbnails server thumbnails version thumbnails health       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/web/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:20 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/web/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags   Root Command Sub Commands  web health web server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/glauth/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/glauth/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags glauth server glauth health glauth ocis-glauth       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/graph-explorer/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/graph-explorer/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags   Root Command Sub Commands  graph-explorer health graph-explorer server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/graph/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/graph/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags graph health graph ocis-graph graph server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/idp/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/idp/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags idp health idp ocis-idp idp server idp version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/ocs/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocs/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags ocs health ocs ocis-ocs ocs server ocs version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/proxy/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/proxy/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags proxy health proxy ocis-proxy proxy server proxy version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/settings/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags settings server settings version settings health settings ocis-settings       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/storage/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:18:19 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags   Root Command Sub Commands  storage storage-public-link storage storage-users storage gateway storage sharing storage health storage storage-metadata storage users storage frontend storage auth-bearer storage groups storage storage storage storage-home storage app-provider storage auth-basic   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver ownCloudSQL Driver Ocis Driver S3ng Driver       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/accounts/configuration/</link>
      <pubDate>Wed, 06 Oct 2021 14:17:23 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/accounts/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command-line flags accounts inspect accounts list accounts remove accounts server accounts update accounts add accounts rebuildIndex accounts ocis-accounts accounts version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/ocis_hello/configuration/</link>
      <pubDate>Mon, 30 Aug 2021 17:23:42 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Command line flags   Root Command Sub Commands  hello health hello server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.dev/extensions/ocis_wopiserver/configuration/</link>
      <pubDate>Fri, 06 Aug 2021 10:55:04 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_wopiserver/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags accounts server accounts health accounts wopiserver       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.dev/extensions/ocis_hello/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/building/</guid>
      <description>Frontend Backend Documentation     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go &amp;gt;= v1.16. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.dev/extensions/ocis_wopiserver/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_wopiserver/building/</guid>
      <description>Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go &amp;gt;= v1.16. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>Building from source</title>
      <link>https://owncloud.dev/clients/web/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/building/</guid>
      <description>Building ownCloud Web Updating dependencies Building the documentation  Setting up Viewing the documentation Deploying the documentation       Building ownCloud Web     Run yarn install to install dependencies Run yarn build to build Web and all apps included in the packages folder  Updating dependencies     Run yarn upgrade to update dependencies  Building the documentation    Setting up     Install hugo Run make docs  Viewing the documentation    To view the rendered docs in the browser run:</description>
    </item>
    
    <item>
      <title>Configuration Hints</title>
      <link>https://owncloud.dev/extensions/glauth/configuration-hints/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/glauth/configuration-hints/</guid>
      <description>Configuration hints     Configuration hints    The default setup does not use a fallback backend. It can be enabled by setting the GLAUTH_FALLBACK_DATASTORE environment variable.
When using owncloud make sure to use the full URL to the ownCloud 10 graph api app endpoint, eg.: GLAUTH_FALLBACK_SERVERS=&amp;quot;https://demo.owncloud.com/apps/graphapi/v1.0&amp;quot;</description>
    </item>
    
    <item>
      <title>Spaces</title>
      <link>https://owncloud.dev/extensions/graph/spaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/graph/spaces/</guid>
      <description>Graph Service Spaces API  Methods   Examples  Starting conditions       Graph Service    The Graph service is a reference implementation of the MS Graph API. There are no libraries doing any work only a set of routes and handlers.
Spaces API    The Spaces API makes use of the MS Graph API Drive resource to represent the concept of a Storage Space.</description>
    </item>
    
    <item>
      <title>Theming</title>
      <link>https://owncloud.dev/extensions/idp/theming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/idp/theming/</guid>
      <description>Intro Customizing assets  Static assets CSS Containers  What pages to theme   Components Images Locales   Building assets     Intro    Our default IDP UI is built with the LibreGraph Connect React app. Even though this app comes already with a simple theming options, we have compiled our own edited version of the app with more advanced changes than the default theming offers.</description>
    </item>
    
    <item>
      <title>oCIS with Hello extension</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_hello/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_hello/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy oCIS Hello extension runs beside the main oCIS stack and providing the Hello functionality Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub</description>
    </item>
    
    <item>
      <title>oCIS with Keycloak</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_keycloak/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_keycloak/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists 4 containers.</description>
    </item>
    
    <item>
      <title>oCIS with S3 storage backend (MinIO)</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_s3/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_s3/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy MinIO as S3 compatible storage provider oCIS is configured to use S3 as user storage provider Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub</description>
    </item>
    
    <item>
      <title>oCIS with Traefik</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_traefik/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_traefik/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists of two containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with WOPI server</title>
      <link>https://owncloud.dev/ocis/deployment/ocis_wopi/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/ocis_wopi/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS, Wopi server and Collabora running behind Traefik as reverse proxy Collabora enables you to edit text documents in your browser Wopi server acts as a bridge to make the oCIS storage accessible to Collabora Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub</description>
    </item>
    
    <item>
      <title>Parallel deployment of oC10 and oCIS</title>
      <link>https://owncloud.dev/ocis/deployment/oc10_ocis_parallel/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/oc10_ocis_parallel/</guid>
      <description>Overview Server Deployment  Requirements Install this example   Local setup     This deployment example currently has known issues. See github.com/owncloud/ocis/issues/2549 for more information.  Overview     This setup reflects stage 6 of the oC10 to oCIS migration plan Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup OpenLDAP server with demo users LDAP admin interface to edit users Keycloak as OpenID Connect provider in federation with the LDAP server ownCloud 10 with MariaDB and Redis  ownCloud 10 is configured to synchronize users from the LDAP server ownCloud 10 is used to use OpenID Connect for authentication with Keycloak   oCIS running behind Traefik as reverse proxy  oCIS is using the ownCloud storage driver on the same files and same database as ownCloud 10 oCIS is using Keycloak as OpenID Connect provider oCIS is using the LDAP server as user backend   All requests to both oCIS and oC10 are routed through the oCIS proxy and will be routed based on an OIDC claim to one of them.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://owncloud.dev/ocis/deployment/kubernetes/</link>
      <pubDate>Thu, 23 Sep 2021 11:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/kubernetes/</guid>
      <description>What is Kubernetes  References and further reads How does oCIS fit in the Kubernetes model   What is Minikube What is kubectl What are Helm Charts, and why they are useful for oCIS  Installing Helm   Setting up Minikube  Start minikube   Run a chart  Requirements Setup   Setting up an external identity provider What is GCP  Can Helm charts run on GCP?</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/clients/web/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/releasing/</guid>
      <description>Releasing ownCloud Web  Versioning Release Guide Next steps       Releasing ownCloud Web    OwnCloud Web can be hosted standalone, as ownCloud 10 app or as part of oCIS.
Versioning    We follow the Semantic Versioning scheme. Therefore, each change is of one of the possible types: Bugfix, Change, Enhancement, Security.
The highest type before a new release determines the version update number, so if it&amp;rsquo;s only Bugfix and Security changes the next release will be a PATCH version bump, if there&amp;rsquo;s at least one Enhancement within the changes this leads to a MINOR version bump, while Change type changes make for a new MAJOR release version.</description>
    </item>
    
    <item>
      <title>cephfs</title>
      <link>https://owncloud.dev/ocis/storage-backends/cephfs/</link>
      <pubDate>Mon, 13 Sep 2021 15:36:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/storage-backends/cephfs/</guid>
      <description>Development Architecture Implemented Aspects Future work     oCIS intends to make the aspects of existing storage systems available as transparently as possible, but the static sync algorithm of the desktop client relies on some form of recursive change time propagation on the server side to detect changes. While this can be bolted on top of existing file systems with inotify, the kernel audit or a fuse based overlay filesystem, a storage system that already implements this aspect is preferable.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.dev/ocis/deployment/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/bridge/</guid>
      <description>Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Grab ocis! Start ocis glauth  configure it Run it! Check it is up and running   Start ocis storage-gateway, storage-authbasic and storage-userprovider Start ocis storage-userprovider Start ocis idp  Set environment variables   Configure clients  Run it! Check it is up and running   Start ocis proxy Start ocis-web  Run it!</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://owncloud.dev/ocis/development/build/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/build/</guid>
      <description>Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image     Build requirements    see Development - Getting Started
Get the sources    git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary    You only need to run following command if you have changed protobuf definitions or the frontend part in one of the extensions.</description>
    </item>
    
    <item>
      <title>EOS</title>
      <link>https://owncloud.dev/ocis/storage-backends/eos/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/storage-backends/eos/</guid>
      <description>Docker dev environment for eos storage  1. Start eos &amp;amp; ocis containers 2. LDAP support 3. Home storage 4. Users storage 5. Metadata storage 6. Accounts service   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       oCIS can be configured to run on top of eos.</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://owncloud.dev/extensions/storage/users/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/users/</guid>
      <description>Demo driver    This is a simple user driver for testing. It contains three users:
einstein:relativity marie:radioactivity richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:
export STORAGE_USERS_DRIVER=demo JSON driver    In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:
export STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.</description>
    </item>
    
    <item>
      <title>Storages</title>
      <link>https://owncloud.dev/extensions/storage/storages/</link>
      <pubDate>Mon, 27 Apr 2020 18:46:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/storages/</guid>
      <description>Storage commands    storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.
Storage providers    To manage the file tree oCIS uses storage providers that are accessing the underlying storage using a storage driver.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.dev/ocis/development/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/testing/</guid>
      <description>Testing with test suite in docker  Run full test suite Run single feature test oCIS image to be tested (or: skip build and take existing image) Test log output Cleanup   Testing with test suite natively installed  Getting the tests Run ocis Run the acceptance tests use existing tests for BDD       For running tests in the test suite you have two options.</description>
    </item>
    
    <item>
      <title>Storage Registry Discovery</title>
      <link>https://owncloud.dev/ocis/storage_registry_discovery/</link>
      <pubDate>Tue, 04 May 2021 14:01:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/storage_registry_discovery/</guid>
      <description>Introduction    In order for an oCIS client to access oCIS storage spaces for an End-User, the client needs to know where the oCIS instance is. oCIS uses WebFinger RFC7033 to locate the oCIS instance for an End-User.
This discovery is optional. If the client has another way of discovering the OpenID instance, e.g. when logging in with a username a static domain might be configured or the domain in the URL might be used.</description>
    </item>
    
    <item>
      <title>Setup with ownCloud 10</title>
      <link>https://owncloud.dev/clients/web/backend-oc10/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/backend-oc10/</guid>
      <description>Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Web   Running Web Running acceptance tests     Prerequisites    Decide on which host and port Web will be served, for example https://web-host:9100/web-path/. In this document, we will refer to the following:
 &amp;lt;web-url&amp;gt; as the full URL, for example https://web-host:9100/web-path/ &amp;lt;web-domain&amp;gt; as the protocol, domain and port, for example: https://web-host:9100  Setting up the ownCloud Server    Make sure you have an ownCloud Server already installed.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://owncloud.dev/ocis/development/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/extensions/</guid>
      <description>oCIS is all about files, sync and share - but most of the time there is more you want to do with your files, e.g. having a different view on your photo collection or editing your offices files in an online file editor. ownCloud 10 faced the same problem and solved it with applications, which can extend the functionality of ownCloud 10 in a wide range. Since oCIS is different in its architecture compared to ownCloud 10, we had to come up with a similar (yet slightly different) solution.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/extensions/web/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/web/releasing/</guid>
      <description>Releasing  Package Hierarchy  Prerequisites Updating ocis-web         Releasing    The next generation Web Frontend is shipped as an oCIS Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.
To update this package within all the deliveries, we need to update the package in the following chain from the bottom to the top.</description>
    </item>
    
    <item>
      <title>Migration</title>
      <link>https://owncloud.dev/ocis/migration/</link>
      <pubDate>Tue, 16 Mar 2021 16:17:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/migration/</guid>
      <description>The migration happens in subsequent stages while the service is online. First all users need to migrate to the new architecture, then the global namespace needs to be introduced. Finally, the data on disk can be migrated user by user by switching the storage driver.
@jfd: It might be easier to introduce the spaces api in oc10 and then migrate to oCIS. We cannot migrate both at the same time, the architecture to oCIS (which will change fileids) and introduce a global namespace (which requires stable fileids to let clients handle moves without redownloading).</description>
    </item>
    
    <item>
      <title>Ports</title>
      <link>https://owncloud.dev/extensions/storage/ports/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/ports/</guid>
      <description>Currently, every service needs to be configured with a port so oCIS can start them on localhost. We will automate this by using a service registry for more services, until eventually only the proxy has to be configured with a public port.
For now, the storage service uses these ports to preconfigure those services:
   port service     9109 health, used by cli?   9140 frontend   9141 frontend debug   9142 gateway   9143 gateway debug   9144 users   9145 users debug   9146 authbasic   9147 authbasic debug   9148 authbearer   9149 authbearer debug   9150 sharing   9151 sharing debug   9154 storage home grpc   9155 storage home http   9156 storage home debug   9157 storage users grpc   9158 storage users http   9159 storage users debug   9160 groups   9161 groups debug   9164 storage appprovider   9165 storage appprovider debug   9178 storage public link   9179 storage public link data   9215 storage meta grpc   9216 storage meta http   9217 storage meta debug    </description>
    </item>
    
    <item>
      <title>Login Flow</title>
      <link>https://owncloud.dev/ocis/flow-docs/login-flow/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/flow-docs/login-flow/</guid>
      <description>Login Flow    The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well:
  sequenceDiagram %% we have comments!! \o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#use-pkce-to-make-your-apps-more-secure participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant glauth as ocis-glauth participant graph as ocis-graph participant accounts as ocis-accounts participant ldap as external LDAP server user-+client: What is the content of my home?</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://owncloud.dev/ocis/metrics/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/metrics/</guid>
      <description>Metrics    This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which has to be configured either through the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default, the metrics endpoint is bound to http://0.0.0.0:8001/metrics.
 go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program&amp;rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  </description>
    </item>
    
    <item>
      <title>Request Flow</title>
      <link>https://owncloud.dev/ocis/flow-docs/request-flow/</link>
      <pubDate>Mon, 27 Apr 2020 16:07:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/flow-docs/request-flow/</guid>
      <description>Request Flow    The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:
  sequenceDiagram %% we have comments!! \o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND Bearer auth using oidc auth token Note over client,proxy: What is in a bearer token?</description>
    </item>
    
    <item>
      <title>Public upload Flow</title>
      <link>https://owncloud.dev/ocis/flow-docs/public-upload-flow/</link>
      <pubDate>Mon, 27 Jul 2020 14:16:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/flow-docs/public-upload-flow/</guid>
      <description>Public Upload flow    The following diagram describes the flow of requests:
 ocis-reva sharing
REVA_SHARING_ADDR = 0.0.0.0:9150
ocis-reva sharing...ocis-reva frontend
REVA_FRONTEND_ADDR = 0.0.0.0:9140
REVA_GATEWAY_URL = ocis:9142
ocis-reva frontend...ocis-proxy
PROXY_HTTP_ADDR = 0.0.0.0:9200
ocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav
prefix = &#34;&#34;
timeout = 86400
ocdav...datagateway
prefix = &#34;data&#34;
timeout = 86400
datagateway...client
client&amp;#xa;22  PATCH https://oc.example.org/data/{token}
Tus-Resumable: 1.0.022 PATCH http...ocis-reva gateway
REVA_GATEWAY_ADDR = 0.0.0.0:9142
ocis-reva gateway...storage-registry
storage-registry&amp;#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http.</description>
    </item>
    
    <item>
      <title>Updating reva</title>
      <link>https://owncloud.dev/extensions/storage/updating/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/updating/</guid>
      <description>    Updating reva     Updating reva     Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  </description>
    </item>
    
    <item>
      <title>Settings Bundles</title>
      <link>https://owncloud.dev/extensions/settings/bundles/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/bundles/</guid>
      <description>A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It&amp;rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.
As of now we support five different types of settings:
 boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle.</description>
    </item>
    
    <item>
      <title>Setup with oCIS</title>
      <link>https://owncloud.dev/clients/web/backend-ocis/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/backend-ocis/</guid>
      <description>Setting up oCIS services Setting up Web Running Web Running acceptance tests     Setting up oCIS services     Setup oCIS by following the setup instructions. Kill the oCIS Web service ./ocis kill web  Setting up Web     Copy ./config/config.json.sample-ocis to ./config/config.json and adjust values if required  Running Web     in the Web checkout folder, run yarn serve open https://localhost:9200 and accept the certificate.</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.dev/ocis/development/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/debugging/</guid>
      <description>Debugging  Start ocis  Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process   Gather error messages Managing dependencies and testing changes       Debugging    As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/accounts/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/accounts/grpc/</guid>
      <description>accounts.proto  Account AddMemberRequest CreateAccountRequest CreateGroupRequest DeleteAccountRequest DeleteGroupRequest GetAccountRequest GetGroupRequest Group Identities ListAccountsRequest ListAccountsResponse ListGroupsRequest ListGroupsResponse ListMembersRequest ListMembersResponse OnPremisesProvisioningError PasswordProfile RebuildIndexRequest RebuildIndexResponse RemoveMemberRequest UpdateAccountRequest UpdateGroupRequest AccountsService GroupsService IndexService   Scalar Value Types     accounts.proto    Account    Account follows the properties of the ms graph api user resource. See https://docs.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0#properties
   Field Type Label Description     id string  The unique identifier for the user.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/ocis_hello/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/grpc/</guid>
      <description>hello.proto  GreetRequest GreetResponse Hello   Scalar Value Types     hello.proto    GreetRequest       Field Type Label Description     name string      GreetResponse       Field Type Label Description     message string      Hello       Method Name Request Type Response Type Description     Greet GreetRequest GreetResponse     Scalar Value Types       .</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/settings/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/grpc/</guid>
      <description>settings.proto  AddSettingToBundleRequest AddSettingToBundleResponse AssignRoleToUserRequest AssignRoleToUserResponse Bool Bundle GetBundleRequest GetBundleResponse GetPermissionByIDRequest GetPermissionByIDResponse GetValueByUniqueIdentifiersRequest GetValueRequest GetValueResponse Identifier Int ListBundlesRequest ListBundlesResponse ListOption ListOptionValue ListPermissionsByResourceRequest ListPermissionsByResourceResponse ListRoleAssignmentsRequest ListRoleAssignmentsResponse ListValue ListValuesRequest ListValuesResponse MultiChoiceList Permission RemoveRoleFromUserRequest RemoveSettingFromBundleRequest Resource SaveBundleRequest   requests and responses for settings bundles  SaveBundleResponse SaveValueRequest SaveValueResponse Setting SingleChoiceList String UserRoleAssignment Value ValueWithIdentifier Bundle.Type Permission.Constraint Permission.Operation Resource.Type BundleService PermissionService RoleService ValueService   Scalar Value Types     settings.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/store/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/store/grpc/</guid>
      <description>store.proto  DatabasesRequest DatabasesResponse DeleteOptions DeleteRequest DeleteResponse Field ListOptions ListRequest ListResponse ReadOptions ReadOptions.WhereEntry ReadRequest ReadResponse Record Record.MetadataEntry TablesRequest TablesResponse WriteOptions WriteRequest WriteResponse Store   Scalar Value Types     store.proto    DatabasesRequest    DatabasesResponse       Field Type Label Description     databases string repeated     DeleteOptions       Field Type Label Description     database string     table string      DeleteRequest       Field Type Label Description     key string     options DeleteOptions      DeleteResponse    Field       Field Type Label Description     type string  type of value e.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.dev/extensions/thumbnails/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/thumbnails/grpc/</guid>
      <description>thumbnails.proto  CS3Source GetThumbnailRequest GetThumbnailResponse WebdavSource GetThumbnailRequest.ThumbnailType ThumbnailService   Scalar Value Types     thumbnails.proto    CS3Source       Field Type Label Description     path string     authorization string      GetThumbnailRequest    A request to retrieve a thumbnail
   Field Type Label Description     filepath string  The path to the source image   thumbnail_type GetThumbnailRequest.</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://owncloud.dev/extensions/ocis_hello/running/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/running/</guid>
      <description>In order to use the Hello extension we need to configure and start oCIS first. After that we can run the Hello extension itself.
Configure and start oCIS    You can either start oCIS from a binary or build it from source.
No matter which way you choose, we need to create a configuration file for ownCloud Web, so that the Hello extension will be loaded in the frontend.</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://owncloud.dev/extensions/ocis_wopiserver/configuration-with-ocis/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_wopiserver/configuration-with-ocis/</guid>
      <description>Running ocis    In order to run this extension we will need to run oCIS first. For that clone and build the oCIS single binary from the github repo https://github.com/owncloud/ocis. After that we will need to create a config file for phoenix so that we can load the WOPI app in the frontend. Create a file web-config.json with the following contents.
{ &amp;#34;server&amp;#34;: &amp;#34;https://localhost:9200&amp;#34;, &amp;#34;theme&amp;#34;: &amp;#34;owncloud&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.1.0&amp;#34;, &amp;#34;openIdConnect&amp;#34;: { &amp;#34;metadata_url&amp;#34;: &amp;#34;https://localhost:9200/.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://owncloud.dev/extensions/ocis_hello/settings/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/settings/</guid>
      <description>oCIS provides an settings extension that other extensions can use to make settings accessible to users.
In case of the Hello extension administrator users are able to change the greeter message.
Settings are stored and presented to the user by the oCIS settings extension. It also exposes endpoints for registering and manipulating so called settings bundles.
The settings defined through settings bundles can be changed by authenticated users in ownCloud Web, if they have enough permissions to edit them.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.dev/extensions/ocis_hello/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/ocis_hello/testing/</guid>
      <description>This repository provides a general guideline for creating tests for an oCIS extension. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.
Unit tests    Unit tests generally live inside *_test.go files in the /pkg directory.</description>
    </item>
    
    <item>
      <title>Settings Values</title>
      <link>https://owncloud.dev/extensions/settings/values/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/values/</guid>
      <description>A Settings Value is the value an authenticated user has chosen for a specific setting, defined in a settings bundle. For choosing settings values as a user the sole entry point is the ocis-web extension provided by this service.
Identifying settings values    A settings value is uniquely identified by four attributes. Three of them are coming from the definition of the setting within it&amp;rsquo;s settings bundle (see Settings Bundles for an example).</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.dev/ocis/development/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
 Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
    <item>
      <title>Running acceptance tests</title>
      <link>https://owncloud.dev/clients/web/testing/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/testing/</guid>
      <description>Introduction  Unit &amp;amp; Integration Tests Acceptance Tests  Prerequisites Prepare &amp;amp; start web Start Docker Run acceptance tests Watch the test run Watch the test report         Introduction    In order to allow us to make changes quickly, often and with a high level of confidence, we heavily rely on tests within the web repository.
All the steps below require you to have the web repo cloned locally and dependencies installed.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/extensions/storage/releasing/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/storage/releasing/</guid>
      <description>Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.
Preparation     Before releasing, make sure that reva has been updated to the desired version  Release     Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly.</description>
    </item>
    
    <item>
      <title>Running acceptance tests - manual</title>
      <link>https://owncloud.dev/clients/web/testing-manual/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/clients/web/testing-manual/</guid>
      <description>Setup Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   Setup backend  ownCloud 10 oCIS   Setup ownCloud Web Run tests  with oC10 backend with oCIS backend Visual Regression Testing  Running the visual regression tests Updating the snapshots     Available settings to be set by environment variables Tips  too many open files   Acceptance Tests in CI  1.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/extensions/accounts/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/accounts/releasing/</guid>
      <description>Requirements Releasing  Package Hierarchy       Requirements    You need a working installation of the Go programming language installed to build the assets for a working release.
Releasing    After adding changes to the accounts package within oCIS and testing them locally, you want to update the compiled assets to the oCIS binary.
To achieve this, you have to run a Go command and add the results to your PR.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.dev/extensions/settings/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/releasing/</guid>
      <description>Requirements Releasing  Package Hierarchy       Requirements    You need a working installation of the Go programming language installed to build the assets for a working release.
Releasing    After adding changes to the settings package within oCIS and testing them locally, you want to update the compiled assets to the oCIS binary.
To achieve this, you have to run a Go command and add the results to your PR.</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://owncloud.dev/extensions/settings/glossary/</link>
      <pubDate>Mon, 04 May 2020 12:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/extensions/settings/glossary/</guid>
      <description>In the context of this extension and oCIS in general, we are using the following terminology.
Configuration     System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings     Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences     User settings Subset of &amp;ldquo;Settings&amp;rdquo; e.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://owncloud.dev/ocis/development/build-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/build-docs/</guid>
      <description>Build the documentation Add changes to the documentation     Build the documentation    For building the documentation you need to have Make and Go 1.14 or higher installed.  Just run make -C docs docs-serve from within the root level of the oCIS git repository. This will make documentation available on localhost:1313 and also do a hot reload if you change something in the (non autogenerated) documentation files.</description>
    </item>
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.dev/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud     Example for Hetzner Cloud      create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
  Access server via ssh as root</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://owncloud.dev/ocis/development/continuous-integration/</link>
      <pubDate>Thu, 01 Oct 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/development/continuous-integration/</guid>
      <description>Concepts Things done in CI Flags in commit message and PR title  Knowledge base       oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.
Concepts    The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.dev/ocis/license/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://owncloud.dev/ocis/release_notes/</link>
      <pubDate>Wed, 16 Dec 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/release_notes/</guid>
      <description>ownCloud Infinite Scale 1.12.0 Technology Preview    Version 1.12.0 is a maintenance release with the foundations for the &amp;lsquo;Spaces&amp;rsquo; feature and for viewer/editor application integrations. The Infinite Scale backend has been further hardened by fixing known issues, improving error handling and stabilizing existing features. Apart from bugfixing, ownCloud Web 4.2.0 has received a number of usability and design improvements for sharing and the file list.
The most prominent changes in ownCloud Infinite Scale 1.</description>
    </item>
    
    <item>
      <title>Release Roadmap</title>
      <link>https://owncloud.dev/ocis/release_roadmap/</link>
      <pubDate>Wed, 16 Dec 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/release_roadmap/</guid>
      <description>You may have asked yourself why there are major version 1 tags in our GitHub repository but the Readme still states ownCloud Infinite Scale is currently in a technical preview state. It will be subject to a lot of changes and is not yet ready for general production deployments.. How can that be if its a major version 1?
Our initial and also our current plan is to stick to SemVer as versioning scheme.</description>
    </item>
    
    <item>
      <title>Demo Users</title>
      <link>https://owncloud.dev/ocis/getting-started/demo-users/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.dev/ocis/getting-started/demo-users/</guid>
      <description>As long as oCIS is released as technology preview it will come with default demo users. These enable you to do quick testing and developing.
To skip the generation of demo users, run the inital setup step with an additional environment variable. ACCOUNTS_DEMO_USERS_AND_GROUPS=false ./bin/ocis server generates only the admin, and one user for IDP and Reva respectively.  Following users are available in the demo set:
   username password email role groups     admin admin admin@example.</description>
    </item>
    
  </channel>
</rss>
