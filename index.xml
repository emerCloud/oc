<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ownCloud</title>
    <link>https://owncloud.github.io/</link>
    <description>Recent content on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2021 14:44:23 +0000</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy as an app in ownCloud 10</title>
      <link>https://owncloud.github.io/clients/web/deployments/oc10-app/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/deployments/oc10-app/</guid>
      <description>Prerequisites Deploying ownCloud Web Configure oauth2 Configure ownCloud 10 Configure ownCloud Web Accessing ownCloud Web     The ownCloud Web is being deployed as an app to ownCloud marketplace to enable easy early integration into existing ownCloud 10 instances. After completing this setup, ownCloud Web will be available on https://&amp;lt;your-owncloud-server&amp;gt;/index.php/apps/web.
Prerequisites  Running ownCloud 10 server with version 10.6 Installed oauth2 app Command line access to your server  Deploying ownCloud Web Download the ownCloud Web app from the marketplace and enable it:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/ocis/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:14 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  ocis server ocis list ocis health ocis kill ocis run List of available Extension subcommands  ocis onlyoffice ocis storage-home ocis storage-userprovider ocis glauth ocis settings ocis storage-gateway ocis storage-public-link ocis konnectd ocis storage-auth-basic ocis storage-users ocis web ocis proxy ocis store ocis thumbnails ocis storage-frontend ocis version ocis accounts ocis storage-metadata ocis webdav ocis ocs ocis storage-auth-bearer ocis storage-sharing         Configuration oCIS Single Binary is not responsible for configuring extensions.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/integration/file_picker/getting-started/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/getting-started/</guid>
      <description>Components of the File picker  File picker Location picker       ownCloud File picker is a web component which can be integrated into existing web applications. It connects to an ownCloud server and enables a user to select resources which are then provided in a response of a fired event. Visit installation to see how to integrate the File picker into your product.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://owncloud.github.io/integration/file_picker/installation/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/installation/</guid>
      <description>Setup authorization Install File picker package Integrate in HTML page with vanilla JavaScript Integrate in Vue web application Set correct variation Pass bearer token     Setup authorization The config for authorization is provided via a json file. Location of the file can be provided via a prop called configLocation. This requires full URL address (e.g. https://&amp;lt;your-server&amp;gt;/&amp;lt;path-to-the-config&amp;gt;). If the prop is not defined, the location will fallback to https://&amp;lt;your-server&amp;gt;/file-picker-config.</description>
    </item>
    
    <item>
      <title>Accessing Resources</title>
      <link>https://owncloud.github.io/integration/file_picker/accessing-resources/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/accessing-resources/</guid>
      <description>    Access resources     File picker is returning selected resources via event called selectResources. To access them, you need to set an event listener where you&amp;rsquo;ll be able to get them as part of the response of the callback function.
Access resources &amp;lt;file-picker id=&amp;#34;file-picker&amp;#34; variation=&amp;#34;resource&amp;#34;&amp;gt;&amp;lt;/file-picker&amp;gt; &amp;lt;script&amp;gt; const item = document.getElementById(&amp;#39;file-picker&amp;#39;) let resources = [] item.addEventListener(&amp;#39;selectResources&amp;#39;, event =&amp;gt; { resources = event.detail[0] }) &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.github.io/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud     Example for Hetzner Cloud   create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
  Access server via ssh as root</description>
    </item>
    
    <item>
      <title>Monitoring &amp; Tracing</title>
      <link>https://owncloud.github.io/ocis/deployment/monitoring-tracing/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/monitoring-tracing/</guid>
      <description>Overview about the proposed solution  Monitoring &amp;amp; tracing clients Monitoring &amp;amp; tracing server     Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.
If you are a developer and want to trace during developing you should have a look at example server setup.
This documentation describes how to set up a long running monitoring &amp;amp; tracing infrastructure for one or multiple oCIS servers or deployments.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/clients/web/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/getting-started/</guid>
      <description>Installation  Docker Binaries Source code   Configuration    Options     Setting up backend and running Running     Installation Docker TBD
Binaries TBD
Source code The source code is hosted at https://github.com/owncloud/web Please refer to the build documentation for Web.
Configuration Depending on the backend you are using, there are sample config files provided in the ownCloud Web git repository.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/development/getting-started/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/getting-started/</guid>
      <description>Requirements Repository structure Starting points  Developing oCIS Developing extensions       Requirements We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.
Besides standard development tools like git and a text editor, you need the following software for development:</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</guid>
      <description>Use the binary  Add your hostname to the idp config Start the ocis fullstack server   Use Docker Compose     Out of the box the ocis single binary and the owncloud/ocis docker image are configured to run on localhost for quick testing and development.
If you need to access ocis on a VM or a remote machine e.g. when testing a mobile client you need to configure ocis to run on a different host.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/onlyoffice/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:23 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/onlyoffice/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  onlyoffice health onlyoffice server       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/onlyoffice/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the .</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/webdav/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:22 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/webdav/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  webdav version webdav health webdav server       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/thumbnails/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:21 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags thumbnails health thumbnails ocis-thumbnails thumbnails server thumbnails version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/store/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:20 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/store/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags store health store ocis-store store server store version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/storage/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:19 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  storage storage-public-link storage storage-users storage auth-bearer storage frontend storage gateway storage health storage storage storage storage-home storage users storage auth-basic storage sharing storage storage-metadata   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver Ocis Driver       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/settings/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:18 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags settings health settings ocis-settings settings server settings version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/proxy/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:17 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/proxy/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags proxy version proxy health proxy ocis-proxy proxy server       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/ocs/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:16 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocs/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags ocs health ocs ocis-ocs ocs server ocs version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/web/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:15 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/web/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  web health web server       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/konnectd/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:13 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/konnectd/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags konnectd version konnectd health konnectd ocis-konnectd konnectd server       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/glauth/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:11 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/glauth/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags glauth ocis-glauth glauth server glauth health       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/accounts/configuration/</link>
      <pubDate>Tue, 26 Jan 2021 14:44:09 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/accounts/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags accounts rebuildIndex accounts ocis-accounts accounts add accounts inspect accounts server accounts update accounts version accounts list accounts remove       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:
/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/building/</guid>
      <description>Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>Building from source</title>
      <link>https://owncloud.github.io/clients/web/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/building/</guid>
      <description>Building ownCloud Web Updating dependencies Cleaning up the workspace Building the documentation  Setting up Viewing the documentation Deploying the documentation       Building ownCloud Web  Run yarn install to install core dependencies Run yarn install-all to install dependencies of all apps and core Run yarn dist to build Web and all apps included in the apps folder  Updating dependencies  Run yarn upgrade-all to update core and app dependencies  Cleaning up the workspace  Run yarn clean-all to remove node_modules and dist folder  Building the documentation Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:</description>
    </item>
    
    <item>
      <title>Configuration Hints</title>
      <link>https://owncloud.github.io/extensions/glauth/configuration-hints/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/glauth/configuration-hints/</guid>
      <description>Configuration hints     Configuration hints The default setup does not use a fallback backend. It can be enabled by setting the GLAUTH_FALLBACK_DATASTORE environment variable.
When using owncloud make sure to use the full URL to the ownCloud 10 graph api app endpoint, eg.: GLAUTH_FALLBACK_SERVERS=&amp;quot;https://demo.owncloud.com/apps/graphapi/v1.0&amp;quot;</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/onlyoffice/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/onlyoffice/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  ownCloud Web configuration Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>oCIS with Keycloak</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_keycloak/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_keycloak/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists 4 containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>oCIS with Traefik</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_traefik/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_traefik/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS running behind Traefik as reverse proxy Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub
The docker stack consists of two containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.</description>
    </item>
    
    <item>
      <title>ownCloud 10 with ownCloud Web</title>
      <link>https://owncloud.github.io/ocis/deployment/owncloud10_with_oc_web/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/owncloud10_with_oc_web/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     This deployment scenario shows how to use ownCloud Web as frontend for an existing ownCloud 10 production installation. It enables ownCloud 10 users to log in and work with their files using the new ownCloud Web. While the scenario includes an ownCloud 10 instance, it only exists to show the necessary configuration for your already existing ownCloud 10 installation.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/clients/web/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/releasing/</guid>
      <description>Releasing ownCloud Web  Package Hierarchy  Releasing Web Frontend Next steps         Releasing ownCloud Web The ownCloud Web is shipped as an ocis Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.
This repository contains the assets and these must be released first before being bundled into ocis-web.
Package Hierarchy  ocis  ocis-web  ocis-pkg web      Releasing Web Frontend  Create a branch release-$version in https://github.</description>
    </item>
    
    <item>
      <title>Bridge</title>
      <link>https://owncloud.github.io/ocis/deployment/bridge/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/bridge/</guid>
      <description>Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-web  Get it! Run it!   Start ocis-konnectd  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis.</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://owncloud.github.io/ocis/development/build/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/build/</guid>
      <description>Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image     Build requirements see Development - Getting Started
Get the sources git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary The oCIS binary source is in the ocis folder inside the oCIS repository. In this folder you can build the oCIS binary:
cd ocis make generate make build After building you have the binary within the bin/ folder.</description>
    </item>
    
    <item>
      <title>EOS</title>
      <link>https://owncloud.github.io/ocis/storage-backends/eos/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/storage-backends/eos/</guid>
      <description>Docker dev environment for eos storage  1. Start eos &amp;amp; ocis containers 2. LDAP support 3. Home storage 4. Users storage 5. Metadata storage 6. Accounts service   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       oCIS can be configured to run on top of eos.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/onlyoffice/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/onlyoffice/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis/onlyoffice.git cd ocis-onlyoffice All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://owncloud.github.io/extensions/storage/users/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/users/</guid>
      <description>Demo driver This is a simple user driver for testing. It contains three users:
einstein:relativity marie:radioactivty richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:
export STORAGE_USERS_DRIVER=demo JSON driver In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:
export STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples</description>
    </item>
    
    <item>
      <title>Storages</title>
      <link>https://owncloud.github.io/extensions/storage/storages/</link>
      <pubDate>Mon, 27 Apr 2020 18:46:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/storages/</guid>
      <description>Storage commands storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.
Storage providers To manage the file tree ocis uses storage storage providers that are accessing the underlying storage using a storage driver.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/ocis/development/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/testing/</guid>
      <description>Testing with test suite in docker  Run full test suite Run single feature test oCIS image to be tested (or: skip build and take existing image) Test log output Cleanup   Testing with test suite natively installed  Getting the tests Run ocis Run the acceptance tests use existing tests for BDD       For running tests in the test suite you have two options.</description>
    </item>
    
    <item>
      <title>Setup with ownCloud 10</title>
      <link>https://owncloud.github.io/clients/web/backend-oc10/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/backend-oc10/</guid>
      <description>Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Web   Running Web Running acceptance tests     Prerequisites Decide on which host and port Web will be served, for example https://web-host:8300/web-path/. In this document, we will refer to the following:
 &amp;lt;web-url&amp;gt; as the full URL, for example https://web-host:8300/web-path/ &amp;lt;web-domain&amp;gt; as the protocol, domain and port, for example: https://web-host:8300  Setting up the ownCloud Server Make sure you have an ownCloud Server already installed.</description>
    </item>
    
    <item>
      <title>Extensions</title>
      <link>https://owncloud.github.io/ocis/development/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/extensions/</guid>
      <description>How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking ownCloud Web (and ocis-web) The ownCloud design system External ownCloud Web apps ownCloud Web extension points  ownCloud Web Files app   API driven development     How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/onlyoffice/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/onlyoffice/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/extensions/web/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/web/releasing/</guid>
      <description>Releasing  Package Hierarchy  Prerequisites Updating ocis-web         Releasing The next generation Web Frontend is shipped as an oCIS Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.
To update this package within all the deliveries, we need to update the package in the following chain from the bottom to the top.</description>
    </item>
    
    <item>
      <title>Login Flow</title>
      <link>https://owncloud.github.io/ocis/flow-docs/login-flow/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/flow-docs/login-flow/</guid>
      <description>Login Flow The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well.:
  document.addEventListener(&#34;DOMContentLoaded&#34;, function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  sequenceDiagram %% we have comments!! \o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://owncloud.github.io/ocis/metrics/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/metrics/</guid>
      <description>Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:8001/metrics.
 go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program&amp;rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  </description>
    </item>
    
    <item>
      <title>Request Flow</title>
      <link>https://owncloud.github.io/ocis/flow-docs/request-flow/</link>
      <pubDate>Mon, 27 Apr 2020 16:07:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/flow-docs/request-flow/</guid>
      <description>Request Flow The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:
  document.addEventListener(&#34;DOMContentLoaded&#34;, function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  sequenceDiagram %% we have comments!! \o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home?</description>
    </item>
    
    <item>
      <title>Public upload Flow</title>
      <link>https://owncloud.github.io/ocis/flow-docs/public-upload-flow/</link>
      <pubDate>Mon, 27 Jul 2020 14:16:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/flow-docs/public-upload-flow/</guid>
      <description>Public Upload flow The following diagram describes the flow of requests:
ocis-reva sharing
REVA_SHARING_ADDR = 0.0.0.0:9150
ocis-reva sharing...ocis-reva frontend
REVA_FRONTEND_ADDR = 0.0.0.0:9140
REVA_GATEWAY_URL = ocis:9142
ocis-reva frontend...ocis-proxy
PROXY_HTTP_ADDR = 0.0.0.0:9200
ocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav
prefix = &#34;&#34;
timeout = 86400
ocdav...datagateway
prefix = &#34;data&#34;
timeout = 86400
datagateway...client
client&amp;#xa;22  PATCH https://oc.example.org/data/{token}
Tus-Resumable: 1.0.022 PATCH http...ocis-reva gateway
REVA_GATEWAY_ADDR = 0.0.0.0:9142
ocis-reva gateway...storage-registry
storage-registry&amp;#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http.</description>
    </item>
    
    <item>
      <title>Updating reva</title>
      <link>https://owncloud.github.io/extensions/storage/updating/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/updating/</guid>
      <description>    Updating reva     Updating reva  Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  </description>
    </item>
    
    <item>
      <title>Settings Bundles</title>
      <link>https://owncloud.github.io/extensions/settings/bundles/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/bundles/</guid>
      <description>A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It&amp;rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.
As of now we support five different types of settings:
 boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle.</description>
    </item>
    
    <item>
      <title>Setup with OCIS</title>
      <link>https://owncloud.github.io/clients/web/backend-ocis/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/backend-ocis/</guid>
      <description>Setting up OCIS services Setting up Web Setting up ocis-web service Running Web Running acceptance tests     Setting up OCIS services  Setup OCIS by cloning the ocis repository and following the setup instructions there. Do not start the whole server but run ./bin/ocis --log-level debug $EXTENSION for all the existing extensions except the web service. A list of extensions can be found by running .</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.github.io/ocis/development/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/debugging/</guid>
      <description>Debugging  Start ocis  Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process   Gather error messages Managing dependencies and testing changes       Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.github.io/extensions/thumbnails/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/grpc/</guid>
      <description>pkg/proto/v0/thumbnails.proto  GetRequest GetResponse GetRequest.FileType ThumbnailService   Scalar Value Types     pkg/proto/v0/thumbnails.proto GetRequest A request to retrieve a thumbnail
   Field Type Label Description     filepath string  The path to the source image   filetype GetRequest.FileType  The type to which the thumbnail should get encoded to.   etag string  The etag of the source image   width int32  The width of the thumbnail   height int32  The height of the thumbnail   authorization string  The authorization token    GetResponse The service response</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/configuration-with-ocis/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/configuration-with-ocis/</guid>
      <description>Configuring ocis-hello with ocis We will need various services to run ocis
Running a ldap server in docker container We will use the ldap server as users provider for ocis.
docker run --hostname ldap.my-company.com \ -e LDAP_TLS_VERIFY_CLIENT=never \ -e LDAP_DOMAIN=owncloud.com \ -e LDAP_ORGANISATION=ownCloud \ -e LDAP_ADMIN_PASSWORD=admin \ --name docker-slapd \ -p 127.0.0.1:389:389 \ -p 636:636 -d osixia/openldap Running a redis server in a docker container Redis will be used by ocis for various caching purposes.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/settings/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/settings/</guid>
      <description>The ocis-settings service exposes an endpoint for registering so called settings bundles. This gives control to every service to define settings that are needed for fulfilling it&amp;rsquo;s intended purpose. There are different types of settings available out of the box - hopefully those already fit your needs. The settings defined through settings bundles can be changed by authenticated users through an ocis-web extension, which is also provided by the settings service.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/testing/</guid>
      <description>This repository provides a general guideline for creating tests for the ocis extensions. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.
Unit tests Unit tests generally live inside *_test.go files in the /pkg directory. One such example in this extension is in /pkg/service/v0/service_test.</description>
    </item>
    
    <item>
      <title>Settings Values</title>
      <link>https://owncloud.github.io/extensions/settings/values/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/values/</guid>
      <description>A Settings Value is the value an authenticated user has chosen for a specific setting, defined in a settings bundle. For choosing settings values as a user the sole entry point is the ocis-web extension provided by this service.
Identifying settings values A settings value is uniquely identified by four attributes. Three of them are coming from the definition of the setting within it&amp;rsquo;s settings bundle (see Settings Bundles for an example).</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.github.io/ocis/development/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
 Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/extensions/storage/releasing/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/releasing/</guid>
      <description>Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.
Preparation  Before releasing, make sure that reva has been updated to the desired version  Release  Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. Prefix the tag with the submodule storage/v.</description>
    </item>
    
    <item>
      <title>Running acceptance tests</title>
      <link>https://owncloud.github.io/clients/web/testing/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/testing/</guid>
      <description>Setting up Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   Run tests  with ownCloud 10 backend with OCIS backend  the quick way (all automated) the manual way (e.g. to run from an existing ocis location)   Visual Regression Testing  Running the visual regression tests Updating the snapshots     Available settings to be set by environment variables Tips  too many open files   Acceptance Tests in CI  1.</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://owncloud.github.io/extensions/settings/glossary/</link>
      <pubDate>Mon, 04 May 2020 12:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/glossary/</guid>
      <description>In the context of this extension and oCIS in general, we are using the following terminology.
Configuration  System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings  Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences  User settings Subset of &amp;ldquo;Settings&amp;rdquo; e.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>https://owncloud.github.io/ocis/development/build-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/build-docs/</guid>
      <description>Build the documentation Add changes to the documentation     Build the documentation Just run make -C docs docs-serve from within the root level of the oCIS git repository.
Add changes to the documentation Please keep this documentation in sync with the oCIS source code.
Changes on the documentation are automatically applied to this site when merged to the master branch.</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://owncloud.github.io/ocis/development/continuous-integration/</link>
      <pubDate>Thu, 01 Oct 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/continuous-integration/</guid>
      <description>Concepts Things done in CI Flags in commit message and PR title  Knowledge base       oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.
Concepts The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration.
Upon running the pipeline, your branch gets merged to the master branch.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/ocis/license/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://owncloud.github.io/ocis/release_notes/</link>
      <pubDate>Wed, 16 Dec 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/release_notes/</guid>
      <description>ownCloud Infinite Scale 1.1.0 Technology Preview Version 1.1.0 is a hardening and patch release. It ships with the latest version of ownCloud Web and brings a couple of minor improvements. The minor version increase is needed due to non-backwards compatible changes in configuration. The documentation has been updated to reflect the changes. Please note that this version is still a Technology Preview and not suited for production use.
The most prominent changes in version 1.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/getting-started/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/getting-started/</guid>
      <description>Run oCIS  Binaries Docker   Usage  Login to ownCloud Web Basic Management Commands       Run oCIS We are distributing oCIS as binaries and Docker images.
You can find more deployments examples in the deployment section
Binaries The binaries for different platforms are downloadable at our download mirror or on GitHub. Latest binaries from the master branch can be found at our download mirrors testing section.</description>
    </item>
    
  </channel>
</rss>