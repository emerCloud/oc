<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ownCloud</title>
    <link>https://owncloud.github.io/</link>
    <description>Recent content on ownCloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2020 13:58:03 +0000</lastBuildDate>
    
	<atom:link href="https://owncloud.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/ocis/getting-started/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/getting-started/</guid>
      <description>Run oCIS  Binaries Docker   Usage  Login to oCIS Web Basic Commands       Run oCIS We are distributing oCIS as binaries and Docker images.
You can find more deployments examples in the deployment section
Binaries The binaries for different platforms are downloadable at our download mirror or on GitHub. Latest binaries from the master branch can be found at our download mirrors testing section.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/integration/file_picker/getting-started/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/getting-started/</guid>
      <description>Components of the File picker  File picker Location picker       ownCloud File picker is a web component which can be integrated into existing web applications. It connects to an ownCloud server and enables a user to select resources which are then provided in a response of a fired event. Visit installation to see how to integrate the File picker into your product.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://owncloud.github.io/integration/file_picker/installation/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/installation/</guid>
      <description>Setup authorization Install File picker package Integrate in HTML page with vanilla JavaScript Integrate in Vue web application Set correct variation     Setup authorization The config for authorization is provided via a json file. Location of the file can be provided via a prop called configLocation. This requires full URL address (e.g. https://&amp;lt;your-server&amp;gt;/&amp;lt;path-to-the-config&amp;gt;). If the prop is not defined, the location will fallback to https://&amp;lt;your-server&amp;gt;/file-picker-config.</description>
    </item>
    
    <item>
      <title>Accessing Resources</title>
      <link>https://owncloud.github.io/integration/file_picker/accessing-resources/</link>
      <pubDate>Wed, 26 Aug 2020 10:56:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/integration/file_picker/accessing-resources/</guid>
      <description>    Access resources     File picker is returning selected resources via event called selectResources. To access them, you need to set an event listener where you&amp;rsquo;ll be able to get them as part of the response of the callback function.
Access resources &amp;lt;file-picker id=&amp;#34;file-picker&amp;#34; variation=&amp;#34;resource&amp;#34;&amp;gt;&amp;lt;/file-picker&amp;gt; &amp;lt;script&amp;gt; const item = document.getElementById(&amp;#39;file-picker&amp;#39;) let resources = [] item.addEventListener(&amp;#39;selectResources&amp;#39;, event =&amp;gt; { resources = event.detail[0] }) &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Preparing a server</title>
      <link>https://owncloud.github.io/ocis/deployment/preparing_server/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/preparing_server/</guid>
      <description>Example for Hetzner Cloud     Example for Hetzner Cloud   create server on Hetzner Cloud. Set labels &amp;ldquo;owner&amp;rdquo; and &amp;ldquo;for&amp;rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing
  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare
  Access server via ssh as root</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://owncloud.github.io/extensions/proxy/about/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/proxy/about/</guid>
      <description>This service provides an proxy service that routes requests to the correct services.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/clients/web/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/getting-started/</guid>
      <description>Installation  Docker Binaries Source code   Setting up backend and running Running     Installation Docker TBD
Binaries TBD
Source code The source code is hosted at https://github.com/owncloud/phoenix Please refer to the build documentation for Phoenix.
Setting up backend and running Phoenix can run against either ownCloud 10 as backend or OCIS. Depending which one you chose, please check the matching section:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/konnectd/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/konnectd/getting-started/</guid>
      <description>Installation  Docker Binaries   Usage  Server Health Version   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/ocs/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocs/getting-started/</guid>
      <description>Installation  Docker Binaries   Usage  Server Health Version   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.</description>
    </item>
    
    <item>
      <title>Getting Started with Development</title>
      <link>https://owncloud.github.io/ocis/development/getting-started/</link>
      <pubDate>Tue, 07 Jul 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/getting-started/</guid>
      <description>Docker dev environment  Option 1: Plain docker Option 2: Docker compose   Verification     Docker dev environment Option 1: Plain docker To build and run your local ocis code with default storage driver
docker run --rm -ti --name ocis -v $PWD:/ocis -p 9200:9200 owncloud/eos-ocis-dev The eos-ocis-dev container will build and run oCIS using the ownCloud storage driver and store files in the container at /var/tmp/reva/data/&amp;lt;username&amp;gt;/files</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/proxy/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/proxy/getting-started/</guid>
      <description>Installation  Docker Binaries   Usage  Server Version       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.
Docker Docker images for ocis-reva are hosted on https://hub.</description>
    </item>
    
    <item>
      <title>Basic Remote Setup</title>
      <link>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/basic-remote-setup/</guid>
      <description>Use the binary  Add your hostname to the idp config Start the ocis fullstack server   Use Docker Compose     Out of the box the ocis single binary and the owncloud/ocis docker image are configured to run on localhost for quick testing and development.
If you need to access ocis on a VM or a remote machine e.g. when testing a mobile client you need to configure ocis to run on a different host.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/webdav/configuration/</link>
      <pubDate>Mon, 23 Nov 2020 13:58:03 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/webdav/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  webdav server webdav version webdav health       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/proxy/configuration/) which lists all possible configurations.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/proxy/configuration/</link>
      <pubDate>Mon, 23 Nov 2020 13:57:58 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/proxy/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags proxy server proxy version proxy health proxy ocis-proxy       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/proxy/configuration/) which lists all possible configurations. Config files and environment variables are picked up if you use the .</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/storage/configuration/</link>
      <pubDate>Mon, 23 Nov 2020 13:57:56 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  storage auth-bearer storage health storage storage-home storage sharing storage auth-basic storage frontend storage storage-users storage storage storage storage-public-link storage users storage gateway storage storage-metadata   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver Ocis Driver       Configuration oCIS Single Binary is not responsible for configuring extensions.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/konnectd/configuration/</link>
      <pubDate>Mon, 23 Nov 2020 13:57:54 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/konnectd/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags konnectd server konnectd version konnectd health konnectd ocis-konnectd       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/ocis_konnectd/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the .</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://owncloud.github.io/extensions/accounts/configuration/</link>
      <pubDate>Mon, 23 Nov 2020 13:57:50 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/accounts/configuration/</guid>
      <description>Configuration  Configuration using config files Environment variables Commandline flags accounts list accounts ocis-accounts accounts rebuildIndex accounts update accounts add accounts server accounts remove accounts version accounts inspect       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.
Each extension has its dedicated documentation page (e.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/building/</guid>
      <description>Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>Building from source</title>
      <link>https://owncloud.github.io/clients/web/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/building/</guid>
      <description>Building Phoenix Updating dependencies Cleaning up the workspace Building the documentation  Setting up Viewing the documentation Deploying the documentation       Building Phoenix  Run yarn install to install core dependencies Run yarn install-all to install dependencies of all apps and core Run yarn dist to build Phoenix and all apps included in the apps folder  Updating dependencies  Run yarn upgrade-all to update core and app dependencies  Cleaning up the workspace  Run yarn clean-all to remove node_modules and dist folder  Building the documentation Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/accounts/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/accounts/getting-started/</guid>
      <description>Installation  Docker Binaries       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.
Docker TBD
Binaries TBD</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/glauth/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/glauth/getting-started/</guid>
      <description>Configuration Tips     Configuration Tips The default setup does not use a fallback backend. It can be enabled by setting the GLAUTH_FALLBACK_DATASTORE environment variable. When using owncloud make sure to use the full URL to the ownCloud 10 graph api app endpoint, eg.: GLAUTH_FALLBACK_SERVERS=&amp;quot;https://demo.owncloud.com/apps/graphapi/v1.0&amp;quot;</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/ocis-phoenix/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis-phoenix/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/store/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/store/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health Version   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/thumbnails/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health Version   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/webdav/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/webdav/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Version Metrics       Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>oCIS with Traefik</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_traefik/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_traefik/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS and Traefik Configuration   Local setup     Overview  oCIS running behind traefik as reverse proxy Valid ssl certificates for the domains for ssl termination  Find this example on GitHub
Server Deployment Requirements  Linux server(s) with docker and docker-compose installed Two domains set up and pointing to your server(s)  See also example server setup</description>
    </item>
    
    <item>
      <title>ownCloud Web with ownCloud 10</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_oc10_backend/</link>
      <pubDate>Mon, 12 Oct 2020 14:04:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_oc10_backend/</guid>
      <description>Overview Server Deployment  Requirements Setup on server Config  Repository structure Traefik ocis  web/config.json identifier-registration.yaml proxy-config.json Environment variables in docker-compose.yaml   oc10     Local setup  Domains Disable certificate checks       This deployment scenario shows how to use ownCloud Web as frontend for an existing ownCloud 10 production installation. It enables ownCloud 10 users to log in and work with their files using the new ownCloud Web.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://owncloud.github.io/extensions/settings/getting-started/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/getting-started/</guid>
      <description>Installation  Docker Binaries   Configuration  Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health Version   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/clients/web/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/releasing/</guid>
      <description>Releasing Phoenix  Package Hierarchy  Releasing Phoenix Frontend Next steps         Releasing Phoenix The next generation Web Frontend is shipped as an ocis Extension. The ocis-phoenix extension is also embedded in the single binary and part of the ocis server command.
This repository contains the assets and these must be released first before being bundled into ocis-phoenix.
Package Hierarchy  ocis  ocis-phoenix  ocis-pkg phoenix      Releasing Phoenix Frontend  Create a branch release-$version in https://github.</description>
    </item>
    
    <item>
      <title>oCIS with external IDP</title>
      <link>https://owncloud.github.io/ocis/deployment/ocis_external_idp/</link>
      <pubDate>Mon, 12 Oct 2020 14:39:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/deployment/ocis_external_idp/</guid>
      <description>Overview Server Deployment  Requirements Install oCIS server Install IDP server Configuration  Repository structure Traefik Konnectd ocis     Local setup     This scenario shows how to setup oCIS and konnectd as external IDP (identity provider). Both have separate domains and will be configured to work together.
Overview  Server 1: oCIS running behind traefik as reverse proxy Server 2: IDP running behind traefik as reverse proxy Valid ssl certificates for the domains for ssl termination  Find this example on GitHub</description>
    </item>
    
    <item>
      <title>Build ocis</title>
      <link>https://owncloud.github.io/ocis/development/building/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/building/</guid>
      <description>Build requirements All required tools besides go and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.
The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13.
Get the sources git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary The oCIS binary source is in the ocis/ocis folder.</description>
    </item>
    
    <item>
      <title>EOS</title>
      <link>https://owncloud.github.io/ocis/eos/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/eos/</guid>
      <description>Docker dev environment for eos storage  1. Start eos &amp;amp; ocis containers 2. LDAP support 3. Home storage 4. Users storage 5. Metadata storage 6. Accounts service   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       oCIS can be configured to run on top of eos.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/konnectd/building/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/konnectd/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-konnectd.git cd ocis-konnectd All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/accounts/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/accounts/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-accounts.git cd ocis-accounts All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/glauth/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/glauth/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-glauth.git cd ocis-glauth All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/ocis-phoenix/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis-phoenix/building/</guid>
      <description>Backend cd ocis-phoenix make generate make build The above commands will download a Phoenix release and embed it into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-phoenix -h to see all available options.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/ocs/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocs/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-ocs.git cd ocis-ocs All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/proxy/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/proxy/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-proxy.git cd ocis-proxy All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/settings/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-settings.git cd ocis-settings All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/storage/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/building/</guid>
      <description>As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go.To build this project you have to install Go &amp;gt;= v1.13. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis.git cd ocis/storage All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/store/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/store/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-store.git cd ocis-store All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/thumbnails/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/building/</guid>
      <description>Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:
git clone https://github.com/owncloud/ocis-thubnails.git cd {{ Name }} All required tool besides Go itself and make are bundled or getting automatically installed within the Gopath.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://owncloud.github.io/extensions/webdav/building/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/webdav/building/</guid>
      <description>Backend       As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go &amp;gt;= v1.12. After the installation of the required tools you need to get the sources:</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://owncloud.github.io/extensions/storage/users/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/users/</guid>
      <description>Demo driver This is a simple user driver for testing. It contains three users:
einstein:relativity marie:radioactivty richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:
export STORAGE_USERS_DRIVER=demo JSON driver In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:
export STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples</description>
    </item>
    
    <item>
      <title>Storages</title>
      <link>https://owncloud.github.io/extensions/storage/storages/</link>
      <pubDate>Mon, 27 Apr 2020 18:46:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/storages/</guid>
      <description>Storage commands storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.
Storage providers To manage the file tree ocis uses storage storage providers that are accessing the underlying storage using a storage driver.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/ocis/development/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/testing/</guid>
      <description>Acceptance tests We are using the ownCloud 10 acceptance test suite against oCIS. To set this up you need the ownCloud 10 core repo, a LDAP server that the acceptance tests can use to manage users, a redis server for file-versions and the oCIS code.
Getting the tests All you need to do to get the acceptance tests is check out the core repo:
git clone https://github.com/owncloud/core.git Run a redis server in a docker container File versions need a redis server.</description>
    </item>
    
    <item>
      <title>Setup with ownCloud 10</title>
      <link>https://owncloud.github.io/clients/web/backend-oc10/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/backend-oc10/</guid>
      <description>Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Phoenix   Running Phoenix Running acceptance tests     Prerequisites Decide on which host and port Phoenix will be served, for example https://phoenix-host:8300/phoenix-path/. In this document, we will refer to the following:
 &amp;lt;phoenix-url&amp;gt; as the full URL, for example https://phoenix-host:8300/phoenix-path/ &amp;lt;phoenix-domain&amp;gt; as the protocol, domain and port, for example: https://phoenix-host:8300  Setting up the ownCloud Server Make sure you have an ownCloud Server already installed.</description>
    </item>
    
    <item>
      <title>Extension</title>
      <link>https://owncloud.github.io/ocis/extensions/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/extensions/</guid>
      <description>How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking phoenix (and ocis-phoenix) The ownCloud design system External phoenix apps Phoenix extension points  Phoenix core Files app   API driven development     How to build and run ocis-simple ocis uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/glauth/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/glauth/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/ocs/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocs/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/storage/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/store/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/store/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/extensions/thumbnails/releasing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/releasing/</guid>
      <description>Preperation Release     To release a new version of ocis-thumbnails, you have to follow a few simple steps.
Preperation  Create a new branch e.g. release-x.x.x where x.x.x is the version you want to release. Checkout the preparation branch. Create a new changelog folder and move the unreleased snippets there. mkdir changelog/x.x.x_yyyy-MM-dd/ # yyyy-MM-dd is the current date mv changelog/unreleased/* changelog/x.x.x_yyyy-MM-dd/ Commit and push the changes git add --all git commit -m &amp;#34;prepare release x.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/extensions/ocis-phoenix/releasing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis-phoenix/releasing/</guid>
      <description>Releasing  Package Hierarchy  Prerequisites Updating ocis-phoenix Next steps         Releasing The next generation Web Frontend is shipped as an oCIS Extension. The ocis-phoenix extension is also embedded in the single binary and part of the ocis server command.
To update this package within all the deliveries, we need to update the package in the following chain from the bottom to the top.</description>
    </item>
    
    <item>
      <title>Login Flow</title>
      <link>https://owncloud.github.io/ocis/login-flow/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/login-flow/</guid>
      <description>Login Flow The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well.:
  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://owncloud.github.io/ocis/metrics/</link>
      <pubDate>Mon, 04 May 2020 20:47:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/metrics/</guid>
      <description>Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:8001/metrics.
 go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program&amp;rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  </description>
    </item>
    
    <item>
      <title>Request Flow</title>
      <link>https://owncloud.github.io/ocis/request-flow/</link>
      <pubDate>Mon, 27 Apr 2020 16:07:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/request-flow/</guid>
      <description>Request Flow The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:
  mermaid.initialize({ flowchart: { useMaxWidth: true } });  sequenceDiagram %% we have comments!! \o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home?</description>
    </item>
    
    <item>
      <title>Public upload Flow</title>
      <link>https://owncloud.github.io/ocis/public-upload-flow/</link>
      <pubDate>Mon, 27 Jul 2020 14:16:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/public-upload-flow/</guid>
      <description>Public Upload flow The following diagram describes the flow of requests:
ocis-reva sharing
REVA_SHARING_ADDR = 0.0.0.0:9150
ocis-reva sharing...ocis-reva frontend
REVA_FRONTEND_ADDR = 0.0.0.0:9140
REVA_GATEWAY_URL = ocis:9142
ocis-reva frontend...ocis-proxy
PROXY_HTTP_ADDR = 0.0.0.0:9200
ocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav
prefix = &#34;&#34;
timeout = 86400
ocdav...datagateway
prefix = &#34;data&#34;
timeout = 86400
datagateway...client
client&amp;#xa;22  PATCH https://oc.example.org/data/{token}
Tus-Resumable: 1.0.022 PATCH http...ocis-reva gateway
REVA_GATEWAY_ADDR = 0.0.0.0:9142
ocis-reva gateway...storage-registry
storage-registry&amp;#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http.</description>
    </item>
    
    <item>
      <title>Updating reva</title>
      <link>https://owncloud.github.io/extensions/storage/updating/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/updating/</guid>
      <description>    Updating reva     Updating reva  Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  </description>
    </item>
    
    <item>
      <title>Settings Bundles</title>
      <link>https://owncloud.github.io/extensions/settings/bundles/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/bundles/</guid>
      <description>A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It&amp;rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.
As of now we support five different types of settings:
 boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle.</description>
    </item>
    
    <item>
      <title>Setup with OCIS</title>
      <link>https://owncloud.github.io/clients/web/backend-ocis/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/backend-ocis/</guid>
      <description>Setting up OCIS services Setting up Phoenix Setting up ocis-phoenix service Running Phoenix Running acceptance tests     Setting up OCIS services  Setup OCIS by cloning the ocis repository and following the setup instructions there. Do not start the whole server but run ./bin/ocis --log-level debug $EXTENSION for all the existing extensions except the phoenix service. A list of extensions can be found by running .</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://owncloud.github.io/ocis/development/debugging/</link>
      <pubDate>Thu, 19 Mar 2020 08:21:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/debugging/</guid>
      <description>Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.
Ultimately, we want to be able to stop a single service using eg. ocis kill phoenix so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.</description>
    </item>
    
    <item>
      <title>GRPC API</title>
      <link>https://owncloud.github.io/extensions/thumbnails/grpc/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/grpc/</guid>
      <description>pkg/proto/v0/thumbnails.proto  GetRequest GetResponse GetRequest.FileType ThumbnailService   Scalar Value Types     pkg/proto/v0/thumbnails.proto GetRequest A request to retrieve a thumbnail
   Field Type Label Description     filepath string  The path to the source image   filetype GetRequest.FileType  The type to which the thumbnail should get encoded to.   etag string  The etag of the source image   width int32  The width of the thumbnail   height int32  The height of the thumbnail   authorization string  The authorization token    GetResponse The service response</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/ocis-phoenix/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis-phoenix/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Running</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/configuration-with-ocis/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/configuration-with-ocis/</guid>
      <description>Configuring ocis-hello with ocis We will need various services to run ocis
Running a ldap server in docker container We will use the ldap server as users provider for ocis.
docker run --hostname ldap.my-company.com \ -e LDAP_TLS_VERIFY_CLIENT=never \ -e LDAP_DOMAIN=owncloud.com \ -e LDAP_ORGANISATION=ownCloud \ -e LDAP_ADMIN_PASSWORD=admin \ --name docker-slapd \ -p 127.0.0.1:389:389 \ -p 636:636 -d osixia/openldap Running a redis server in a docker container Redis will be used by ocis for various caching purposes.</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/settings/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/settings/</guid>
      <description>The ocis-settings service exposes an endpoint for registering so called settings bundles. This gives control to every service to define settings that are needed for fulfilling it&amp;rsquo;s intended purpose. There are different types of settings available out of the box - hopefully those already fit your needs. The settings defined through settings bundles can be changed by authenticated users through an ocis-web extension, which is also provided by the settings service.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/testing/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/testing/</guid>
      <description>This repository provides a general guideline for creating tests for the ocis extensions. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.
Unit tests Unit tests generally live inside *_test.go files in the /pkg directory. One such example in this extension is in /pkg/service/v0/service_test.</description>
    </item>
    
    <item>
      <title>Settings Values</title>
      <link>https://owncloud.github.io/extensions/settings/values/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/values/</guid>
      <description>A Settings Value is the value an authenticated user has chosen for a specific setting, defined in a settings bundle. For choosing settings values as a user the sole entry point is the ocis-web extension provided by this service.
Identifying settings values A settings value is uniquely identified by four attributes. Three of them are coming from the definition of the setting within it&amp;rsquo;s settings bundle (see Settings Bundles for an example).</description>
    </item>
    
    <item>
      <title>Tracing</title>
      <link>https://owncloud.github.io/ocis/development/tracing/</link>
      <pubDate>Wed, 13 May 2020 12:09:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/tracing/</guid>
      <description>By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:
 Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \ -p 5775:5775/udp \ -p 6831:6831/udp \ -p 6832:6832/udp \ -p 5778:5778 \ -p 16686:16686 \ -p 14268:14268 \ -p 14250:14250 \ -p 9411:9411 \ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.</description>
    </item>
    
    <item>
      <title>Releasing</title>
      <link>https://owncloud.github.io/extensions/storage/releasing/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/storage/releasing/</guid>
      <description>Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.
Preparation  Before releasing, make sure that reva has been updated to the desired version  Release  Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. Prefix the tag with the submodule storage/v.</description>
    </item>
    
    <item>
      <title>Running acceptance tests</title>
      <link>https://owncloud.github.io/clients/web/testing/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/clients/web/testing/</guid>
      <description>Setting up Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   Run tests  with ownCloud 10 backend with OCIS backend  the quick way (all automated) the manual way (e.g. to run from an existing ocis location)     Available settings to be set by environment variables Tips  too many open files   Acceptance Tests in CI  1.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/thumbnails/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/thumbnails/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>https://owncloud.github.io/extensions/settings/glossary/</link>
      <pubDate>Mon, 04 May 2020 12:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/glossary/</guid>
      <description>In the context of this extension and oCIS in general, we are using the following terminology.
Configuration  System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings  Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences  User settings Subset of &amp;ldquo;Settings&amp;rdquo; e.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/ocis_hello/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/ocis_hello/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/extensions/settings/license/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://owncloud.github.io/extensions/settings/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
    <item>
      <title>Build the documentation</title>
      <link>https://owncloud.github.io/ocis/development/building-docs/</link>
      <pubDate>Mon, 27 Jul 2020 08:39:38 +0000</pubDate>
      
      <guid>https://owncloud.github.io/ocis/development/building-docs/</guid>
      <description>Buildling the documentation Following steps can be applied for every oCIS extension repository.
Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:
cd hugo hugo -D server Then open &amp;ldquo;http://localhost:1313/&amp;rdquo;
When making changes to the docs, run
rsync -ax --delete ../docs/ content/ in the hugo folder and the server will pick up the changes and reload the page automatically.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://owncloud.github.io/ocis/license/</link>
      <pubDate>Thu, 27 Feb 2020 20:35:00 +0100</pubDate>
      
      <guid>https://owncloud.github.io/ocis/license/</guid>
      <description>This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.</description>
    </item>
    
  </channel>
</rss>