[{"id":0,"href":"/clients/web/","title":"ownCloud Web","parent":"Clients","content":"This is the next generation ownCloud frontend. If you\u0026rsquo;re new here, head over to the the getting started guide for a quick introduction.\n"},{"id":1,"href":"/ocis/","title":"oCIS - ownCloud Infinite Scale","parent":"ownCloud","content":" ownCloud Infinite Scale    Welcome to oCIS, the modern file-sync and share platform, which is based on our knowledge and experience with the PHP based ownCloud server.\nThe idea of federated storage    To creata a truly federated storage architecture oCIS breaks down the old ownCloud 10 user specific namespace, which is assembled on the server side, and makes the individual parts accessible to clients as storage spaces and storage space registries.\nThe below diagram shows the core conceps that are the foundation for the new architecture:\n End user devices can fetch the list of storage spaces a user has access to, by querying one or multiple storage space registries. The list contains a unique endpoint for every storage space. Storage space registries manage the list of storage spaces a user has access to. They may subscrible to storage spaces in order to receive notifications about changes on behalf of an end users mobile or desktop client. Storage spaces represent a collection of files and folders. A users personal files are a storage space, a group or project drive is a storage space, and even incoming shares are treated and implemented as storage spaces. Each with properties like owners, permissions, quota and type. Storage providers can hold multiple storage spaces. At an oCIS instance, there might be a dedicated storage provider responsible for users personal storage spaces. There might be multiple, sharing the load or there might be just one, hosting all types of storage spaces.      storage provider     storage provider     storage provider     storage provider    storage space   storage space   storage space    a sea of storage spaces     a sea of storage spaces    storage space   storage space    einstein     einst...     marie     marie     richard     richa...     storage space  registry at  https://cloud.zurich.test      storage sp...     storage space  registry at  https://cloud.paris.test      storage sp...     storage space  registry at  https://cloud.princeton.test      storage sp...     oCIS = federated storage     oCIS = federated storage     multiple  storage registries     multiple...     end user devices     end user devices     storage provider     storage provider    storage space     Viewer does not support full SVG 1.1      As an example, Einstein might want to share something with Marie, who has an account at a different identity provider and uses a different storage space registry. The process makes use of OpenID Connect (OIDC) for authentication and would look something like this:\nTo share something with Marie, Einstein would open https://cloud.zurich.test. His browser loads oCIS web and presents a login form that uses the OpenID Connect Discovery to look up the OIDC issuer. For einstein@zurich.test he will end up at https://idp.zurich.test, authenticate and get redirected back to https://cloud.zurich.test. Now, oCIS web will use a similar discovery to look up the storage space registry for the account, based on the email (or username). He will discover that https://cloud.zurich.test is also his storage registry that the web UI will use to load the list of storage spaces that are available to him.\nAfter locating a folder that he wants to share with Marie he enters her email marie@paris.test in the sharing dialog to grant her the editor role. This, in effect, creates a new storage space that is registered with the storage space registry at https://cloud.zurich.test.\nEinstein copies the URL in the browser (or an email with the same URL is sent automatically, or the storage registries use a backchannel mechanism). It contains the most specific storage space id and a path relative to it: https://cloud.zurich.test/#/spaces/716199a6-00c0-4fec-93d2-7e00150b1c84/a/rel/path.\nWhen Marie enters that URL she will be presented with a login form on the https://cloud.zurich.test instance, because the share was created on that domain. If https://cloud.zurich.test trusts her OpenID Connect identity provider https://idp.paris.test she can log in. This time, the storage space registry discovery will come up with https://cloud.paris.test though. Since that registry is different than the registry tied to https://cloud.zurich.test oCIS web can look up the storage space 716199a6-00c0-4fec-93d2-7e00150b1c84 and register the WebDAV URL https://cloud.zurich.test/dav/spaces/716199a6-00c0-4fec-93d2-7e00150b1c84/a/rel/path in Maries storage space registry at https://cloud.paris.test. When she accepts that share her clients will be able to sync the new storage space at https://cloud.zurich.test.\noCIS microservice runtime    The oCIS runtime allows us to dynamically manage services running in a single process. We use suture to create a supervisor tree that starts each service in a dedicated goroutine. By default oCIS will start all built-in oCIS extensions in a single process. Individual services can be moved to other nodes to scale-out and meet specific performance requirements. A go-micro based registry allows services in multiple nodes to form a distributed microservice architecture.\noCIS extensions    Every oCIS extension uses ocis-pkg, which implements the go-micro interfaces for servers to register and clients to lookup nodes with a service registry. We are following the 12 Factor methodology with oCIS. The uniformity of services also allows us to use the same command, logging and configuration mechanism. Configurations are forwarded from the oCIS runtime to the individual extensions.\ngo-micro    While the go-micro framework provides abstractions as well as implementations for the different components in a microservice architecture, it uses a more developer focused runtime philosophy: It is used to download services from a repo, compile them on the fly and start them as individual processes. For oCIS we decided to use a more admin friendly runtime: You can download a single binary and start the contained oCIS extensions with a single bin/ocis server. This also makes packaging easier.\nWe use ocis-pkg to configure the default implementations for the go-micro grpc server, client and mdns registry, swapping them out as needed, eg. to use the kubernetes registry plugin.\nREVA    A lot of embedded services in oCIS are built upon the REVA runtime. We decided to bundle some of the CS3 services to logically group them. A home storage provider, which is dealing with metadata, and the corresponding data provider, which is dealing with up and download, are one example. The frontend with the oc flavoured webdav, ocs handlers and a datagateway are another.\nProtocol driven development    Interacting with oCIS involves a multitude af APIs. The server and all clients rely on OpenID Connect for authentication. The embedded LibreGraph Connect can be replaced with any other OpenID Connect Identity Provider. Clients use the WebDAV based oc sync protocol to manage files and folders, ocs to manage shares and TUS to upload files in a resumable way. On the server side REVA is the reference implementation of the CS3 apis which is defined using protobuf. By embedding glauth, oCIS provides a read-only LDAP interface to make accounts, including guests available to firewalls and other systems. In the future, we are looking into the Microsoft Graph API, which is based on odata, as a well defined REST/JSON dialect for the existing endpoints.\nAcceptance test suite    We run a huge test suite, which originated in ownCloud 10 and continues to grow. A detailed description can be found in the developer docs for testing.\nArchitecture Overview    Running bin/ocis server will start the below services, all of which can be scaled and deployed on a single node or in a cloud native environment, as needed.\n StorageStorageocisocisexample extensionexample extensionhellohellobackendbackendstaticweb uistaticweb uiidentity managementidentity managementaccountsaccountsglauth (ldap)glauth (ldap)proxy\n\npart\nreverse proxy \npart\napi gatewayproxy...Persistency LayerPersistency LayerStatelessStatelessAPI Gateway / BFFAPI Gateway / BFFEdge / StaticEdge / St...storage-usersstorage-usersuserprovider\n(ldap)userprovider...storage-usersstorage-usersstorageproviderstorageproviderdataproviderdataproviderstorage-authbearerstorage-authbearerauthprovider\n(oidc)authprovider...storage-gatewaystorage-gatewaygatewaygatewayauthregistryauthregistrystorageregistrystorageregistryweb\n(aka phoenix)web...storage-authbasicstorage-authbasicauthprovider\n(basic)authprovider...settingssettingsstorestoreConsumersConsumersload balancerload balancerCDNCDNstorage-frontendstorage-frontendocsocsocdavocdavocmocmdatagatewaydatagatewaygraphgraphgraph-explorergraph-explorerocsocswebdavwebdavonlyofficeonlyofficeregistry\nmdns / etcdregistry...StatefulStatefulJSON\nfilesJSON...bleve\nindexbleve...ocis\ndriverocis...ocis\ndriverocis...single\nJSON\nfilesingle...single\nJSON\nfilesingle...DNSDNSthumbnailsthumbnailsstorage-publiclinkstorage-publiclinkpublicstorageproviderpublicstorageproviderauthprovider\n(publicshares)authprovider...idpidpkonnectdkonnectdlogin uilogin uistorage-metastorage-metastorageproviderstorageproviderdataproviderdataproviderstorage-homestorage-homestorageproviderstorageproviderdataproviderdataproviderstorage-sharingstorage-sharingusershareproviderusershareproviderpublicshareproviderpublicshareproviderocisocisrevarevakonnectdkonnectdstoragestorageglauthglauthglauthglauthprovided byprovided byViewer does not support full SVG 1.1  "},{"id":2,"href":"/integration/file_picker/","title":"File Picker","parent":"Integrations","content":"Easily integrate ownCloud into your own product.\n"},{"id":3,"href":"/ocis/adr/0001-introduce-accounts-service/","title":"1. Introduce an accounts service","parent":"Architecture Decisions","content":" Status: superseded by ADR-0003 Deciders: @butonic, @felixboehm, @micbar, @pmaier1 Date: 2020-06-15  Technical Story: persist accounts\nContext and Problem Statement    To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email und username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.\nDecision Drivers     oCIS should be a single binary that can run out of the box without external dependencies like an LDAP server. Time: we want to build a release candidate asap. Firewalls need access to guests, typically via LDAP. Not all external LDAPs are writeable for us to provision Guest accounts. We see multiple LDAP servers in deployments. Being able to handle them is important and should be covered by using OIDC + being able to query multiple LDAP servers.  Considered Options     Accounts service wraps LDAP GLAuth wraps accounts service  Decision Outcome    Chosen option: \u0026ldquo;GLAuth wraps accounts service\u0026rdquo;, because we need write access to provision guest accounts and GLAuth currently has no write support.\nPositive Consequences     We can build a self contained user management in the accounts service and can adjust it to our requirements. We do not rely on an LDAP server which would only be possible by implementing write support in the LDAP libraries used by GLAuth (hard to estimate effort, when will that be merged upstream).  Negative Consequences     We need to spend time on implementing user management  Pros and Cons of the Options    Accounts service wraps LDAP     Bad, because not all external LDAPs are writeable for us to provision Guest accounts.  "},{"id":4,"href":"/clients/web/deployments/oc10-app/","title":"Deploy as an app in ownCloud 10","parent":"Deployments","content":"    Prerequisites Deploying ownCloud Web Configure oauth2 Configure ownCloud 10  Set ownCloud Web address Configure link routing Make ownCloud Web the default web interface   Configure ownCloud Web Integrate ownCloud Classic features in ownCloud Web  Add links to the app switcher Add links to the user menu ONLYOFFICE   Accessing ownCloud Web     The ownCloud Web is being deployed as an app to ownCloud marketplace to enable easy early integration into existing ownCloud 10 instances. After completing this setup, ownCloud Web will be available on https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web.\nPrerequisites     Running ownCloud 10 server with version 10.6 Installed oauth2 app Command line access to your server  Deploying ownCloud Web    Download the ownCloud Web app from the marketplace and enable it:\nocc market:install web Configure oauth2    Within the Admin page of ownCloud 10, head into User Authentication and add a new client with arbitrary name (e.g. ownCloud Web) and redirection URL https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web/oidc-callback.html.\n If you use OpenID Connect you instead need to add a new client for ownCloud Web to your identity provider.  Configure ownCloud 10    Set ownCloud Web address    To set the ownCloud Web address and to display ownCloud Web in the app switcher, add the following line into config/config.php:\n\u0026#39;web.baseUrl\u0026#39; =\u0026gt; \u0026#39;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web\u0026#39;, Configure link routing    Administrators can optionally decide whether ownCloud Links (public and private links) should be provided by the Classic web interface or by ownCloud Web using the web.rewriteLinks option in config/config.php. The option defaults to false so that the links open in the Classic web interface. Setting it to true will redirect all links to ownCloud Web. To redirect all private and public links to ownCloud Web, add the following line into config/config.php:\n\u0026#39;web.rewriteLinks\u0026#39; =\u0026gt; true, Make ownCloud Web the default web interface    Administrators can optionally decide to make ownCloud Web the default web interface that users see after they log in to ownCloud. By default the Classic web interface will be presented to users. To present ownCloud Web to users by default, add the following line into config/config.php:\n\u0026#39;defaultapp\u0026#39; =\u0026gt; \u0026#39;web\u0026#39;, While it is possible to make ownCloud Web the default web interface, the decision should be carefully evaluated. Features are still being added to ownCloud Web and users might need to use the Classic web interface to do certain actions.  Configure ownCloud Web    There are a few config values which need to be set in order for ownCloud Web to work correctly. Please copy the example config below into config/config.json and adjust it for your environment:\n{ \u0026#34;server\u0026#34; : \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;clientId\u0026#34;: \u0026#34;\u0026lt;client-id-from-oauth2\u0026gt;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/oauth2/api/v1/token\u0026#34;, \u0026#34;authUrl\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/oauth2/authorize\u0026#34; }, \u0026#34;apps\u0026#34; : [ \u0026#34;files\u0026#34;, \u0026#34;media-viewer\u0026#34;, \u0026#34;draw-io\u0026#34; ], \u0026#34;applications\u0026#34; : [ { \u0026#34;title\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;Classic Design\u0026#34;, \u0026#34;de\u0026#34;: \u0026#34;Dateien\u0026#34;, \u0026#34;fr\u0026#34;: \u0026#34;Fichiers\u0026#34;, \u0026#34;zh_CN\u0026#34;: \u0026#34;文件\u0026#34; }, \u0026#34;icon\u0026#34;: \u0026#34;switch_ui\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/files\u0026#34; }, { \u0026#34;icon\u0026#34;: \u0026#34;application\u0026#34;, \u0026#34;menu\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;_self\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;de\u0026#34;: \u0026#34;Einstellungen\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Settings\u0026#34; }, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/settings/personal\u0026#34; } ] }    config parameter explanation     server ownCloud 10 server address   theme Theme to be used in ownCloud Web pointing to a json file inside of themes folder   auth.clientId Client ID received when adding ownCloud Web in the User Authentication section in Admin   apps List of internal extensions to be loaded   applications Additional apps and links to be displayed in the application switcher or in the user menu   applications[0].title Visible title in the application switcher or user menu, localizable   applications[1].menu Use user to move the menu item into the user menu. Defaults to app switcher    It is important that you don\u0026rsquo;t edit or place the config.json within the app folder. If you do, the integrity check of the app will fail and raise warnings.  If you use OpenID Connect you need to replace the \u0026quot;auth\u0026quot; part with following configuration:\n\u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;\u0026lt;fqdn-of-the-identity-provider\u0026gt;/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;\u0026lt;fqdn-of-the-identity-provider\u0026gt;\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;\u0026lt;client-id-from-the-identity-provider\u0026gt;\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; },   Integrate ownCloud Classic features in ownCloud Web    Add links to the app switcher    ownCloud Classic features that are not deeply integrated with the Classic UI (e.g., full screen apps) can be added to the ownCloud Web app switcher so that users can easily access them from ownCloud Web. You can use the following example and customize it according to your needs.\nTo add new elements in the app switcher, paste the following into the applications section of config.json:\n{ \u0026#34;title\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;Custom Groups\u0026#34;, \u0026#34;de\u0026#34;: \u0026#34;Benutzerdefinierte Gruppen\u0026#34; }, \u0026#34;icon\u0026#34;: \u0026#34;application\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/settings/personal?sectionid=customgroups\u0026#34; }, The URL in the example might need adaptations depending on the configuration of your ownCloud Server. App switcher elements added this way will open the respective page in a new tab. This method can also be used to link external sites like Help pages or similar.  Add links to the user menu    Just like adding links to the app switcher, you can also add links to the user menu.\n{ \u0026#34;icon\u0026#34;: \u0026#34;application\u0026#34;, \u0026#34;menu\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;_self\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;de\u0026#34;: \u0026#34;Hilfe\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Help\u0026#34; }, \u0026#34;url\u0026#34;: \u0026#34;https://help-link.example\u0026#34; }, This will add a link to the specified URL in the user menu. This way, the link will open in the same tab. If you instead want to open it in a new tab, just remove the line \u0026quot;target\u0026quot;: \u0026quot;_self\u0026quot;,.\nONLYOFFICE    For ONLYOFFICE there is a native integration available for ownCloud Web when it is used with ownCloud Classic Server. It fully integrates the ONLYOFFICE Document Editors and allows users to create and open documents right from ownCloud Web.\nTo be able to use ONLYOFFICE in ownCloud Web, it is required to run\n ownCloud Server \u0026gt;= 10.8 ownCloud Web \u0026gt;= 4.0.0 ONLYOFFICE Connector for ownCloud 10 \u0026gt;= 7.1.1  Make sure that ONLYOFFICE works as expected in the Classic UI and add the following to config.json to make it available in ownCloud Web:\n\u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;onlyoffice\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/apps/onlyoffice/js/web/onlyoffice.js\u0026#34;, } ] The URL in the example might need adaptations depending on the configuration of your ownCloud Server.  Accessing ownCloud Web    After following all the steps, you should see a new entry in the application switcher called New Design which points to the ownCloud web.\n "},{"id":5,"href":"/ocis/configuration/","title":"Configuration","parent":"oCIS - ownCloud Infinite Scale","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  ocis list ocis health ocis kill ocis run ocis server List of available Extension subcommands  ocis ocs ocis onlyoffice ocis storage-frontend ocis web ocis proxy ocis storage-auth-bearer ocis storage-sharing ocis glauth ocis storage-metadata ocis storage-users ocis storage-groupprovider ocis storage-home ocis version ocis settings ocis storage-public-link ocis webdav ocis idp ocis storage-auth-basic ocis storage-gateway ocis store ocis thumbnails ocis accounts ocis storage-userprovider         Configuration    oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. proxy configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    ownCloud Infinite Scale Stack\nUsage: ocis [global options] command [command options] [arguments...]\n -config-file | $OCIS_CONFIG_FILE Load config file from a non standard location.. -ocis-log-level | $OCIS_LOG_LEVEL Set logging level. Default: info. -ocis-log-pretty | $OCIS_LOG_PRETTY Enable pretty logging. Default: false. -ocis-log-color | $OCIS_LOG_COLOR Enable colored logging. Default: true. -ocis-log-file | $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $OCIS_TRACING_ENABLED Enable sending traces. -tracing-type | $OCIS_TRACING_TYPE Tracing backend type. Default: jaeger. -tracing-endpoint | $OCIS_TRACING_ENDPOINT Endpoint for the agent. -tracing-collector | $OCIS_TRACING_COLLECTOR Endpoint for the collector. -tracing-service | $OCIS_TRACING_SERVICE Service name for tracing. Default: ocis. -jwt-secret | $OCIS_JWT_SECRET Used to dismantle the access token, should equal reva\u0026rsquo;s jwt-secret. Default: Pive-Fumkiu4. -runtime-port | $OCIS_RUNTIME_PORT Configures which port the runtime starts. Default: 9250. -runtime-host | $OCIS_RUNTIME_HOST Configures the host where the runtime process is running. Default: localhost.  Sub Commands    ocis list    Lists running ocis extensions\nUsage: ocis list [command options] [arguments...]\nocis health    Check health status\nUsage: ocis health [command options] [arguments...]\n -debug-addr | $OCIS_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9010.  ocis kill    Kill an extension by name\nUsage: ocis kill [command options] [arguments...]\nocis run    Runs an extension\nUsage: ocis run [command options] [arguments...]\nocis server    Start fullstack server\nUsage: ocis server [command options] [arguments...]\n -debug-addr | $OCIS_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9010. -debug-token | $OCIS_DEBUG_TOKEN Token to grant metrics access. -debug-pprof | $OCIS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $OCIS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $OCIS_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9000. -http-root | $OCIS_HTTP_ROOT Root path of http server. Default: /. -grpc-addr | $OCIS_GRPC_ADDR Address to bind grpc server. Default: 0.0.0.0:9001. -extensions | $OCIS_RUN_EXTENSIONS Run specific extensions during supervised mode.  List of available Extension subcommands    There are more subcommands to start the individual extensions. Please check the documentation about their usage and options in the dedicated section of the documentation.\nocis ocs    Start ocs server\nocis onlyoffice    Start onlyoffice server\nocis storage-frontend    Start storage frontend\nocis web    Start web server\nocis proxy    Start proxy server\nocis storage-auth-bearer    Start storage auth-bearer service\nocis storage-sharing    Start storage sharing service\nocis glauth    Start glauth server\nocis storage-metadata    Start storage and data service for metadata\nocis storage-users    Start storage and data provider for /users mount\nocis storage-groupprovider    Start storage groupprovider service\nocis storage-home    Start storage and data provider for /home mount\nocis version    Lists running services with version\nocis settings    Start settings server\nocis storage-public-link    Start storage public link storage\nocis webdav    Start webdav server\nocis idp    Start idp server\nocis storage-auth-basic    Start storage auth-basic service\nocis storage-gateway    Start storage gateway\nocis store    Start a go-micro store\nocis thumbnails    Start thumbnails server\nocis accounts    Start accounts server\nocis storage-userprovider    Start storage userprovider service\n"},{"id":6,"href":"/integration/file_picker/getting-started/","title":"Getting Started","parent":"File Picker","content":"    Components of the File picker  File picker Location picker       ownCloud File picker is a web component which can be integrated into existing web applications. It connects to an ownCloud server and enables a user to select resources which are then provided in a response of a fired event. Visit installation to see how to integrate the File picker into your product.\nComponents of the File picker    The file picker can be used in two different variations: File picker and location picker.\nFile picker    The file picker enables users to select multiple resources and is intended to bring resources from within ownCloud into your web applications.\nLocation picker    The location picker allows only one folder to be selected and its main purpose is to enable users to save files into the connected ownCloud instance.\n"},{"id":7,"href":"/ocis/adr/0002-persist-accounts-using-cs3-storage/","title":"2. Persist accounts in a CS3 storage","parent":"Architecture Decisions","content":" Status: accepted Deciders: @butonic, @felixboehm Date: 2020-08-21  Technical Story: File system based indexing\nContext and Problem Statement    To set up High Availability (HA) or a geo-replicated setup we need to persist accounts in a distributed way. To efficiently query the accounts by email or username, and not only by id, they need to be indexed. Unfortunately, the bleve index we currently store locally on disk cannot be shared by multiple instances, preventing a scale out deployment.\nConsidered Options     Look into distributed bleve Persist users in a CS3 storage  Decision Outcome    Chosen option: \u0026ldquo;Persist users in a CS3 storage\u0026rdquo;, because we have one service less running and can rely on the filesystem for geo-replication and HA.\nPositive Consequences     We can store accounts on the storage using the CS3 API, pushing geo-distribution to the storage layer. Backups of users and storage can be implemented without inconsistencies between using snapshots.  Negative Consequences     We need to spend time on implementing a reverse index based on files, and symlinks.  "},{"id":8,"href":"/ocis/adr/0003-external-user-management/","title":"3. Use external User Management","parent":"Architecture Decisions","content":" Status: accepted Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2020-12-09  Technical Story: Skip account-service by talking to CS3 user-api\nContext and Problem Statement    To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email and username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.\nDecision Drivers     oCIS should be a single binary that can run out of the box without external dependencies like an LDAP server. Time: we want to build a release candidate asap. oCIS should be able to be easily integrated with standard user management components  Considered Options     Accounts service wraps LDAP GLAuth wraps accounts service  Decision Outcome    Chosen option: \u0026ldquo;Move accounts functionality to GLAuth and name it accounts\u0026rdquo;, by moving the existing accounts service file based persistence to GLAuth and use it as a drop in replacement for an LDAP server. The reverse index and web UI existing in the accounts service will move as well in order to make GLAuth a standalone, small scale user management with write capabilities.\nProduct summary     GLAuth is a drop in user management for small scale deployments that do not rely on an actual LDAP server. oCIS admins can either use the web UI to manage users in GLAuth or use existing tools in their IDM. We hide the complexity by embedding an OpenID Provider, an LDAP server and a user management web UI.  Resulting deployment options     Use internal user management  Recommended for small scale use cases and simple deployments Users, groups and roles are stored and managed within GLAuth   Use external user management  Recommended for mid and large scale use cases Users, groups and roles are stored and managed within an external LDAP / AD / IDM Separate oCIS and LDAP admin: oCIS admin relies on the LDAP admin to manage users   User permissions for roles are always managed in oCIS (settings service) because they are specific to oCIS  Resulting technical implications     Make the file based reverse index a standalone library Contribute to GLAuth  Add ms graph based rest API to manage users, groups and roles (the LDAP lib is currently readonly) Add web UI to glauth that uses the ms graph based rest API to manage users Add a backend that uses the file based reverse index, currently living in the oCIS accounts service Move fallback mechanism from ocis/glauth service to upstream GLAuth to support multiple LDAP servers  Make it a chain to support more than two LDAP servers Document the implications for merging result sets when searching for recipients At least one writeable backend is needed to support creating guest accounts     Make all services currently using the accounts service talk to the CS3 userprovider To support multiple LDAP servers we need to move the fallback mechanism in ocis/glauth service to upstream GLAuth The current CS3 API for user management should be enriched with pagination, field mask and a query language as needed properly register an auxiliary LDAP schema that adds an ownCloudUUID attribute to users and groups  Positive Consequences     The accounts service (which is our drop in LDAP solution) can be dropped. The CS3 userprovider service becomes the only service dealing with users. No sync  Negative Consequences     If users want to store users in their IDM and at the same time guests in a seperate user management we need to implement GLAuth backends that support more than one LDAP server.  Pros and Cons of the Options    GLAuth wraps accounts service    Currently, the accounts service is the source of truth and we use it to implement user management.\n Good, because it solves the problem of storing and looking up an owncloud UUID for a user (and group) Good, because we can manage users out of the box Good, because we can persist accounts in a CS3 storage provider Bad, because it maintains a separate user repository: it needs to either learn or sync users.  Move accounts functionality to GLAuth and name it accounts    We should use an existing LDAP server and make GLAuth a drop in replacement for it.\n Good, because we can use an existing user repository (an LDAP server), no need to sync or learn users. Good, because admins can rely on existing user management tools. Good, because we would have a clear separation of concerns:  users reside in whatever repository, typically an LDAP server  could be an existing LDAP server or AD could be our embeddable drop in glauth server   we use a service to wrap the LDAP server with other APIs:  ms graph API - ODATA based restful API, SCIM - designed to manage user identities, supported by some IDPs, the current accounts API (which is a protobuf spec following the ms graph API)   our account management UI can use the ms graph based API service which can have different backends  an existing LDAP server our drop in glauth server (which might serve the ms graph based API itself) the CS3 API + a future guest provisioning API + a future CS3 user provisioning API (or generic space provisioning)   all oCIS services can use the service registry to look up the accounts service that provides an internal API  could be the CS3 user provider (and API) could be the internal protobuf accounts API   introduce a new guest provisioning API to CS3 which properly captures our requirement to have them in the user repository  guests need to be made available to the firewall storages like EOS that integrate with the os for acl based file permissions need a numeric user and group id     Good, because we can use the CS3 user provider with the existing LDAP / rest driver. Bad, because oCIS admins may not have the rights to manage role assignments. (But this is handled at a different department.) Bad, because oCIS admins may not have the rights to disable users if an external LDAP is used instead of the drop in GLAuth.  Links     supersedes ADR-0001  "},{"id":9,"href":"/integration/file_picker/installation/","title":"Installation","parent":"File Picker","content":"    Setup authentication  OpenID Connect config OAuth2 config Pass bearer token   Install File picker package Select browser storage Integrate in HTML page with vanilla JavaScript Integrate in Vue web application Set correct variation Theming Buttons and events  Select button Cancel button       Setup authentication    The config for the server backend and authentication needs to be provided in json format. The full set of options is listed below in two examples. One for authentication with OAuth2 and one with OpenID Connect.\nThere are different ways of providing the config JSON to the file picker:\n As a JSON object via a prop called configObject As a JSON string via the same prop (configObject) As a URL via a prop called configLocation. This requires full URL address (e.g. https://\u0026lt;your-server\u0026gt;/\u0026lt;path-to-the-config\u0026gt;) If none of the props (configObject or configLocation) is defined, the file picker has a configLocation of https://\u0026lt;your-server\u0026gt;/file-picker-config.json as fallback  Location of the file can be provided via a prop called configLocation. This requires full URL address (e.g. https://\u0026lt;your-server\u0026gt;/\u0026lt;path-to-the-config\u0026gt;). If the prop is not defined, the location will fallback to https://\u0026lt;your-server\u0026gt;/file-picker-config.json. The config can point to both oauth2 and OIDC. You can take a look at the following example to see how OIDC can be defined:\nOpenID Connect config    { \u0026#34;server\u0026#34;: \u0026#34;\u0026lt;owncloud-server\u0026gt;\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;\u0026lt;client-id\u0026gt;\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; } } OAuth2 config    { \u0026#34;server\u0026#34;: \u0026#34;\u0026lt;owncloud-server\u0026gt;\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;clientId\u0026#34;: \u0026#34;\u0026lt;oauth2-client-id\u0026gt;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;/index.php/apps/oauth2/api/v1/token\u0026#34;, \u0026#34;authUrl\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;/index.php/apps/oauth2/authorize\u0026#34; } } Pass bearer token    In case you already have a bearer token and want to skip the whole authorization process inside of the File picker, you can pass it to the component via prop called bearerToken.\nInstall File picker package    To integrate File picker into your own product, you can install it via one of the following commands:\nnpm install @ownclouders/file-picker --save # OR yarn add @ownclouders/file-picker Select browser storage    In order to authorize any request to the ownCloud server, we are storing the Bearer token in a browser storage. By default, it is the session storage. As browsers are adding more strict policies when it comes to blocking third party cookies, your users might experience issues with the token not being saved in the storage. For this reason, it is possible to specify a storage name in the config of File picker. To make it possible to run the File picker inside of an iframe, specify storage: memory.\nIf the memory storage is used, it is not persisted in the session. This leads to users having to authorize again after a refresh has happened.  Users might still be experiencing issues with the authentication even if the memory storage is used. That can happen due to the authentication popup needing to trigger a callback in the File picker. To make sure it will work as supposed, be sure to set correct CORS headers.  Integrate in HTML page with vanilla JavaScript    When including File picker in an HTML page, it is important to include Vue.js as well. In this case, we will import it via unpkg. Without this, the component won\u0026rsquo;t work. Vue needs to be included also if you\u0026rsquo;re importing the File picker into a web application built with other framework than Vue (e.g. React, Angular).\n... \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;File picker example\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/file-picker/dist/wc/file-picker.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... \u0026lt;file-picker id=\u0026#34;file-picker\u0026#34; variation=\u0026#34;resource\u0026#34;\u0026gt;\u0026lt;/file-picker\u0026gt; Integrate in Vue web application    There is a caveat when using the File picker inside an existing Vue application. Since the web component will be imported before Vue, we need to define it as a global variable on our own. This requires us to separate the import of Vue into a bootstrap file.\nvue.js:\nimport Vue from \u0026#39;vue\u0026#39; window.Vue = Vue main.js:\nimport Vue from \u0026#39;./vue\u0026#39; new Vue(...) \u0026lt;template\u0026gt; \u0026lt;file-picker variation=\u0026#34;location\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import FilePicker from \u0026#39;@ownclouders/file-picker\u0026#39; import \u0026#39;@ownclouders/file-picker/dist/lib/file-picker.css\u0026#39; export default: { components: { FilePicker } } \u0026lt;/script\u0026gt; Set correct variation    As described in Getting Started, File picker comes in two variations. To define which one should be used, you need to pass it to the component via its variation property. Valid values are:\n resource - File picker location - Location picker  Theming    File picker comes by default with extracted stylesheet which combines our ownCloud Design System and a few custom styles. If you want to create a custom theme, do not include our stylesheet and create a custom one using File picker selectors.\nButtons and events    The wording of buttons can be customized.\nSelect button    The file picker has a button in the top right for emitting an event with the selected location or resource, depending on the configured variation. This button has default labels, depending on the chosen variation. However, it is possible to define a different button label by setting select-btn-label=\u0026quot;\u0026lt;your select button label\u0026gt;\u0026quot;. Using the select button will emit an event with the name selectResources.\nCancel button    Cancellation for the file picker is disabled by default. When a label is provided, the file picker renders a cancel button on the left side of the select button. This can be achieved by setting cancel-btn-label=\u0026quot;\u0026lt;your cancel button label\u0026gt;\u0026quot;. This will also add a keyboard event on the ESC key. Using the cancel button or the ESC key on the keyboard will emit an event with the name cancel.\n"},{"id":10,"href":"/ocis/adr/0004-support-hot-migration/","title":"4. Support Hot Migration","parent":"Architecture Decisions","content":" Status: proposed Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2021-03-16  Technical Story: [description | ticket/issue URL]\nContext and Problem Statement    Migration is one of the most important topics of the oCIS story. We need to provide a concept how to migrate from oC10 to oCIS.\nDecision Drivers     Do not lose file blob or meta data.  To prevent a sync surge from clients the etag for files should be migrated. To prevent internal links from breaking or pointing to wrong files the file id of existing files needs to be migrated. To prevent data loss trash and version blobs should be migrated.   Existing shares like public links and federated shares must remain functional after the migration.  To prevent internal shares the share type, permissions and expiry needs to be migrated. To prevent public links from breaking the url token, permissions, expiry and password needs to be migrated. What about federated shares? What about additional share permissions, eg. comment on office files?   Legacy clients need to keep working  To keep existing clients working the remote.php/webdav and dav/files/\u0026lt;username\u0026gt; webdav endpoints as well as the ocs API need to be available.   What about app passwords/tokens?  Considered Options     Cold Migration: migrate data while systems are not online, so no user interaction happens in between. Hot Migration: one or both systems are online during migration.  Decision Outcome    Chosen option: \u0026ldquo;[option 1]\u0026rdquo;, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\nPositive Consequences     [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …] …  Negative Consequences     [e.g., compromising quality attribute, follow-up decisions required, …] …  Pros and Cons of the Options    Cold Migration    The migration happens while the service is offline. File metadata, blobs and share data is exported from ownCloud 10 and imported in oCIS. This can happen user by user, where every user export would contain the file blobs, their metadata, trash, versions, shares and all metadata that belongs to the users storage. To prevent group shares from breaking, users in the same groups must be migrated in batch. Depending on the actual group shares in an instance this may effectively require a complete migration in a single batch.\n Good, because oCIS can be tested in a staging system without writing to the production system. Good, because file layout on disk can be changed to support new storage driver capabilities. Bad, because the export and import might require significant amounts of storage. Bad, because a rollback to the state before the migration might cause data loss of the changes that happend in between. Bad, because the cold migration can mean significant downtime.  Hot Migration    The migration happens in subsequent stages while the service is online.\n Good, because the admin can migrate users from old to new backend in a controlled way. Good, because users and admins can learn to trust the new system. Good, because there can be preparations even long before the migrations happens in parallel on the oC10 codebase, ie. addition of metadata that is needed while the system operates. Good, because the downtime of the system can be fairly small. Bad, because it is more complex and might drag on for a long time.  Links     Clarify responsibilities of share providers and storage providers · Issue #1377 · cs3org/reva (github.com) because the share manager for oCIS should store share information on the storage system. And storageprovider should persist share creator · Issue #93 · cs3org/cs3apis (github.com) finally: eos: store share id in inherited xattr · Issue #543 · cs3org/reva (github.com)  "},{"id":11,"href":"/integration/file_picker/accessing-resources/","title":"Accessing Resources","parent":"File Picker","content":"    Access resources     If using File picker as a web component, it is returning selected resources via events called select and update. To access them, you need to set an event listener where you\u0026rsquo;ll be able to get them as part of the response of the callback function.\nAccess resources    \u0026lt;file-picker id=\u0026#34;file-picker\u0026#34; variation=\u0026#34;resource\u0026#34;\u0026gt;\u0026lt;/file-picker\u0026gt; \u0026lt;script\u0026gt; const item = document.getElementById(\u0026#39;file-picker\u0026#39;) let resources = [] item.addEventListener(\u0026#39;select\u0026#39;, event =\u0026gt; { resources = event.detail[0] }) \u0026lt;/script\u0026gt; "},{"id":12,"href":"/ocis/adr/0005-cs3-api-account-management/","title":"5. Account Management through CS3 API","parent":"Architecture Decisions","content":" Status: proposed Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-04-12  Technical Story: Write only management API for User and Group resources\nContext and Problem Statement    What would be a more effective way of using network resources and handle account management within the oCIS-Reva ecosystem? Separating account management at the service level is pragmatic and allows for fast iterations, but also steadily accumulates inconsistencies and bloats technical debt.\nDecision Drivers     Reduce number of network calls. Reduce number of services (merge Account + GLAuth from ADR-0003). Formalize account management at the API level.  Considered Options     Account management delegated to vendors. Add account management to the CS3 API.  Decision Outcome    Chosen option: \u0026ldquo;Add account management to the CS3 API\u0026rdquo;. Making the API declare an API for account management will not only allow a deployment to fail fast (as in: the management node is not running) but would also centralize all management operations that should happen to be constrained within the Reva context. Constrained operations SHOULD be by definition more secure, or at least as secure as the rest of the system.\nPositive Consequences     More resilient API.  Because account management is considered a \u0026ldquo;first class citizen\u0026rdquo; changes are forced to go through a more exhaustive revision process.   Removing Accounts from search users1. Replace the provisioning API in favor of the new Reva Admin node.  (1) the current vendor implementation of searching a user (i.e: when sharing a resource) relies directly on the accounts service, since this is the only source of truth. Searching a user looks like:\n┌────────────────────────────────────────┐ │user search (no LDAP) │ │ │ │ ┌──────────┐ │ │ │ │ │ │ │ proxy │ │ │ │ │ ┌ ─ ─ ─ ─ ─ ┐ │ │ └──────────┘ go-micro │ │ ▲ │ │ │ │ │ Λ │ │ ▼ │ ╱ ╲ │ │ │ ┌──────────┐ ╱ ╲ │ │ │ │ │ ╱ ╲ │ │ │ │ ocs │◀──(1)───▶registry▏ │ │ │ │ │ ╲ ╱ │ │ │ └──────────┘ ╲ ╱ │ │ ▲ │ ╲ ╱ │ │ │ │ V │ │ │ │ │ │ │ │ │ │ │ └ ─ ─ ─ ─ ─ ┘ │ │ │ │ │ │ │ │ │ ┌──────────┐ │ │ │ │ │ │ │ └─────────────▶│ accounts │ │ │ │ │ │ │ └──────────┘ │ │ │ │ │ │(1) ocs requests a connection to the │ │accounts service to the registry │ │ │ └────────────────────────────────────────┘ Whereas, as a result of ADR-0003 and this ADR, we can simplify and improve this design:\n┌─────────────────────────────────────────────┐ │user search │ │ │ │ │ │ ┌──────────┐ │ │ │ │ │ │ │ proxy │ │ │ │ │ │ │ └──────────┘ │ │ │ │ │ ▼ │ │ ┌──────────┐ │ │ │ │ │ │ │ ocs │ │ │ │ │ │ │ └──────────┘ │ │ │ │ │ │ │ │ ┌ ─ ─ ─ ─ ─│─ ─ ─ ─ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ┐ │ │ reva ▼ │ IDM │ │ │ ┌──────────┐ │ ┌──────────┐ │ │ │ │ │ │ │ │ │ │ │ │ users │◀─────┼──▶│ GLAuth │ │ │ │ │ │ │ │ │ │ │ │ └──────────┘ │ └──────────┘ │ │ │ │ │ │ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ └ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │ │ │ └─────────────────────────────────────────────┘ And instead rely on the already existing Reva users provider.\nPros and Cons of the Options    Account management delegated to vendors     Good, because it allows for fast iterations. Bad, because account management happens outside of the Reva process. This can potentially end up in invalid account creation / deletion / updates.  An example with the existing Accounts service is that any client can fire CRUD accounts requests to the Accounts service as long as the client knows where the server is running and provides with an Authorization header (only required by the proxy). This request totally bypasses Reva middlewares and therefore any security measures that should be enforced by the entire system.   Bad, because leaves teams the task of designing and implementing a way of dealing with account management. Ideally one schema should be provided / suggested.  Creating an account using the first option looks currently is implemented in vendors as:\n┌──────────────────────────────────────────────────┐ │ creating a user (webui) │ │ │ │ ┌──────────┐ │ │ │ │ │ │ │ proxy │ │ │ │ │ │ │ └──────────┘ │ │ │ │ │ │ │ │ /api/v0/accounts/accounts-create │ │ │ │ │ │ │ │ │ │ │ ▼ │ │ ┌──────────┐ │ │ │ │ │ │ │ accounts │ │ │ │ │ │ │ └──────────┘ │ │ │ │ note that while doing CRUD operations changes │ │ are instantly reflected for the IDP since out of │ │ the box oCIS uses an accounts backend for │ │ GLAuth. │ └──────────────────────────────────────────────────┘ As explained before, during this flow no Reva middlewares are ran. Creating an account will only use the embedded accounts js file alongside a minted jwt token (by the oCIS proxy) to communicate with the accounts service.\nAdd account management to the CS3 API     Good, because it solidifies what the CS3 API can or cannot do, and account management should be handled at the API level since ultimately accounts would contain a mix of required CS3 and vendor-specific attributes. Good, because it centralizes account management and constrains it within the Reva boundaries. Good, because there is a clear separation of concerns on what is accounts management logic. Good, because we already designed a similar API for the accounts service the only difference being we (vendors) define their own messages.  The API would fully include CRUD methods   Bad, because development cycles are larger.  an example flow will be: update api \u0026gt; run prototool \u0026gt; publish language specific packages \u0026gt; update dependencies to fetch latest version of the package \u0026gt; utilize the new changes.    The new account management workflow will result in:\n┌───────────────────────────────────────────────────┐ │creating a user (webui) │ │ - maintain the same route for compatibility │ │ │ │ ┌──────────┐ │ │ │ │ │ │ │ proxy │ │ │ │ │ │ │ └──────────┘ │ │ │ │ │ │ │ │ /api/v0/accounts/accounts-create │ │ │ │ │ │ │ │ ┌ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ─ ─ ─ ┐ ┌ ─ ─ ─ ─ ─ ─ ─ ─ │ │ Reva │ IDM │ │ │ │ │ │ │ │ │ ▼ │ │ │ │ ┌──────────┐ │ │ ┌──────────┐ │ │ │ │ │ │ │ │ │ │ │ admin │───────────┼──┼──▶│ GLAuth │ │ │ │ │ │ │ │ │ │ │ └──────────┘ │ │ └──────────┘ │ │ │ │ │ │ │ │ │ │ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │ │ │ │ │ │ │ │ │ │ │ │ │ │ an example of a driver could be GLAuth │ │ implementing the user management portion of the │ │ GraphAPI │ └───────────────────────────────────────────────────┘ This flow allows Reva and oCIS Proxy to run any middleware logic in order to validate a request. The communication between the proposed Admin api (CS3 API messages) and the IDM (GLAuth) are specific to the drivers.\n"},{"id":13,"href":"/integration/file_picker/customisations/","title":"Customising","parent":"File Picker","content":"    Variation  File Picker Location Picker   Actions  Select Cancel       It is possible to customise certain parts of the File Picker with the help of props.\nVariation    File picker comes in two different variations - File Picker and Location Picker. To specify which one should be used, set property variation to resource or location.\nFile Picker    File picker variation is used to select resources from within your ownCloud instace. It is possible to select multiple files and folders.\nLocation Picker    Location picker variation is used to select location inside of your ownCloud instance. It is only possible to select one folder.\nActions    If you do not wish to include the default File Picker actions (select and cancel), you can hide both of them.\nSelect    Select resources/location button can be hidden by setting prop isSelectBtnDisplayed to false.\nCancel    Hiding Cancel button slightly differes to the Select button. If you do not wish to display the cancel button, simply leave out any value for prop cancelBtnLabel and the component will be hidden by default.\n"},{"id":14,"href":"/ocis/adr/0006-service-discovery/","title":"6. Service Discovery within oCIS and Reva","parent":"Architecture Decisions","content":" Status: accepted Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-04-19  Technical Story: Introduce Named Services.\nContext and Problem Statement    Reva relies heavily on config files. A known implication of this approach are having to know a-priori where a service is running (host + port). We want to move away from hardcoded values and rely instead on named services for service discovery. Furthermore, we would like both platforms (Reva + oCIS) to have the same source of truth at any given time, not having one to notify the other whenever a service status changes.\nDecision Drivers     Avoid a-priori knowledge of services. Ease of scalability. Always up-to-date knowledge of the running services on a given deployment (a service registry doesn\u0026rsquo;t have to necessarily be running on the same machine / network)  Considered Options     Hardcoded tuples of hostname + port Dynamic service registration  Decision Outcome    Chosen option: \u0026ldquo;Dynamic service registration\u0026rdquo;. There were some drawbacks regarding this due to introducing go-micro to Reva was from start an issue. Given the little usage of go-micro we need, we decided instead to define our very own Registry interface on Reva and extended the runtime arguments to allow for injecting a registry.\nPositive Consequences     Having dynamic service registration delegates the entire lifecycle of finding a process to the service registry. Removing a-priori knowledge of hostname + port for services. Marrying go-micro\u0026rsquo;s registry and a newly defined registry abstraction on Reva. We will embrace go-micro interfaces by defining a third merger interface in order to marry go-micro registry and rega revistry. The ability to fetch a service node relying only on its name (i.e: com.owncloud.proxy) and not on a tuple hostname + port that we rely on being preconfigured during runtime. Conceptually speaking, a better framework to tie all the services together. Referring to services by names is less overall confusing than having to add a service name + where it is running. A registry is agnostic to \u0026ldquo;where is it running\u0026rdquo; because it, by definition, keeps track of this specific question, so when speaking about design or functionality, it will ease communication.  Pros and Cons of the Options    Hardcoded tuples of hostname + port     Good, because firewalls are easier to configure since IP are static. Good, because the mental model required is easier to grasp as IP addresses can be easily bundled. Bad, because it requires thorough planning of ports.  Dynamic service registration     Good, because it abstracts the use of service lookup away to registry logic from the admin or developer. Good, because it allows for, through interfaces, registry injection  This means we can have a service registry that we extensively use in oCIS and inject its functionality onto Reva.   Bad, because it\u0026rsquo;s yet another abstraction. Bad, because firewalls are harder to configure with dynamic IPs.f  "},{"id":15,"href":"/integration/file_picker/component-reference/","title":"Component reference","parent":"File Picker","content":"    Props Events     \u0026lt;file-picker\u0026gt; Props       Property Type Default Description     variation String  Specifies if File Picker (resource) or Location Picker (location) should be used   configLocation String window.location.origin + '/file-picker-config.json' Defines where the config file should be located   bearerToken String null Bearer token used for requests authentication. If specified, authorization step is skipped   configObject `String Object`    isSdkProvided Boolean false Asserts whether ownCloud SDK is already initialised in the consuming app   selectBtnLabel String null Replaces the select button label   isSelectBtnDisplayed Boolean true Asserts whether the select button should be displayed   cancelBtnLabel String nulll Displays the cancel button and uses the given value as a label   isOdsProvided Boolean false Asserts whether the ownCloud Design System has been already initialised in the consuming app   locale String null Sets the language in which the File Picker should be displayed. If omitted, the browser language will be used   isInitialFocusEnabled Boolean false Enables focusing last item of breadcrumbs after the first folder has been loaded    Events       Event Arguments Description     update Resources array Emitted when any resource is selected or deselected or if a folder has been loaded in location picker   select Resources array Emitted when the select button is clicked   cancel Native click event object Emitted when the cancel button is clicked   folderLoaded Current folder object Emitted when loading of a folder has ended    "},{"id":16,"href":"/ocis/adr/0007-api-for-spaces/","title":"7. Open Graph API for oCIS File Spaces","parent":"Architecture Decisions","content":" Status: accepted Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2021-03-19  Technical Story: API to enable the concept of Spaces\nContext and Problem Statement    As one of the building blocks for Spaces in oCIS we plan to add an API that returns information about available spaces. This ADR discusses the API design oriented on the Microsoft Graph API.\n Note: The term \u0026ldquo;spaces\u0026rdquo; is used here in the context of \u0026ldquo;a space where files can be saved\u0026rdquo;, similar to a directory. It is not to be confused with space in the sense of free file space for example.\n The purpose of this new API is to give clients a very simple way to query the dynamic list of spaces, that the user has access to. Clients can provide a better user experience with that.\nThis API is supposed to be queried often, to give clients a condensed view of the available spaces for a user, but also their eTags and cTags. Hence the clients do not have to perform a PROPFIND for every space separately.\nThis API would even allow to provide (WebDAV-) endpoints depending on the kind and version of the client asking for it.\nDecision Drivers     Make it easy to work with a dynamic list of spaces of a user for the clients. No longer the need to make assumptions about WebDAV- and other routes in clients. More meta data available about spaces for a better user experience. Part of the bigger spaces plan. Important to consider in client migration scenarios, ie. in CERN.  Considered Options     Microsoft Graph API inspired API that provides the requested information.  Decision Outcome    This the DRAFT for the API.\nAPI to Get Info about Spaces    ownCloud servers provide an API to query for available spaces of an user.\nSee the openAPI Specification for the open Graph API.\nMost important, the API returns the WebDAV endpoint for each space. With that, clients do not have to make assumptions about WebDAV routes any more.\nSee Drive item in Microsoft Graph API for an overview of drive and driveItem resources. The concrete list of drives / spaces a user has access to can be obtained on multiple endpoints.\nGet \u0026ldquo;Home folder\u0026rdquo;    Retrieve information about the home space of a user. Note: The user has access to more spaces. This call only returns the home space to provide API parity with the Graph API.\nAPI Call: /me/drive: Returns the information about the users home folder.\nGet All Spaces of a User    Retrieve a list of available spaces of a user. This includes all spaces the user has access to at that moment, also the home space.\nAPI Call: /me/drives: Returns a list of spaces.\nThere is also /drives, returning the list of spaces the user has access to. This endpoint is used to access any space by id using /drives/{drive-id}.\nCommon Reply    The reply to both calls is either one or a list of Drive representation objects:\n{ \u0026#34;id\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;createdDateTime\u0026#34;: \u0026#34;string (timestamp)\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;driveType\u0026#34;: \u0026#34;personal | projectSpaces | shares\u0026#34;, \u0026#34;lastModifiedDateTime\u0026#34;: \u0026#34;string (timestamp)\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;owner\u0026#34;: { \u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.identitySet\u0026#34; }, \u0026#34;quota\u0026#34;: { \u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.quota\u0026#34; }, \u0026#34;root\u0026#34;: { \u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.driveItem\u0026#34; }, \u0026#34;webUrl\u0026#34;: \u0026#34;url\u0026#34;, \u0026#34;ocCoOwner\u0026#34;: [ { \u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.identitySet\u0026#34; } ] } The meaning of the objects in Open Graph API context are:\n id - a persistent and unique ID identifying the space, called Storage Space ID. driveType - describing the type of the space. owner - an owner object to whom the space belongs quota - quota information about this space root - the root driveItem object. webUrl - The URL to make this space visible in the browser. ocCoOwner - optional array owner objects of the co-owners of a space (*)  The following driveType values are available in the first step, but might be enhanced later:\n personal: The users home space projectSpaces: The project spaces available for the user (*) shares: The share jail, contains all shares for the user (*)  Other space types such as backup, hidden etc. can be added later as requested.\n Note: The projectSpaces and shares space are virtual spaces. They only contain other spaces, and no regular resources.\n The (*) marked types are not defined in the official MS API. They are prefixed with oc to avoid namespace clashes.\nThe root object equals a driveItem and contains information about the root resource (directory) of the space.\nThis is an example object as it can be expected as root element. It is not complete, as not all elements will be implemented so far.\n{ \u0026#34;cTag\u0026#34;: \u0026#34;string (etag)\u0026#34;, \u0026#34;webDavUrl\u0026#34;: \u0026#34;string\u0026#34;, /* inherited from baseItem */ \u0026#34;id\u0026#34;: \u0026#34;string (identifier)\u0026#34;, \u0026#34;createdBy\u0026#34;: {\u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.identitySet\u0026#34;}, \u0026#34;createdDateTime\u0026#34;: \u0026#34;String (timestamp)\u0026#34;, \u0026#34;eTag\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;lastModifiedBy\u0026#34;: {\u0026#34;@odata.type\u0026#34;: \u0026#34;microsoft.graph.identitySet\u0026#34;}, \u0026#34;lastModifiedDateTime\u0026#34;: \u0026#34;String (timestamp)\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;webUrl\u0026#34;: \u0026#34;string\u0026#34;, } Meaningful fields of the root element in the context of the Open Graph API:\n id - a persistent and unique ID identifying the root directory node. webDavUrl - The webdav path of the top item of the space. eTag - an identifier that changes automatically if the content or metadata of the node or the underlying resources changes. cTag - an identifier that changes automatically if the content of the root node or of one of the underlying resources changes. webUrl - The URL to make this space visible in the browser.   Note: To indicate that only the metadata of a resource has changed, the eTag has changed, but the cTag not.\n Positive Consequences     A well understood and mature API from Microsoft adopted to our needs. Prerequisite for Spaces in oCIS. Enables further steps in client development.  Negative Consequences     Migration impact on existing installations. Still to be investigated. Requires additional webdav endpoint that allows accessing an arbitrary storage space, either  with an id: /dav/spaces/\u0026lt;spaceid\u0026gt;/relative/path/to/file.ext, or with a global path: /dav/global/\u0026lt;accessible\u0026gt;/\u0026lt;mount\u0026gt;/\u0026lt;point\u0026gt;/relative/path/to/file.ext, e.g. /dav/global/projects/Golive 2021/Resources/slides.odt    Open Topics     What are the WebDAV pathes for Trashbin, Versions  option: additional entries in the reply struct   The identitySet object used for \u0026ldquo;owner\u0026rdquo; and \u0026ldquo;coowner\u0026rdquo; require to implement the https://docs.microsoft.com/de-de/graph/api/resources/identityset?view=graph-rest-1.0 JSON object, which contains information that seems to be of limited benefit for oCIS. An alternative would be to implement a simpler identity object for oCIS and use that.  "},{"id":17,"href":"/integration/file_picker/focus-management/","title":"Focus Management","parent":"File Picker","content":"    Focusing content of File Picker Initial folder load focus     File Picker comes only with partial focus management. If you want to focus an element, it needs to be achieved through a code in the consuming app.\nFocusing content of File Picker    If you\u0026rsquo;re including File Picker as a web component, managing focus is slightly different from focusing content of any other component in the DOM tree. Since web component are living in shadow root, we need to send the focus into it. To focus e.g. a checkbox within the File Picker, you can use the following code.\ndocument.querySelector(\u0026#39;#file-picker\u0026#39;).shadowRoot.querySelector(\u0026#39;.oc-breadcrumb-list-item span[aria-current=\u0026#34;page\u0026#34;]\u0026#39;).focus() The #file-picker selector is coming from the consuming app, not from File Picker.  Initial folder load focus    After opening a folder, we are focusing the last item of breadcrumbs. This is not the case when loading the first folder. Any following navigation into the first folder will focus the item. To enable focus on the first load as well, you need to set isInitialFocusEnabled prop to true.\n"},{"id":18,"href":"/ocis/adr/0008-configuration/","title":"8. Configuration","parent":"Architecture Decisions","content":" Status: proposed Deciders: @refs, @butonic, @micbar, @dragotin, @pmaier1 Date: 2021-05-03  Context and Problem Statement    As per urfave/cli\u0026rsquo;s doc:\n The precedence for flag value sources is as follows (highest to lowest):\nCommand line flag value from user Environment variable (if specified) Configuration file (if specified) Default defined on the flag   An issue arises in point 2, in the sense that configuration file refers to a single file containing the value for the env variable. The CLI framework we use for flag parsing does not support merging config structs with CLI flags. This introduces an inconsistency with the framework: config structs are not supported, and we cannot hook to the lifecycle of the flags parsing to use a file as source and conform to these rules.\nBecause we solely rely on structured configuration we need a way to modify values in this struct using the provided means urfave/cli gives us (flags, env variables, config files and default value), but since we have different modes of operation (supervised Vs. unsupervised) we have to define a clear line.\nDecision Drivers     Improve experience for the end user. Improve experience for developers. Sane defaults. Sane overrides.  Considered Options     Extend FlagInputSourceExtension interface Feature request: support for structured configuration (urfave/cli). Clearly defined boundaries of what can and cannot be done. Expose structured field values as CLI flags Drop support for structure configuration Adapt the \u0026ldquo;structured config files have the highest priority\u0026rdquo; within oCIS  Decision Outcome    [STILL UNDECIDED]\nPositive Consequences    [TBD, depends on Decision Outcome]\nPros and Cons of the Options    Extend FlagInputSourceExtension interface     Good, because we could still use Viper to load from config files here and apply values to the flags in the context. Bad, because urfave/cli team are actively working on v3 of altsrc and we don\u0026rsquo;t want to maintain yet another slice of the codebase.  notes: source is FlagInputSourceExtension interface\nFeature request: support for structured configuration (urfave/cli).     Good, because we could remove Viper off the codebase and solely rely on urfave/cli\u0026rsquo;s native code. Bad, because there are no plans to support this upstream.  Clearly defined boundaries of what can and cannot be done.     Good, because no changes to the codebase required (not drastic changes.) Bad, because we\u0026rsquo;re limited by the framework  Expose structured field values as CLI flags     Good, because it has been already taken into account on large projects (kubernetes) here. in point 5. Bad, because it requires quite a bit1 of custom logic. Bad, because how should these flags be present in the -h menu of a subcommand? Probably some code generation needed.  *[1] this is a big uncertainty.\nDrop support for structure configuration     Good, because it makes the integration with the cli framework easier to grasp. Good, because it is not encouraged by the 12factor app spec. Bad, because we already support if and users make active use of it. At least for development.  Adapt the \u0026ldquo;structured config files have the highest priority\u0026rdquo; within oCIS     Good, because that would mean little structural changes to the codebase since the Viper config parsing logic already uses the Before hook to parse prior to the command\u0026rsquo;s action executes.  Notes    Use Cases and Expected Behaviors    Supervised (ocis server or ocis run extension)     Use a global config file (ocis.yaml) to configure an entire set of services: \u0026gt; ocis --config-file /etc/ocis.yaml service Use a global config file (ocis.yaml) to configure a single extension: \u0026gt; ocis --config-file /etc/ocis/yaml proxy When running in supervised mode, config files from extensions are NOT evaluated (only when running ocis server, runs with ocis run extension do parse individual config files)  i.e: present config files: ocis.yaml and proxy.yaml; only the contents of ocis.yaml are loaded1.   Flag parsing for subcommands are not allowed in this mode, since the runtime is in control. Configuration has to be done solely using config files.  *[1] see the development section for more on this topic.\nKnown Gotchas     \u0026gt; ocis --config-file /etc/ocis/ocis.yaml server does not work. It currently only supports reading global config values from the predefined locations.  Unsupervised (ocis proxy)     ocis.yaml is parsed first (since proxy is a subcommand of ocis) proxy.yaml is parsed if present, overriding values from ocis.yaml and any cli flag or env variable present.  Other known use cases     Configure via env + some configuration files like WEB_UI_CONFIG or proxy routes Configure via flags + some configuration files like WEB_UI_CONFIG or proxy routes Configure via global (single file for all extensions) config file + some configuration files like WEB_UI_CONFIG or proxy routes configure via per extension config file + some configuration files like WEB_UI_CONFIG or proxy routes  Each individual use case DOES NOT mix sources (i.e: when using cli flags, do not use environment variables nor cli flags).\nLimitations on urfave/cli prevent us from providing structured configuration and framework support for cli flags + env variables.\nUse Cases for Development    Config Loading    Sometimes is desired to decouple the main series of services from an individual instance. We want to use the runtime to startup all services, then do work only on a single service. To achieve that one could use ocis server \u0026amp;\u0026amp; ocis kill proxy \u0026amp;\u0026amp; ocis run proxy. This series of commands will 1. load all config from ocis.yaml, 2. kill the supervised proxy service and 3. start the same service with the contents from proxy.yaml.\nStart an extension multiple times with different configs (in Supervised mode)    Flag parsing on subcommands in supervised mode is not yet allowed. The runtime will first parse the global ocis.yaml (if any) and run with the loaded configuration. This use case should provide support for having 2 different proxy config files and making use of the runtime start 2 proxy services, with different values.\nFor this to work, services started via Service.Start need to forward any args as flags:\nif err := client.Call(\u0026#34;Service.Start\u0026#34;, os.Args[2], \u0026amp;reply); err != nil { log.Fatal(err) } This should provide with enough flexibility for interpreting different config sources as: \u0026gt; bin/ocis run proxy --config-file /etc/ocis/unexpected/proxy.yaml\nDeveloping Considered Alternatives Further    Let\u0026rsquo;s develop further the following concept: Adapt the \u0026ldquo;structured config files have the highest priority\u0026rdquo; within oCIS.\nOf course it directly contradicts urfave/cli priorities. When a command finished parsing its cli args and env variables, only after that Before is called. This mean by the time we reach a command Before hook, flags have already been parsed and its values loaded to their respective destinations within the Config struct.\nThis should still not prevent a developer from using different config files for a single service. Let\u0026rsquo;s analyze the following use case:\n global config file present (ocis.yaml) single proxy.yaml config file another proxy.yaml config file running under supervision mode  The outcome of the following set of commands should be having all bootstrapped services running + 2 proxies on different addresses:\n\u0026gt; ocis server \u0026gt; ocis kill proxy \u0026gt; ocis run proxy --config-file proxy.yaml \u0026gt; ocis run proxy --config-file proxy2.yaml This is a desired use case that is yet not supported due to lacking of flags forwarding.\nFollow up PR\u0026rsquo;s     Variadic runtime extensions to run (development mostly) Arg forwarding to command (when running in supervised mode, forward any \u0026ndash;config-file flag to supervised subcommands) Ability to set OCIS_URL from a config file (this would require to extend the ocis-pkg/config/config.go file).  The case for OCIS_URL    OCIS_URL is a jack-of-all trades configuration. It is meant to ease up providing defaults and ensuring dependant services are well configured. It is an override to the following env vars:\nOCIS_IDM_ADDRESS PROXY_OIDC_ISSUER STORAGE_OIDC_ISSUER STORAGE_FRONTEND_PUBLIC_URL STORAGE_LDAP_IDP WEB_UI_CONFIG_SERVER WEB_OIDC_AUTHORITY OCIS_PUBLIC_URL Because this functionality is only available as an env var, there is no current way to \u0026ldquo;normalize\u0026rdquo; its usage with a config file. That is, there is no way to individually set OCIS_URL via config file. This is clear technical debt, and should be added functionality.\nState of the Art     Kubernetes proposal on this very same topic Configuration | Pulumi  Configuration can be altered via setters through the CLI.    "},{"id":19,"href":"/ocis/adr/0009-extension-template/","title":"9. Extension Template","parent":"Architecture Decisions","content":" Status: proposed Deciders: @c0rby  Date: 2021-06-10  Technical Story: [description | ticket/issue URL] Context and Problem Statement    We want to accelerate and simplify extension development by removing the necessity to type or copy the boilerplate code. Can we provide a template or a similar mechanism to aid when developing new extensions?\nDecision Drivers     The solution should be easily maintainable.  It should always be up-to-date.   The solution should be easy to use.  Considered Options     Use boilr Create a template git repository. Use ocis-hello as a \u0026ldquo;template\u0026rdquo;  Decision Outcome    Chosen option: \u0026ldquo;[option 1]\u0026rdquo;, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\nPositive Consequences:     [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …] …  Negative consequences:     [e.g., compromising quality attribute, follow-up decisions required, …] …  Pros and Cons of the Options    boilr    We have a boilr template already. boilr-ocis-extension This approach is nice because it provides placeholders which can be filled during the generation of a new extension from the template. It also provides prompts for the placeholder values during generation.\n Good, because with the placeholders it is hard to miss values which should be changed Bad, because maintaining is more complex  Template git repository    Create a git repository with an extension containing the boilerplate code.\n Good, because we can use the usual tools for QA and dependency scanning/updating. Good, because it doesn\u0026rsquo;t require any additional tool.  ocis-hello as a \u0026ldquo;template\u0026rdquo;    We have the ocis-hello repository which acts as an example extension containing a grpc and http service and a web UI. It also demonstrates the usage of the settings service.\n Good, because it contains a bit more code than just the plain boilerplate Good, because the integration into oCIS is already tested for the Hello extension (eg. with Proxy and Settings). This will ensure, that the example extension is up to date. Bad, because if you don\u0026rsquo;t require all features you have to delete stuff  "},{"id":20,"href":"/ocis/adr/0010-policy-enforcement/","title":"10. Extension Policies","parent":"Architecture Decisions","content":" Status: proposed Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1, @fschade Date: 2021-06-30  Context and Problem Statement    There should be a way to impose certain limitations in areas of the code that require licensing. This document researches an approach to achieve it.\nDecision Drivers     as a team, we want to have the licensing code concentrated in a central module we don\u0026rsquo;t want to stop/start the extension whenever a policy is updated (hot reload)  Considered Options     Build the evaluation engine in-house. Use third party libraries such as Open Policy Agent (a CNCF aproved project written in Go)  Decision Outcome    Chosen option: option 2; Use third party libraries such as Open Policy Agent (a CNCF aproved project written in Go)\nPositive Consequences     OPA is production battle tested. built around performance - policies evaluations are no longer than 1ms per request. middleware friendly: we use gRPC clients all over our ecosystem; wrappers (or middlewares) is a viable way to solve this problem instead of a dedicated service or its own package. community support. kubernetes friendly. supports envoy, kong, terraform, traefik, php, node and many more.  Negative Consequences     more vendor code inside the binary (larger attack surface, larger footprint [to be quantified] )  Chosen option approach    Make use of overloading Open Policy Agent\u0026rsquo;s input along with an external storage source (instead of an OPA service) in conjunction with go-micro\u0026rsquo;s gRPC client wrappers (a.k.a middlewares) to leverage policy rules evaluation.\nTerminology    New terms are defined to refer to new mental models:\n policy: self-imposed limitation of a piece of software. i.e: \u0026ldquo;after 20 users limit the use of thumbnails\u0026rdquo;. checkers: in the context of a middleware, a checker is in charge of defining logical conditions that prevent requests (users) from doing an action. policy file: a rego file. policy evaluation: the act of piecing together input (from a request), data (from an external storage) and policies in order to make a decision.  Temporary new Interfaces part of the PoC     IStorage: provides means of extracting data from an external source (in case of the POC an etcd storage cluster).  Future ideas    This proof of concept is very rigid in the sense that the IStorage interface only has one implementation that ties it to etcd, meaning running an oCIS cluster without an etcd service will result in a crash. This is by far ideal and less coupled implementations should be done. There is the case of using the storage metadata as a source to store data necessary to the policies, or even using the go-micro store as a kv store to achieve the exact same, since it already runs as its own service. The implementation of this is trivial and left out of the POC since it requires more time than the allotted for this task.\nMessage Broker    This problem perfectly encompasses the use of a message broker, where services such as OCS will emit messages to a bus and only listeners react to them. In this case the following applies:\nThe necessary interfaces are provided to us by go-micro, only implementations are to be done.\n"},{"id":21,"href":"/ocis/deployment/continuous_deployment/","title":"Continuous Deployment","parent":"Deployment","content":"  oCIS with Traefik  Latest Released   oCIS with WOPI server  Latest Released   oCIS with latest ownCloud Web  Latest   oCIS with Keycloak  Latest Released   oCIS with Hello extension  Latest   oCIS with S3 storage backend (MinIO)  Latest   oCIS with CS3 users  Latest Released     We are continuously deploying the following deployment examples. Every example is deployed in two flavors:\n Latest: reflects the current master branch state of oCIS and will be updated with every commit to master Released: reflects the newest release state (currently latest release of version 1) and will be updated with every release  The configuration for the continuous deployment can be found in the oCIS repository.\noCIS with Traefik    Credentials:\n oCIS: see default demo users  Latest     oCIS: ocis.ocis-traefik.latest.owncloud.works  Released     oCIS: ocis.ocis-traefik.released.owncloud.works  oCIS with WOPI server    Credentials:\n oCIS: see default demo users  Latest     oCIS: ocis.ocis-wopi.latest.owncloud.works  Released     oCIS: ocis.ocis-wopi.released.owncloud.works  oCIS with latest ownCloud Web    Credentials:\n oCIS: see default demo users  Latest     oCIS: ocis.ocis-web.latest.owncloud.works  oCIS with Keycloak    Credentials:\n oCIS: see default demo users Keycloak:  username: admin password: admin    Latest     oCIS: ocis.ocis-keycloak.latest.owncloud.works Keycloak: keycloak.ocis-keycloak.latest.owncloud.works  Released     oCIS: ocis.ocis-keycloak.released.owncloud.works Keycloak: keycloak.ocis-keycloak.released.owncloud.works  oCIS with Hello extension    Credentials:\n oCIS: see default demo users  Latest     oCIS: ocis.ocis-hello.latest.owncloud.works  oCIS with S3 storage backend (MinIO)    Credentials:\n oCIS: see default demo users MinIO:  access key: ocis secret access key: ocis-secret-key    Latest     oCIS: ocis.ocis-s3.latest.owncloud.works MinIO: minio.ocis-s3.latest.owncloud.works  oCIS with CS3 users    Credentials:\n oCIS: see default demo users LDAP admin:  username: cn=admin,dc=owncloud,dc=com password: admin    Latest     oCIS: ocis.ocis-cs3-users.latest.owncloud.works LDAP admin: ldap.ocis-cs3-users.latest.owncloud.works  Released     oCIS: ocis.ocis-cs3-users.released.owncloud.works LDAP admin: ldap.ocis-cs3-users.released.owncloud.works  "},{"id":22,"href":"/ocis/development/","title":"Development","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":23,"href":"/ocis/deployment/monitoring-tracing/","title":"Monitoring \u0026 Tracing","parent":"Deployment","content":"  Overview about the proposed solution  Monitoring \u0026amp; tracing clients Monitoring \u0026amp; tracing server     Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.\nIf you are a developer and want to trace during developing you should have a look at example server setup.\nThis documentation describes how to set up a long running monitoring \u0026amp; tracing infrastructure for one or multiple oCIS servers or deployments. After reading this guide, you also should know everything needed to integrate oCIS into your existing monitoring and tracing infrastructure.\nOverview about the proposed solution         Prometheus     Prometheus     Jaeger Query     Jaeger Query     Jaeger Collector     Jaeger Collector     ElasticSearch     ElasticSearch     Grafana     Grafana     oCIS     oCIS     Telegraf     Telegraf     Prometheus output     Prometheus output     Prometheus input     Prometheus input     Host \u0026amp; Docker metrics     Host \u0026amp; Docker metrics     Jaeger Agent     Jaeger Agent     server for monitoring \u0026amp; tracing infrastructure     server for monitoring \u0026amp; tracing infrastru...     server(s) for oCIS with monitoring \u0026amp; tracing clients     server(s) for oCIS with monitoring \u0026amp; tracing c...     Visualization and querying of  metrics and traces     Visualization and querying o...      Viewer does not support full SVG 1.1      Monitoring \u0026amp; tracing clients    We assume that you already have oCIS deployed on one or multiple servers by using our deployment examples (see rectangle on the left). On these servers our monitoring \u0026amp; tracing clients, namely Telegraf and Jaeger agent, need to be added.\nTelegraf will collect host metrics (CPU, RAM, network, processes, \u0026hellip;) and docker metrics (per container CPU, RAM, network, \u0026hellip;). Telegraf is also configured to scrape metrics from Prometheus metric endpoints which oCIS exposes, this is done by the Prometheus input plugin . The metrics from oCIS and all other metrics gathered will be exposed with the Prometheus output plugin and can therefore be scraped by our monitoring \u0026amp; tracing server.\nJaeger agent is is being configured as target for traces in oCIS. It then will receive traces from all oCIS extensions, add some process tags to them and forward them to our Jaeger collector on our monitoring \u0026amp; tracing server.\nFor more information and how to deploy it, see monitoring \u0026amp; tracing client.\nMonitoring \u0026amp; tracing server    The monitoring \u0026amp; tracing server is considered as shared infrastructure and is normally used for different services. This means that oCIS is not the only software whose metrics and traces are available on the monitoring server. It is also possible that data of multiple oCIS instances are available on the monitoring server.\nMetrics are scraped, stored and can be queried with Prometheus. For the visualization of these metrics Grafana is used. Because Prometheus is scraping the metrics from the oCIS server (pull model instead of a push model), the Prometheus server must have access to the exposed endpoint of the Telegraf Prometheus output plugin.\nJaeger collector receives traces sent by the Jaeger agent on the oCIS servers and persists them in ElasticSearch. From there the user can query and visualize the traces in Jaeger query or in Grafana. Because Jaeger agent is actively sending traces to the monitoring \u0026amp; tracing server, the server must be reachable from the oCIS server.\nFor more information and how to deploy it, see monitoring \u0026amp; tracing server.\n"},{"id":24,"href":"/extensions/storage/architecture/","title":"Architecture","parent":"Storage","content":"Frontend    The oCIS frontend service starts all services that handle incoming HTTP requests:\n ocdav for ownCloud flavoured WebDAV ocs for sharing, user provisioning, capabilities and other OCS API endpoints datagateway for up and downloads TODO: ocm      GET /data/\u0026lt;transfer_token\u0026gt;      GET /da...     PROPFIND /webdav      PROPFIN...     POST /ocs/v1/apps/files_sharing/api/v1/shares   path=/path/to/file   shareType=0   shareWith=\u0026lt;username\u0026gt;       POST /o...     frontend     frontend     datagateway     datagateway     ocdav     ocdav     ocs     ocs     gateway     gateway     storage home | users | ...     storage home | users | ...     storageprovider     storageprovider     dataprovider     dataprovider     GET target URL extracted from transfer token (JWT)      GET tar...     Stat  ListContainer      Stat...     Stat  CreateShare  CreatePublicShare  CreateOCMShare      Stat...      Viewer does not support full SVG 1.1      WebDAV    The ocdav service not only handles all WebDAV requests under (remote.php/)(web)dav but also some other legacy endpoints like status.php:\n   endpoint service CS3 api CS3 namespace description TODO     ownCloud 10 / current ocis setup:        status.php ocdav - - currently static should return compiled version and dynamic values   (remote.php/)webdav ocdav storageprovider /home the old webdav endpoint    (remote.php/)dav/files/\u0026lt;username\u0026gt; ocdav storageprovider /home the new webdav endpoint    (remote.php/)dav/meta/\u0026lt;fileid\u0026gt;/v ocdav storageprovider id based versions    (remote.php/)dav/trash-bin/\u0026lt;username\u0026gt; ocdav recycle - trash should aggregate the trash of storage spaces the user has access to   (remote.php/)dav/public-files/\u0026lt;token\u0026gt; ocdav storageprovider /public/\u0026lt;token\u0026gt; public links    (remote.php/)dav/avatars/\u0026lt;username\u0026gt; ocdav - - avatars, hardcoded look up from user provider and cache   CernBox setup:        (remote.php/)webdav ocdav storageprovider /     Note: existing folder sync pairs in legacy clients will break when moving the user home down in the path hierarchy        (remote.php/)webdav/home ocdav storageprovider /home     (remote.php/)webdav/users ocdav storageprovider /users     (remote.php/)dav/files/\u0026lt;username\u0026gt; ocdav storageprovider /users/\u0026lt;userlayout\u0026gt;     Spaces concept also needs a new endpoint:        (remote.php/)dav/spaces/\u0026lt;spaceid\u0026gt;/\u0026lt;relative_path\u0026gt; ocdav storageregistry \u0026amp; storageprovider bypass path based namespace and directly talk to the responsible storage provider using a relative path spaces concept needs to point to storage spaces or a global endpoint allow accessing spaces, listing is done by the graph api    The correct endpoint for a users home storage space in oc10 is remote.php/dav/files/\u0026lt;username\u0026gt;. In oc10 All requests at this endpoint use a path based reference that is relative to the users home. In oCIS this can be configured and defaults to /home as well. Other API endpoints like ocs and the web UI still expect this to be the users home.\nIn oc10 we originally had remote.php/webdav which would render the current users home storage space. The early versions (pre OC7) would jail all received shares into a remote.php/webdav/shares subfolder. The semantics for syncing such a folder are not trivially predictable, which is why we made shares freely mountable anywhere in the users home.\nThe current reva implementation jails shares into a remote.php/webdav/Shares folder for performance reasons. Obviously, this brings back the special semantics for syncing. In the future we will follow a different solution and jail the received shares into a dedicated /shares space, on the same level as /home and /spaces. We will add a dedicated API to list all storage spaces a user has access to and where they are mounted in the users namespace.\nExisting folder sync pairs in legacy clients will break when moving the user home down in the path hierarchy like CernBox did. For legacy clients the remote.php/webdav endpoint will no longer list the users home directly, but instead present the different types of storage spaces:\n remote.php/webdav/home: the users home is pushed down into a new home storage space remote.php/webdav/shares: all mounted shares will be moved to a new shares storage space remote.php/webdav/spaces: other storage spaces the user has access to, e.g. group or project drives   An alternative would be to introduce a new remote.php/dav/spaces or remote.php/dav/global endpoint. However, remote.php/dav properly follows the WebDAV RFCs strictly. To ensure that all resources under that namespace are scoped to the user the URL would have to include the principal like remote.php/dav/spaces/\u0026lt;username\u0026gt;, a precondition for e.g. WebDAV RFC5397. For a history lesson start at Replace WebDAV with REST owncloud/core#12504 which spawned Add extra layer in DAV to accomodate for other services like versions, trashbin, etc owncloud/core#12543  Sharing    The OCS Share API endpoint /ocs/v1.php/apps/files_sharing/api/v1/shares returns shares, which have their own share id and reference files using a path relative to the users home. They API also lists the numeric storage id as well as the string type storage_id (which is confusing \u0026hellip; but yeah) which would allow constructing combined references with a storage space id and a path relative to the root of that storage space. The web UI however assumes that it can take the path from the file_target and append it to the users home to access it.\nThe API already returns the storage id (and numeric id) in addition to the file id:\n\u0026lt;storage_id\u0026gt;home::auser\u0026lt;/storage_id\u0026gt; \u0026lt;storage\u0026gt;993\u0026lt;/storage\u0026gt; \u0026lt;item_source\u0026gt;3994486\u0026lt;/item_source\u0026gt; \u0026lt;file_source\u0026gt;3994486\u0026lt;/file_source\u0026gt; \u0026lt;file_parent\u0026gt;3994485\u0026lt;/file_parent\u0026gt; \u0026lt;file_target\u0026gt;/Shared/Paris.jpg\u0026lt;/file_target\u0026gt; Creating shares only takes the path as the argument so creating and navigating shares only needs the path. When you update or delete a share it takes the share id not the file id.\n The OCS service makes a stat request to the storage provider to get a ResourceInfo object. It contains both, a ResourceId and an absolute path. If the resource exists a request is sent to the gateway. Depending on the type of share the Collaboration API, the Link API or the Open Cloud Mesh API endpoints are used.\n   API Request Resource identified by Grant type Further arguments     Collaboration CreateShareRequest ResourceInfo ShareGrant -   Link CreatePublicShareRequest ResourceInfo Link Grant We send the public link name in the ArbitraryMetadata of the ResourceInfo   Open Cloud Mesh CreateOCMShareRequest ResourceId OCM ShareGrant OCM ProviderInfo    The user and public share provider implementations identify the file using the ResourceId. The ResourceInfo is passed so the share provider can also store who the owner of the resource is. The path is not part of the other API calls, e.g. when listing shares. The OCM API takes an id based reference on the CS3 api, even if the OCM HTTP endpoint takes a path argument. @jfd: Why? Does it not need the owner? It only stores the owner of the share, which is always the currently looged in user, when creating a share. Afterwards only the owner can update a share \u0026hellip; so collaborative management of shares is not possible. At least for OCM shares.  User and Group provisioning    In oc10 users are identified by a username, which cannot change, because it is used as a foreign key in several tables. For oCIS we are internally identifying users by a UUID, while using the username in the WebDAV and OCS APIs for backwards compatability. To distinguish this in the URLs we are using \u0026lt;username\u0026gt; instead of \u0026lt;userid\u0026gt;. You may have encountered \u0026lt;userlayout\u0026gt;, which refers to a template that can be configured to build several path segments by filling in user properties, e.g. the first character of the username ({{substr 0 1 .Username}}/{{.Username}}), the identity provider ({{.Id.Idp}}/{{.Username}}) or the email ({{.Mail}})\nMake no mistake, the OCS Provisioning API uses userid while it actually is the username, because it is what you use to login.  We are currently working on adding user management through the CS3 API to handle user and group provisioning (and deprovisioning).\n"},{"id":25,"href":"/clients/web/getting-started/","title":"Getting Started","parent":"ownCloud Web","content":"    Installation  Docker Source code   Configuration    Options     Setting up backend and running Running     Installation    Docker    Make sure to have Docker, Docker-Compose, Node.js and Yarn installed.\nThis setup currently doesn\u0026rsquo;t work on Windows out of the box.\n Workaround One of our contributors has opened a PR to a dependency that prevents us from successfully bundling the frontend. Feel free to check out [his changes](https://github.com/egoist/rollup-plugin-postcss/pull/384) and build them locally if you absolutely want to work on Windows.   After cloning the source code, install the dependencies via yarn install and bundle the frontend code by running yarn build:w.\nThen, you can start the backends by running docker-compose up oc10 ocis and access them via https://host.docker.internal:9200 (oCIS) and http://host.docker.internal:8080 (OC10). If you\u0026rsquo;re not using Docker Desktop, you might have to modify your /etc/hosts and add 172.17.0.1 docker.host.internal to make the host.docker.internal links work.\nThe bundled frontend code automatically gets mounted into the Docker containers, recompiles on changes and you can log in using the demo user (admin/admin) and take a look around!\nSource code    The source code is hosted at https://github.com/owncloud/web. Please refer to the build documentation for Web.\nConfiguration    Depending on the backend you are using, there are sample config files provided in the config folder of the ownCloud Web git repository. See below for available backends. Also, find some of the configuration details below.\nOptions     options.hideSearchBar Lets you hide the search bar at the top of the screen for all users. options.homeFolder You can specify a folder that is used when the user navigates home. Navigating home gets triggered by clicking on the All files menu item. The user will not be jailed in that directory. It simply serves as a default location. You can either provide a static location, or you can use variables of the user object to come up with a user specific home path. This uses twig template variable style and allows you to pick a value or a substring of a value of the authenticated user. Examples are /Shares, /{{.Id}} and /{{substr 0 3 .Id}}/{{.Id}. options.disablePreviews Set this option to true to disable previews in all the different file listing views. The only list view that is not affected by this is the trash bin, as that doesn\u0026rsquo;t allow showing previews at all. options.previewFileExtensions Specifies which filetypes will be previewed in the ui. For example to only preview jpg and txt files set this option to [\u0026quot;jpg\u0026quot;, \u0026quot;txt\u0026quot;]. options.disableFeedbackLink Set this option to true to disable the feedback link in the topbar. Keeping it enabled (value false or absence of the option) allows ownCloud to get feedback from your user base through a dedicated survey website. options.sharingRecipientsPerPage Sets the amount of users shown as recipients in the dropdown when sharing resources. Default amount is 200.  Setting up backend and running    Web can run against either ownCloud 10 as backend or oCIS. Depending which one you chose, please check the matching section:\n Setting up with ownCloud as backend Setting up with oCIS as backend  Running     Running with ownCloud as backend Running with oCIS as backend  "},{"id":26,"href":"/ocis/adr/0011-global-url-format/","title":"11. WebUI URL format","parent":"Architecture Decisions","content":" Status: proposed Deciders: @refs, @butonic, @micbar, @dragotin, @hodyroff, @pmaier1, @fschade, @tbsbdr, @kulmann Date: 2021-07-07  Context and Problem Statement    When speaking about URLs we have to make a difference between browser URLs and API URLs. Only browser URLs are visible to end users and will be bookmarked. The currently existing and bookmarked ownCloud 10 URLs look something like this:\nGET https://demo.owncloud.com/apps/files/?dir=/path/to/resource\u0026amp;fileid=5472225 303 Location: https://demo.owncloud.com/apps/files/?dir=/path/to/resource When the URL contains a fileid parameter the server will look up the corresponding dir, overwriting whatever was set before the redirect. The fileid always takes precedence and the server is responsible for the lookup.\nGET https://demo.owncloud.com/apps/files/?dir=/path/to/resource The dir parameter is then used to make a WebDAV request against the /dav/files endpoint of the currently logged in user:\nPROPFIND https://demo.owncloud.com/remote.php/dav/files/demo/path/to/resource The resulting PROPFIND response is used to render the file listing. All good so far.\nFor the new ocis web UI we want to clean up the user visible Browser URLs. They currently look like this:\nhttps://demo.owncloud.com/#/files/list/all/path/to/resource Currently, there is no fileid like parameter in the browser URL, making bookmarks of it fragile (they break when a bookmarked folder is renamed).\nThe oCIS web UI just takes the path and uses the /webdav endpoint of the currently logged in user:\nPROPFIND https://demo.owncloud.com/remote.php/webdav/path/to/resource With the new ownCloud web client (owncloud/web)\nneeds to interpret them to make API calls. With this in mind, this is the current mapping on ownCloud Web with OC10 and OCIS backend:\n    Browser URL API URL     OC10 + classic WebUI https://demo.owncloud.com/apps/files/?dir=/path/to/resource\u0026amp;fileid=5472225 https://demo.owncloud.com/remote.php/dav/files/demo/path/to/resource   OC10 + OCIS WebUI https://web.owncloud.com/index.html#/files/list/all/path%2Fto%2Fresource https://demo.owncloud.com/remote.php/webdav/path/to/resource   OCIS https://demo.owncloud.com/#/files/list/all/path/to/resource https://demo.owncloud.com/remote.php/webdav/path/to/resource    On an OC10 backend the fileid query parameter takes precedence over the dir. In fact if dir is invalid but fileid isn\u0026rsquo;t, the resolution will succeed, as opposed to if the fileid is wrong (doesn\u0026rsquo;t exist) and dir correct, resolution will fail altogether with a 404.\nThis ADR is limited to the scope of \u0026ldquo;how will a web client deal with the browser URL?\u0026rdquo;. The API URLs will change with the spaces concept to https://demo.owncloud.com/dav/spaces/\u0026lt;space_id\u0026gt;/relative/path/to/resource. The Web UI can look up a space id and the mount path using the /graph/v1.0/drives API:\n TODO for a given resource id as part of the URL the https://demo.owncloud.com/v1.0/drive/items/123456A14B0A7750!359?$select=parentReference can be used to retrieve the drive/space:  { \u0026#34;parentReference\u0026#34;: { \u0026#34;driveId\u0026#34;: \u0026#34;123456a14b0a7750\u0026#34;, \u0026#34;driveType\u0026#34;: \u0026#34;personal\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;123456A14B0A7750!357\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/drive/root:\u0026#34; } } TODO to fetch the list of all spaces with their mount points we need an API endpoint that allows clients (not only the web ui) to \u0026lsquo;sync\u0026rsquo; the list of storages a user has access to from the storage registry on the server side. This allows clients to directly talk to a storage provider on another instance, allowing true storage federation. The MS graph api has no notion of mount points, so we will need to add a mountpath (or mountpoint? or alias?) to our drive resource properties in the libreGraph spec. Tracked in https://github.com/owncloud/open-graph-api/issues/6  @jfd: The graph api returns a path in the parentReference, which is part of the root in a drive resource. But it contains a value in the namespace of the graph endpoint, eg.: /drive/root:/Bilder for the /Bilder folder in the root of the currently logged in users personal drive/space. Which is again relative to the drive. To give the clients a way to determine the mount point we need to add a new mountpath/point/alias property.  Decision Drivers     To reveal relevant context to the user URLs should either carry a path component or a meaningful alias To prevent bookmarks from breaking URLs should have an id component that can be used by the system to lookup the resource  Considered Options     Existing ownCloud 10 URLs ID based URLs Path based URLs Space based URLs Mixed Global URLs Configurable path component in URLs  Decision Outcome    Chosen option: \u0026ldquo;[option 1]\u0026rdquo;, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\nPositive Consequences     [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …] …  Negative Consequences     [e.g., compromising quality attribute, follow-up decisions required, …] …  Pros and Cons of the Options    Existing OwnCloud 10 URLs    The existing ownCloud 10 URLs look like this\n   URL comment     https://\u0026lt;host\u0026gt;/apps/files/?dir=\u0026lt;path\u0026gt;\u0026amp;fileid=\u0026lt;fileid\u0026gt; pattern   https://demo.owncloud.com/apps/files/?dir=/\u0026amp;fileid=18 root of the currently logged in user   https://demo.owncloud.com/index.php/apps/files/?dir=/path/to/resource\u0026amp;fileid=192 sub folder /path/to/resource    It contains a path and a fileid (which takes precedence).\n Good, because the fileid prevents bookmarks from breaking Good, because the dir reveals context in the form of a path Bad, because the web UI needs to look up the space alias in a registry to build an API request for the /dav/space endpoint Bad, because URLs still contain a long prefix (/index.php)/apps/files Bad, because the fileid needs to be accompanied by a storageid to allow efficient routing in ocis Bad, because if not configured properly an additional /index.php prefixes the route Bad, because powerusers cannot navigate by updating only the path in the URL, as the fileid takes precedence. They have to delete the fileid to navigate  ID based URLs    MS OneDrive has URLs like this:\n   URL comment     https://\u0026lt;host\u0026gt;/?id=\u0026lt;fileid\u0026gt;(\u0026amp;cid=\u0026lt;cid\u0026gt;) pattern, the cid is optional but added automatically   https://onedrive.live.com/?id=root\u0026amp;cid=A12345A14B0A7750 root of a personal drive   https://onedrive.live.com/?id=A12345A14B0A7750%21359\u0026amp;cid=A12345A14B0A7750 sub folder in a personal drive    It contains only IDs but no folder names. The fileid is a URL encoded \u0026lt;cid\u0026gt;!\u0026lt;numericid\u0026gt;. Very similar to the CS3 resourceid which consists of storageid and nodeid.\n Good, because bookmarks cannot break Good, because URLs do not disclose unshared path segments Bad, because the web UI needs to look up the space id in a registry to build an API request for the /dav/space endpoint Bad, because URLs reveal no context to users  Path based URLs    There is a customized ownCloud instance that uses path only based URLs:\n   URL comment     https://\u0026lt;host\u0026gt;/apps/files/?dir=/\u0026amp; root of the currently logged in user   https://demo.owncloud.com/apps/files/?dir=/\u0026amp; root of the currently logged in user   https://demo.owncloud.com/apps/files/?dir=/path/to/resource\u0026amp; sub folder /path/to/resource     Good, because the URLs reveal the full path context to users Good, because powerusers can navigate by updating the path in the url Bad, because the web UI needs to look up the space id in a registry to build an API request for the /dav/space endpoint Bad, because the bookmarks break when someone renames a folder in the path Bad, because there is no id that can be used as a fallback lookup mechanism Bad, because URLs might leak too much context (parent folders of shared files)  Space based URLs       URL comment     https://\u0026lt;host\u0026gt;/#/s/\u0026lt;space_id\u0026gt;(/\u0026lt;relative/path\u0026gt;)(?id=\u0026lt;resource_id\u0026gt;) the pattern, relative path and resource_id are optional   https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607 root of a storage space, might be the currently logged in users home   https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607/relative/path/to/resource sub folder /relative/path/to/resource in the storage with id b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607, works only if path still exists   https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607/relative/path/to/resource?id=ba4c1820-df12-11eb-8dcd-ff21f12c1264:beb78dd6-df12-11eb-a05c-a395505126f6 sub folder /relative/path/to/resource in the storage with id b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607, lookup can fall back to the id     /# is used by the current vue router. /s denotes that this is a space url. \u0026lt;space_id\u0026gt; and \u0026lt;resource_id\u0026gt; both consist of \u0026lt;storage_id\u0026gt;:\u0026lt;node_id\u0026gt;, but the space_id can be replaced with a shorter id or an alias. See furthor down below. \u0026lt;relative/path\u0026gt; takes precedence over the \u0026lt;resource_id\u0026gt;, both are optional    Good, because the web UI does not need to look up the space id in a registry to build an API request for the /dav/space endpoint Good, because the URLs reveal a relevant path context to users Good, because everything after the # is not sent to the server, building the webdav request to list the folder is offloaded to the clients Good, because powerusers can navigate by updating the path in the url Bad, because the current ids are uuid based, leading to very long URLs where the path component nearly vanishes between two very long strings Bad, because the # in the URL is just a technical requirement Bad, because ocis web requires a /#/files/s at the root of the route to distinguish the files app from other apps Bad, while navigating using the WebUI, the URL has to be updated whenever we change spaces. Bad, because the technical \u0026lt;space_id\u0026gt; is meaningless to end users  With the above explained, let\u0026rsquo;s see some use cases:\nExample 1: UserA shares something from her Home folder with UserB     open the browser and go to demo.owncloud.com the browser\u0026rsquo;s url changes to: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607. You\u0026rsquo;re now in YOUR home folder / personal space. you create a new folder /relative/path/to/resource and navigate into /relative/path/to  the URL now changes to: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607/relative/path/to   You share resource with some else You navigate into /relative/path/to/resource  now the URL would look like: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:3a9305da-df17-11eb-ab99-abe09d93e08a    As you can see, even if you\u0026rsquo;re the owner of /relative/path/to/resource and navigate into it, the URL changes due to a new space being entered. This ensures that while working in your home folder, copying URLs and giving them to the person you share the resource with, the receiver can still navigate within the new space.\nIn short terms, while navigating using the WebUI, the URL has to constantly change whenever we change spaces to reflect the most explicit one.\nExample 2: UserA shares something from a Workspace    Assuming we only have one storage provider; a consequence of this, all storage spaces will start with the same storage_id.\n open the browser and go to demo.owncloud.com the browser\u0026rsquo;s url changes to: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607. You\u0026rsquo;re now in YOUR home folder / personal space. you have access to a workspace called foo (created by an admin) navigate into workspace foo  the URL now changes to: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:d342f9ce-df18-11eb-b319-1b6d9df4bc74. You are now at the root of the workspace foo.  because we only have one storage provider, the space_id section of the URL only updates the node_id part of it. had we had more than one storage provider, the space_id would depend on which storage provider contains the storage space.     you create a folder /relative/path/to/resource you navigate into /relative/path/to/resource  now the URL would look like: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:d342f9ce-df18-11eb-b319-1b6d9df4bc74/relative/path/to/resource or a more robust url: https://demo.owncloud.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:d342f9ce-df18-11eb-b319-1b6d9df4bc74/relative/path/to/resource?id=b78c2044-5b51-446f-82f6-907a664d089c:04f1991c-df19-11eb-9cc7-3b09f04f9ca3    Spaces Registry    A big drawback against this idea is that the length of the URL is increased by a lot, rendering them almost unreadable. Introducing a Spaces Registry (SR) would shorten them. Let\u0026rsquo;s see how.\nA URL without a SR would look like: https://ocis.com/#/s/b78c2044-5b51-446f-82f6-907a664d089c:d342f9ce-df18-11eb-b319-1b6d9df4bc74/TEST?id=b78c2044-5b51-446f-82f6-907a664d089c:04f1991c-df19-11eb-9cc7-3b09f04f9ca3 The same URL with a SR https://ocis.com/#/s/workspaceFoo/TEST?id=b78c2044-5b51-446f-82f6-907a664d089c:04f1991c-df19-11eb-9cc7-3b09f04f9ca3\nSpace Registry resolution can happen at the client side (i.e: the client keeps a list of space name -\u0026gt; space id [where space id = storageid + nodeid]; the client queries a SR) or server side. Server side is more resilient due to clients can have limited networking; for instance if they are running on a tight intranet.\nMixed Global URLs    While ID based space URLs can be made more readable by shortening the IDs they only start to reveal context when an alias is used instead of the space id. These aliases however have to be unique identifiers. These aliases should live in namespaces like /workspaces/marketing and /personal/marketing to make phishing attacks harder (in this case a user that registered with the username marketing). But namespaced aliases is semantically equivalent to \u0026hellip; a path hierarchy.\nWhen every space has a namespaced alias and a relative path we can build a global namespace:\n   URL comment     https://\u0026lt;host\u0026gt;/files\u0026lt;/namespaced/alias\u0026gt;\u0026lt;/relative/path/to/resource\u0026gt;?id=\u0026lt;resource_id\u0026gt; the pattern, /files might become optional   https://demo.owncloud.com/files/personal/einstein/?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21607 root of user einstein   https://demo.owncloud.com/files/personal/einstein/relative/path/to/resource?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21608 sub folder /relative/path/to/resource   https://demo.owncloud.com/files/shares/einstein/somesharename?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21608 shared URL for /relative/path/to/resource   https://demo.owncloud.com/files/personal/einstein/marie is stupid/and richard as well/resource?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21608 sub folder marie is stupid/and richard as well/resource \u0026hellip; something einstein might not want to reveal   https://demo.owncloud.com/files/shares/einstein/resource (2)?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21608 named link URL for /marie is stupid/and richard as well/resource, does not disclose the actual hierarchy, has an appended counter to avaid a collision   https://demo.owncloud.com/files/shares/einstein/mybestfriends?id=b78c2044-5b51-446f-82f6-907a664d089c:194b4a97-597c-4461-ab56-afd4f5a21608 named link URL for /marie is stupid/and richard as well/resource, does not disclose the actual hierarchy, has a custom alias for the share   https://demo.owncloud.com/files/public/kcZVYaXr7oZ66bg/relative/path/to/resource sub folder /relative/path/to/resource in public link with token kcZVYaXr7oZ66bg   https://demo.owncloud.com/files/public/kcZVYaXr7oZ66bg/relative/path/to/resource sub folder /relative/path/to/resource in public link with token kcZVYaXr7oZ66bg   https://demo.owncloud.com/s/kcZVYaXr7oZ66bg/ shortened link to a resource. This is needed to be able to copy a link to a resource whithout leaking any metadata.    \u0026lt;/namespaced/alias\u0026gt;\u0026lt;/relative/path/to/resource\u0026gt; is the global path in the CS3 api. The CS3 Storage Registry is responsible by managing the mount points.\nIn order to be able to copy and paste URLs all resources must be uniquely identifiable:\n Instead of /home the URL always has to reflect the user: /personal/einstein Workspaces can use /workspaces/\u0026lt;alias\u0026gt; or /workspaces/\u0026lt;additional\u0026gt;/\u0026lt;classification\u0026gt;/\u0026lt;alias\u0026gt; where the hierarchy is given by the organization Experiments can use /experiments/\u0026lt;alias\u0026gt; Research institutes could set up /papers/\u0026lt;researchgroup\u0026gt;/\u0026lt;alias\u0026gt; Trash could be accessed by prefixing the namespace alias with /trash? or using /trash/\u0026lt;space_id\u0026gt; Instead of a namespaced alias a storage space id could be used with a generic /space/\u0026lt;space_id\u0026gt; namespace An url shortener can create urls like /s/\u0026lt;token\u0026gt; which could be used as a stable link to a resource. Links for anonymous users will resolve to /public/\u0026lt;token\u0026gt;  The alias namespace hierarchy and depth can be pre determined by the admin. Even if aliases change the id parameter prevents bookmarks from breaking. A user can decide to build a different hierarchy by using his own registry.\nWhat about shares? Similar to /home it must reflect the user: /shares/einstein would list all shares by einstein for the currently logged in user. The ui needs to apply the same URL rewriting as for space based URLs: when navigating into a share the URL has to switch from /personal/einstein/relative/path/to/shared/resource to /shares/einstein/\u0026lt;unique and potentially namespaced alias for shared resource\u0026gt;. When more than one resource was shared a name collision would occur. To prevent this we can use ids /shares/einstein/id/\u0026lt;resource_id or namespaced aliases /shares/einstein/files/alias. Similar to the /trash prefix we could treat /shares as a filter for the shared resources a user has access to, but that would disclose unshared path segments in personal spaces. We could make that a feature and let users create an alias for a shared resource, similar as for public links. Then they can decide if they want to disclose the full path in their personal space (or another workspace) or if they want to use an alias which is then accessed at /shares/einstein/\u0026lt;alias\u0026gt;. As a default we could take the alias at creation time from the filename. That way two shares to a resource with the same name, eg.: /personal/einstein/project AAA/foo and /personal/einstein/project BBB/foo would lead to /shares/einstein/foo (a CS3 internal reference to /personal/einstein/project AAA/foo) and /shares/einstein/foo (2) (a CS3 internal reference to /personal/einstein/project BBB/foo). foo (2) would keep its name even when foo is deleted or renamed. Well an id as the alias might be better then, because users might rename these aliases, which would break URLs if they have been bookmarked. In any case this would make end user more aware of what they share AND it would allow them to choose an arbitrary context for the links they want to send out: personal internal share URLs.\nWith these different namespaces the /files part in the URL becomes obsolete, because the files application can be registered for multiple namespaces: /personal, /workspaces, /shares, /trash \u0026hellip;\n Good, because it contains a global path Good, because spaces with namespaced aliases can by bookmarked and copied into mails or chat without disclosing unshared path segments, as the space is supposed to be shared Good, because the UI can detect broken paths and notify the user to update his bookmark if the resource could be found by id Good, because the /files part might only be required for id only based lookup to let the web ui know which app is responsible for the route Good, because it turns shares into deliberately named spaces in /shares/\u0026lt;owner\u0026gt;/\u0026lt;alias\u0026gt; Good, because all urls can be shortened to hide any metadata like path, resource name and query parameters Bad, because the web UI needs to look up the space alias in a registry to build an API request for the /dav/space endpoint  Configurable path component in URLs    Not every deployment may have the requirement to have the path in the URL. We could use id only based URLs, similar to onedrive and make showing paths configurable.\n   URL comment     https://\u0026lt;host\u0026gt;/files?id=\u0026lt;resource_id\u0026gt; default id based navigation   https://\u0026lt;host\u0026gt;/files\u0026lt;/namespaced/alias\u0026gt;\u0026lt;/relative/path/to/resource\u0026gt;?id=\u0026lt;resource_id\u0026gt; optional path based navigation with fallback to id    In contrast to ownCloud 10 path takes precedence and the user is warned when the fileid in his bookmark no longer matches the id on the server: sth. like \u0026ldquo;The path of the resource has changed, please verify and update your bookmark!\u0026rdquo;\nWhen a file is selected the filename also becomes part of the URL so individual files can be bookmarked.\nIf navigation is id based we need to look up the path for the id so we can make a webdav request, or we need to implement the graph drives and driveItem resources.\nThe URL https://\u0026lt;host\u0026gt;/files?id=\u0026lt;resource_id\u0026gt;̀ is sent to the server. It has to look up the correct path and redirect the request, including the the path. But that would make all bookmarks contain tha path again, even if paths were configured to not be part of the URL.\nThe /meta/\u0026lt;fileid\u0026gt; webdav endpoint can be used to look up the path with property meta-path-for-user.\nFor now, we would use path based navigation with URLs like this:\nhttps://\u0026lt;host\u0026gt;/files\u0026lt;/namespaced/alias\u0026gt;\u0026lt;/relative/path/to/resource\u0026gt;?id=\u0026lt;resource_id\u0026gt; This means that only the resource path is part of the URL path. Any other parameter, eg. file id, page or sort order must be given as URL parameters.\n  To make lookup by id possible we need to implement the /meta/\u0026lt;fileid\u0026gt; endpoint so the sdk can use it to look up the path. We should not implement a redirect on the ocis server side because the same redirect logic would need to be added to oc10. Having it in ocis web is the right place.\n  The old sharing links and oc10 urls still need to be redirected by ocis/reva as in oc10.\n  Public links would have the same format: https://\u0026lt;host\u0026gt;/files?id=\u0026lt;resource_id\u0026gt; The web UI has to detect if the user is logged in or not and adjust the ui accordingly.\nSince there is no difference between public and private files a logged in user cannot see the public version of a link unless he logs out.  "},{"id":27,"href":"/ocis/adr/","title":"Architecture Decisions","parent":"oCIS - ownCloud Infinite Scale","content":"oCIS is documenting architecture decisions using Markdown Architectural Decision Records (MADR), following Documenting Architecture Decisions by Michael Nygard.\n To manage the records we use butonic/adr-tools, a fork of the original npryce/adr-tools, based on a pull request that should have added MADR support. It also supports a YAML header that is used by our Hugo based doc generation\n"},{"id":28,"href":"/ocis/development/getting-started/","title":"Getting Started","parent":"Development","content":"    Requirements Repository structure Starting points  Developing oCIS Developing extensions       Requirements    We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.\nBesides standard development tools like git and a text editor, you need the following software for development:\n Go \u0026gt;= v1.16 (install instructions) Yarn (install instructions) docker (install instructions) docker-compose (install instructions)  If you find tools needed besides the mentioned above, please feel free to open an issue or open a PR.\nRepository structure    oCIS consists of multiple micro services, also called extensions. We started by having standalone repositories for each of them, but quickly noticed that this adds a time consuming overhead for developers. So we ended up with a monorepo housing all the extensions in one repository.\nEach extension lives in a subfolder (eg. accounts or settings) within this respository as an independent Go module, following the golang-standard project-layout. They have common Makefile targets and can be used to change, build and run individual extensions. This allows us to version and release each extension independently.\nThe ocis folder contains our go-micro and suture based runtime. It is used to import all extensions and implements commands to manage them, similar to a small orchestrator. With the resulting oCIS binary you can start single extensions or even all extensions at the same time.\nThe docs folder contains the source for the oCIS documentation.\nThe deployments folder contains documented deployment configurations and templates. On a single node, running a single ocis runtime is a resource efficient way to deploy ocis. For multiple nodes docker compose or helm charts for kubernetes examples can be found here.\nThe scripts folder contains scripts to perform various build, install, analysis, etc operations.\nStarting points    Depending on what you want to develop there are different starting points. These will be described below.\nDeveloping oCIS    If you want to contribute to oCIS:\n see contribution guidelines make sure the tooling is set up by building oCIS and building the docs create or pick an open issue to develop on and mention in the issue that you are working on it open a PR and get things done  Developing extensions    If you want to develop an extension, start here: Extensions\n"},{"id":29,"href":"/extensions/storage/namespaces/","title":"Namespaces","parent":"Storage","content":"A namespace is a set of paths with a common prefix. Depending on the endpoint you are talking to you will encounter a different kind of namespace: In ownCloud 10 all paths are considered relative to the users home. The CS3 API uses a global namespace and the storage providers use a local namespace with paths relative to the storage providers root.\n    /rel/path/to/file.ext     /rel/p...      /    /home   /users/\u0026lt;userlayout\u0026gt;   /public   /shares      /...     storage home     storage home     storageprovider     storageprovider     dataprovider     dataprovider     frontend     frontend     ocdav     ocdav     ocs     ocs     /webdav  /dav/files/\u0026lt;username\u0026gt;    /dav/trash-bin/\u0026lt;username\u0026gt;    /dav/public-files/\u0026lt;token\u0026gt;    /dav/meta/\u0026lt;fileid\u0026gt;/v    /dav/avatars/\u0026lt;username\u0026gt;       /webdav...     /ocs/v1.php/apps/files_sharing/api/v1/shares      /ocs/v1.ph...     gateway     gateway     gateway     gateway     authregistry     authregistry     storageregistry     storageregistry     oc10 namespace  (all paths aere relative to the users home)     oc10 names...     CS3 global namespace     CS3 global...      Viewer does not support full SVG 1.1      The different paths in the namespaces need to be translated while passing references from service to service. While the oc10 endpoints all work on paths we internally reference shared resources by id, so the shares don\u0026rsquo;t break when a file is renamed or moved inside a storage space. The following table lists the various namespaces, paths and id based references:\n   oc10 namespace CS3 global namespace storage provider reference content     /webdav/path/to/file.ext /dav/files/\u0026lt;username\u0026gt;/path/to/file.ext /home/path/to/file.ext home /\u0026lt;userlayout\u0026gt;/path/to/file.ext currently logged in users home   /webdav/Shares/foo /dav/files/\u0026lt;username\u0026gt;/Shares/foo /home/Shares/foo users id based access all users, used to access collaborative shares   /dav/public-files/\u0026lt;token\u0026gt;/rel/path/to/file.ext /public/\u0026lt;token\u0026gt;/rel/path/to/file.ext public id based access publicly shared files, used to access public links    oCIS currently is configured to jail users into the CS3 /home namespace in the oc10 endpoints to mimic ownCloud 10. CernBox has been exposing a global namespace on /webdav for years already. The ocs service returns urls that are relative to the CS3 global namespace which makes both scenarios work, but only one of them at a time. Which is why the testsuite hiccups when trying to Allow full paths targets in reva#1605.  In the global CS3 namespaces we plan to move /home/Shares, which currently lists all mounted shares of the currently logged in user to a dedicated /shares namespace. See below and Move shares folder out from home directory to a separate mount reva#1584.  ownCloud namespaces    In contrast to the global namespace of CS3, ownCloud always presented a user specific namespace on all endpoints. It will always list the users private files under /. Shares can be mounted at an arbitrary location in the users private spaces. See the webdav and ocs sections for more details end examples.\nWith the spaces concept we are planning to introduce a global namespace to the ownCloud webdav endpoints. This will push the users private space down in the hierarchy: it will move from /webdav to /webdav/home or /webdav/users/\u0026lt;username\u0026gt;. The related migration stages are subject to change.\nCS3 global namespaces    The CS3 global namespace in oCIS is configured in the storage space registry. oCIS uses these defaults:\n   global namespace description     /home an alias for the currently logged in uses private space   /users/\u0026lt;userlayout\u0026gt; user private spaces   /shares a virtual listing of share spaces a user has access to   /public/\u0026lt;token\u0026gt; a virtual folder listing public shares   /spaces/\u0026lt;spacename\u0026gt; TODO: project or group spaces    Technically, the /home namespace is not necessary: the storage space registry knows the path to a users private space in the /users namespace and the gateway can forward the requests to the responsible storage provider.\n*@jfd: Why don\u0026rsquo;t we use /home/\u0026lt;userlayout\u0026gt; instead of /users/\u0026lt;userlayout\u0026gt;. Then the paths would be consistent with most unix systems.  The /shares namespace is used to solve two problems:\n To query all shares the current user has access to the share manager can be used to list the resource ids. While the shares can then be navigated by resource id, they will return the relative path in the actual storage provider, leaking parent folders of the shared resource. When accepting a remote share e.g., for OCM the resource does not exist on the local instance. They are made accessible in the global namespace under the /shares namespace.  @jfd: Should we split /shares into /collaborations, /ocm and /links? We also have /public which uses token based authentication. They may have different latencies or polling strategies? Well, I guess we can cache them differently regardless of the mount point.  Browser URLs vs API URLs    In ownCloud 10 you can not only create public links but also private links. Both can be copy pasted into an email or chat to grant others access to a file. Most often though, end users will copy and paste the URL from their browsers location bar.\n   URL description     https://demo.owncloud.com/apps/files/?dir=/Photos/Vacation\u0026amp;fileid=24 The normal browser URL   https://demo.owncloud.com/apps/files/?fileid=24 the dir is actually not used to find the directory and will be filled when pasting this URL   https://demo.owncloud.com/f/24 private links are the shortened version of this and workh in the same way   https://demo.owncloud.com/s/piLdAAt1m3Bg0Fk public link    The dir parameter alone cannot be used to look up the directory, because the path for a file may be different depending on the currently logged in user:\n User A shares his /path/to/Photos with User X. User B shares his /other/path/to/Photos with User X and Y. User A shares his /path/to/Photos with User Y.  (Depending on the order in which they accept the shares) X and Y now have two folders /shares/Photos and /shares/Photos (1). But if they were to copy paste a link with that path in the URL and if the directory were only looked up by path X and Y would end up in different folders.\nYou could argue that the path should always use a global path in the CS3 namespace:\n User A shares his /users/a/path/to/Photos with User X. User B shares his /users/b/other/path/to/Photos with User X and Y. User A shares his /users/a/path/to/Photos with User Y.  By using a global path like this X and Y would always end up in the correct folder. However, there are two caveats:\n This only works for resources that reside on the instance (because only they have unique and global path). Shares from other instances need to be identified by id, or they cannot be uniquely addressed User A may not want to leak path path/to segments leading to Photos. They might contain things like low-priority or personal data.  That is the reason why URLs always have to contain some kind of stable identifier. By introducing the concept of storage spaces and treating user homes, project drives and shares we can create a URL that contains an identifier for the storage space and a path relative to the root of it.\n In ocis we will unify the way links sharing works, however there will always be at least two types of URLs:\n the URL you see in the browsers location bar, and the URL that a client uses to actually access a file.  "},{"id":30,"href":"/ocis/deployment/basic-remote-setup/","title":"Basic Remote Setup","parent":"Deployment","content":"    Start the oCIS fullstack server from binary  Using automatically generated certificates Using already present certificates   Start the oCIS fullstack server with Docker Compose     The default configuration of the oCIS binary and the owncloud/ocis docker image assume, that you access oCIS on localhost. This enables you to do quick testing and development without any configuration.\nIf you need to access oCIS running in a docker container, on a VM or a remote machine via an other hostname than localhost, you need to configure this hostname in oCIS. The same applies if you are not using hostnames but instead an IP (eg. 192.168.178.25).\nStart the oCIS fullstack server from binary    Upon first start of the oCIS fullstack server with ./bin/ocis server it will generate a file identifier-registration.yml in the config folder in your current working directory. This file is used to configure the built-in identity provider and therefore contains the OpenID Connect issuer and also information about relying parties, for example ownCloud Web and our desktop and mobile applications.\nThe identifier-registration.yml file will only be generated if it does not exist yet. If you want to change certain environment variables like OCIS_URL, please delete this file first before doing so. Otherwise your changes will not be applied correctly and you will run into errors.  oCIS is currently in a Tech Preview state and is shipped with demo users. In order to secure your oCIS instances please follow following guide: secure an oCIS instance  For the following examples you need to have the oCIS binary in your current working directory, we assume it is named ocis and it needs to be marked as executable. See Getting Started for where to get the binary from.\nUsing automatically generated certificates    In order to run oCIS with automatically generated and self signed certificates please execute following command. You need to replace your-host with an IP or hostname.\nPROXY_HTTP_ADDR=0.0.0.0:9200 \\ OCIS_URL=https://your-host:9200 \\ ./ocis server Using already present certificates    If you have your own certificates already in place, you may want to make oCIS use them:\nPROXY_HTTP_ADDR=0.0.0.0:9200 \\ OCIS_URL=https://your-host:9200 \\ PROXY_TRANSPORT_TLS_KEY=./certs/your-host.key \\ PROXY_TRANSPORT_TLS_CERT=./certs/your-host.crt \\ ./ocis server For more configuration options check the configuration section in oCIS and the oCIS extensions.\nStart the oCIS fullstack server with Docker Compose    Please have a look at our other deployment examples.\n"},{"id":31,"href":"/extensions/storage/terminology/","title":"Terminology","parent":"Storage","content":"Communication is hard. And clear communication is even harder. You may encounter the following terms throughout the documentation, in the code or when talking to other developers. Just keep in mind that whenever you hear or read storage, that term needs to be clarified, because on its own it is too vague. PR welcome.\nResources    A resource is a logical concept. Resources can be of different types:\n an actual file a container, e.g. a folder or bucket a symlink, or a reference which can point to a resource in another storage provider  References    A reference is a logical concept that identifies a resource. A CS3 reference consists of either\n a path based reference, used to identify a resource in the namespace of a storage provider. It must start with a /. a CS3 id based reference, uniquely identifying a resource in the namespace of a storage provider. It consists of a storage provider id and an opaque id. The storage provider id must NOT start with a /.  The / is important because currently the static storage registry uses a map to look up which storage provider is responsible for the resource. Paths must be prefixed with / so there can be no collisions between paths and storage provider ids in the same map.  Alternative: reference triple    A reference is a logical concept. It identifies a resource and consists of a storage_space, a \u0026lt;root_id\u0026gt; and a \u0026lt;path\u0026gt;\n\u0026lt;storage_space\u0026gt;!\u0026lt;root_id\u0026gt;:\u0026lt;path\u0026gt; While all components are optional, only three cases are used:\n   format example description     !:\u0026lt;absolute_path\u0026gt; !:/absolute/path/to/file.ext absolute path   \u0026lt;storage_space\u0026gt;!:\u0026lt;relative_path\u0026gt; ee1687e5-ac7f-426d-a6c0-03fed91d5f62!:path/to/file.ext path relative to the root of the storage space   \u0026lt;storage_space\u0026gt;!\u0026lt;root\u0026gt;:\u0026lt;relative_path\u0026gt; ee1687e5-ac7f-426d-a6c0-03fed91d5f62!c3cf23bb-8f47-4719-a150-1d25a1f6fb56:to/file.ext path relative to the specified node in the storage space, used to reference resources without disclosing parent paths    \u0026lt;storage_space\u0026gt; should be a UUID to prevent references from breaking when a user or storage space gets renamed. But it can also be derived from a migration of an oc10 instance by concatenating an instance identifier and the numeric storage id from oc10, e.g. oc10-instance-a$1234.\nA reference will often start as an absolute/global path, e.g. !:/home/Projects/Foo. The gateway will look up the storage provider that is responsible for the path\n   Name Description Who resolves it?     !:/home/Projects/Foo the absolute path a client like davfs will use. The gateway uses the storage registry to look up the responsible storage provider   ee1687e5-ac7f-426d-a6c0-03fed91d5f62!:/Projects/Foo the storage_space is the same as the root, the path becomes relative to the root the storage provider can use this reference to identify this resource    Now, the same file is accessed as a share\n   Name Description     !:/users/Einstein/Projects/Foo Foo is the shared folder   ee1687e5-ac7f-426d-a6c0-03fed91d5f62!56f7ceca-e7f8-4530-9a7a-fe4b7ec8089a: 56f7ceca-e7f8-4530-9a7a-fe4b7ec8089a is the id of Foo, the path is empty    The :, ! and $ are chosen from the set of RFC3986 sub delimiters on purpose. They can be used in URLs without having to be encoded. In some cases, a delimiter can be left out if a component is not set:\n   reference interpretation     /absolute/path/to/file.ext absolute path, all delimiters omitted   ee1687e5-ac7f-426d-a6c0-03fed91d5f62!path/to/file.ext relative path in the given storage space, root delimiter : omitted   56f7ceca-e7f8-4530-9a7a-fe4b7ec8089a:to/file.ext relative path in the given root node, storage space delimiter ! omitted   ee1687e5-ac7f-426d-a6c0-03fed91d5f62!56f7ceca-e7f8-4530-9a7a-fe4b7ec8089a: node id in the given storage space, : must be present   ee1687e5-ac7f-426d-a6c0-03fed91d5f62 root of the storage space, all delimiters omitted, can be distinguished by the /     Storage Drivers    A storage driver implements access to a storage system:\nIt maps the path and id based CS3 references to an appropriate storage system specific reference, e.g.:\n eos file ids posix inodes or paths deconstructed filesystem nodes  Proposed Change iOS clients can only queue single requests to be executed in the background. The queue an upload and need to be able to identify the uploaded file after it has been uploaded to the server. The disconnected nature of the connection might cause worksflows or manual user interaction with the file on the server to move the file to a different place or changing the content while the device is offline. However, on the device users might have marked the file as favorite or added it to other iOS specific collections. To be able to reliably identify the file the client can generate a uuid and attach it to the file metadata during the upload. While it is not necessary to look up files by this uuid having a second file id that serves exactly the same purpose as the file id is redundant.\nAnother aspect for the file id / uuid is that it must be a logical identifier that can be set, at least by internal systems. Without a writeable fileid we cannot restore backups or migrate storage spaces from one storage provider to another storage provider.\nTechnically, this means that every storage driler needs to have a map of a uuid to in internal resource identifier. This internal resource identifier can be\n an eos fileid, because eos can look up files by id an inode if the filesystem and the storage driver support lookung up by inode a path if the storage driver has no way of looking up files by id.  In this case other mechanisms like inotify, kernel audit or a fuse overlay might be used to keep the paths up to date. to prevent excessive writes when deep folders are renamed a reverse map might be used: it will map the uuid to \u0026lt;parentuuid\u0026gt;:\u0026lt;childname\u0026gt;, allowing to trade writes for reads     Storage Providers    A storage provider manages resources identified by a reference by accessing a storage system with a storage driver.\n    CS3  storage provider  API (GRPC)       CS3...     storage provider     storage provider     /      /      Viewer does not support full SVG 1.1      Proposed Change A storage provider manages multiple storage spaces by accessing a storage system with a storage driver.\n    CS3  storage provider  API (GRPC)       CS3...     storage provider     storage provider      Viewer does not support full SVG 1.1      By making storage providers aware of storage spaces we can get rid of the current enablehome flag / hack in reva, which lead to the spawn of *home drivers. Furthermore, provisioning a new storage space becomes a generic operation, regardless of the need of provisioning a new user home or a new project space.\n Storage Space Registries    A storage registry manages the CS3 global namespace: It is used by the gateway to look up address and port of the storage provider that should handle a reference.\n    The storage registry currently maps paths and storageids to the  address:port  of the corresponding storage provider     The storage registry currently maps...     storage registry     storage registry     storage providers     storage providers     The gateway uses the storage registry to look up the storage provider that is responsible for path and id based references in incoming requests.     The gateway uses the storage regist...     gateway     gateway     /      /     /      /      Viewer does not support full SVG 1.1      Proposed Change A storage space registry manages the namespace for a user: It is used by the gateway to look up address and port of the storage provider that is currently serving a storage space.\n    The storage registry currently maps paths and storageids to the  address:port  of the corresponding storage provider     The storage registry currently maps...     storage registry     storage registry     storage providers     storage providers     The gateway uses the storage registry to look up the storage provider that is responsible for path and id based references in incoming requests.     The gateway uses the storage regist...     gateway     gateway      Viewer does not support full SVG 1.1      By making storage registries aware of storage spaces we can query them for a listing of all storage spaces a user has access to. Including his home, received shares, project folders or group drives. See a WIP PR for spaces in the oCIS repo (#1827) for more info.\n Storage Spaces    A storage space is a logical concept: It is a tree of resourcesresources with a single owner (user or group), a quota and permissions, identified by a storage space id.\n    the root resource of the storage space     the root resource of...     RESOURCE_TYPE_CONTAINER     RESOURCE_TYPE_CONTAINER     RESOURCE_TYPE_FILE     RESOURCE_TYPE_FILE     if the gateway encounters a resource type reference it will look it up and replace the reference with the results of the actual node (which can live in another storage provider)     if the gateway encounters a...     every resource can be referenced by path or by id     every resource can be...     RESOURCE_TYPE_SYMLINK     RESOURCE_TYPE_SYMLINK     RESOURCE_TYPE_REFERENCE     RESOURCE_TYPE_REFERENCE      Viewer does not support full SVG 1.1      Examples would be every user\u0026rsquo;s home storage space, project storage spaces or group storage spaces. While they all serve different purposes and may or may not have workflows like anti virus scanning enabled, we need a way to identify and manage these subtrees in a generic way. By creating a dedicated concept for them this becomes easier and literally makes the codebase cleaner. A storage space registry then allows listing the capabilities of storage spaces, e.g. free space, quota, owner, syncable, root etag, upload workflow steps, \u0026hellip;\nFinally, a logical storage space id is not tied to a specific storage provider. If the storage driver supports it, we can import existing files including their file id, which makes it possible to move storage spaces between storage providers to implement storage classes, e.g. with or without archival, workflows, on SSDs or HDDs.\nShares    To be clarified: we are aware that storage spaces may be too \u0026lsquo;heavywheight\u0026rsquo; for ad hoc sharing with groups. That being said, there is no technical reason why group shares should not be treated like storage spaces that users can provision themselves. They would share the quota with the users home storage space and the share initiator would be the sole owner. Technically, the mechanism of treating a share like a new storage space would be the same. This obviously also extends to user shares and even file indvidual shares that would be wrapped in a virtual collection. It would also become possible to share collections of arbitrary files in a single storage space, e.g. the ten best pictures from a large album.\nStorage Systems    Every storage system has different native capabilities like id and path based lookups, recursive change time propagation, permissions, trash, versions, archival and more. A storage provider makes the storage system available in the CS3 API by wrapping the capabilities as good as possible using a storage driver. There migt be multiple storage drivers for a storage system, implementing different tradeoffs to match varying requirements.\nGateways    A gateway acts as a facade to the storage related services. It authenticates and forwards API calls that are publicly accessible.\nProposed Change Currently, the gateway treats /home/shares different than any other path: it will stat all children and calculate an etag to allow clients to discover changes in accepted shares. This requires the storage provider to cooperate and provide this special /shares folder in the root of a users home when it is accessed as a home storage, which is a config flag that needs to be set for every storage driver.\nThe enable_home flag will cause drivers to jail path based requests into a \u0026lt;userlayout\u0026gt; subfolder. In effect it divides a storage provider into multiple storage spaces: when calling CreateHome a subfolder following the \u0026lt;userlayout\u0026gt; is created and market as the root of a users home. Both, the eos and ocis storage drivers use extended attributes to mark the folder as the end of the size aggregation and tree mtime propagation mechanism. Even setting the quota is possible like that. All this literally is a storage space.\nWe can implement ListStorageSpaces by either\n iterating over the root of the storage and treating every folder following the \u0026lt;userlayout\u0026gt; as a home storage space, iterating over the root of the storage and treating every folder following a new \u0026lt;projectlayout\u0026gt; as a project storage space, or iterating over the root of the storage and treating every folder following a generic \u0026lt;layout\u0026gt; as a storage space for a configurable space type, or we allow configuring a map of space type to layout (based on the CreateStorageSpaceRequest) which would allow things like  home=/var/lib/ocis/storage/home/{{substr 0 1 .Owner.Username}}/{{.Owner.Username}} spaces=/spaces/var/lib/ocis/storage/projects/{{.Name}} This would make the GetHome() call return the path to the storage provider including the relative path to the storage space. No need for a storage provider mounted at /home. This is just a UI alias for /users/\u0026lt;userlayout\u0026gt;. Just like a normal /home/\u0026lt;username\u0026gt; on a linux machine.\nBut if we have no /home where do we find the shares, and how can clients discover changes in accepted shares?\nThe /shares namespace should be provided by a storage provider that lists all accepted shares for the current user\u0026hellip; but what about copy pasting links from the browser? Well this storage is only really needed to have a path to ocm shares that actually reside on other instances. In the UI the shares would be listed by querying a share manager. It returns ResourceIds, which can be stated to fetch a path that is then accessible in the CS3 global namespace. Two caveats:\n This only works for resources that are actually hosted by the current instance. For those it would leak the parent path segments to a shared resource. For accepted OCM shares there must be a path in the CS3 global namespace that has to be the same for all users, otherwise they cannot copy and share those URLs.   "},{"id":32,"href":"/extensions/storage/configuration/","title":"Configuration","parent":"Storage","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  storage auth-basic storage gateway storage health storage storage storage users storage groups storage storage-home storage storage-public-link storage auth-bearer storage frontend storage sharing storage storage-users storage storage-metadata   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver ownCloudSQL Driver Ocis Driver S3ng Driver       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    Storage service for oCIS\nUsage: storage [global options] command [command options] [arguments...]\n -config-file | $STORAGE_CONFIG_FILE Path to config file. -log-level | $STORAGE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORAGE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORAGE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands    storage auth-basic    Start authprovider for basic auth\nUsage: storage auth-basic [command options] [arguments...]\n -debug-addr | $STORAGE_AUTH_BASIC_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9147\u0026quot;. -auth-driver | $STORAGE_AUTH_DRIVER auth driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo; or \u0026lsquo;ldap\u0026rsquo;. Default: \u0026quot;ldap\u0026quot;. -auth-json | $STORAGE_AUTH_JSON Path to users.json file. Default: \u0026quot;\u0026quot;. -network | $STORAGE_AUTH_BASIC_GRPC_NETWORK Network to use for the storage auth-basic service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_AUTH_BASIC_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9146\u0026quot;. -service | $STORAGE_AUTH_BASIC_SERVICES \u0026ndash;service authprovider [\u0026ndash;service otherservice]. Default: cli.NewStringSlice(\u0026quot;authprovider\u0026quot;). -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;.  storage gateway    Start gateway\nUsage: storage gateway [command options] [arguments...]\n -debug-addr | $STORAGE_GATEWAY_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9143\u0026quot;. -transfer-secret | $STORAGE_TRANSFER_SECRET Transfer secret for datagateway. Default: \u0026quot;replace-me-with-a-transfer-secret\u0026quot;. -transfer-expires | $STORAGE_TRANSFER_EXPIRES Transfer token ttl in seconds. Default: 24 * 60 * 60. -network | $STORAGE_GATEWAY_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_GATEWAY_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9142\u0026quot;. -endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage service. Default: \u0026quot;localhost:9142\u0026quot;. -service | $STORAGE_GATEWAY_SERVICES \u0026ndash;service gateway [\u0026ndash;service authregistry]. Default: cli.NewStringSlice(\u0026quot;gateway\u0026quot;, \u0026quot;authregistry\u0026quot;, \u0026quot;storageregistry\u0026quot;). -commit-share-to-storage-grant | $STORAGE_GATEWAY_COMMIT_SHARE_TO_STORAGE_GRANT Commit shares to the share manager. Default: true. -commit-share-to-storage-ref | $STORAGE_GATEWAY_COMMIT_SHARE_TO_STORAGE_REF Commit shares to the storage. Default: true. -share-folder | $STORAGE_GATEWAY_SHARE_FOLDER mount shares in this folder of the home storage provider. Default: \u0026quot;Shares\u0026quot;. -disable-home-creation-on-login | $STORAGE_GATEWAY_DISABLE_HOME_CREATION_ON_LOGIN Disable creation of home folder on login. -storage-home-mapping | $STORAGE_GATEWAY_HOME_MAPPING mapping template for user home paths to user-specific mount points, e.g. /home/{{substr 0 1 .Username}}. Default: \u0026quot;\u0026quot;. -etag-cache-ttl | $STORAGE_GATEWAY_ETAG_CACHE_TTL TTL for the home and shares directory etags cache. Default: 0. -auth-basic-endpoint | $STORAGE_AUTH_BASIC_ENDPOINT endpoint to use for the basic auth provider. Default: \u0026quot;localhost:9146\u0026quot;. -auth-bearer-endpoint | $STORAGE_AUTH_BEARER_ENDPOINT endpoint to use for the bearer auth provider. Default: \u0026quot;localhost:9148\u0026quot;. -storage-registry-driver | $STORAGE_STORAGE_REGISTRY_DRIVER driver of the storage registry. Default: \u0026quot;static\u0026quot;. -storage-registry-rule | $STORAGE_STORAGE_REGISTRY_RULES Replaces the generated storage registry rules with this set: --storage-registry-rule \u0026quot;/eos=localhost:9158\u0026quot; [--storage-registry-rule \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009162=localhost:9162\u0026quot;]. Default: cli.NewStringSlice(). -storage-home-provider | $STORAGE_STORAGE_REGISTRY_HOME_PROVIDER mount point of the storage provider for user homes in the global namespace. Default: \u0026quot;/home\u0026quot;. -storage-registry-json | $STORAGE_STORAGE_REGISTRY_JSON JSON file containing the storage registry rules. Default: \u0026quot;\u0026quot;. -public-url | $STORAGE_FRONTEND_PUBLIC_URL , $OCIS_URL URL to use for the storage service. Default: \u0026quot;https://localhost:9200\u0026quot;. -datagateway-url | $STORAGE_DATAGATEWAY_PUBLIC_URL URL to use for the storage datagateway, defaults to \u0026lt;STORAGE_FRONTEND_PUBLIC_URL\u0026gt;/data. Default: \u0026quot;\u0026quot;. -userprovider-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the userprovider. Default: \u0026quot;localhost:9144\u0026quot;. -groupprovider-endpoint | $STORAGE_GROUPPROVIDER_ENDPOINT endpoint to use for the groupprovider. Default: \u0026quot;localhost:9160\u0026quot;. -sharing-endpoint | $STORAGE_SHARING_ENDPOINT endpoint to use for the storage service. Default: \u0026quot;localhost:9150\u0026quot;. -storage-home-endpoint | $STORAGE_HOME_ENDPOINT endpoint to use for the home storage. Default: \u0026quot;localhost:9154\u0026quot;. -storage-home-mount-path | $STORAGE_HOME_MOUNT_PATH mount path. Default: \u0026quot;/home\u0026quot;. -storage-home-mount-id | $STORAGE_HOME_MOUNT_ID mount id. Default: \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009154\u0026quot;. -storage-users-endpoint | $STORAGE_USERS_ENDPOINT endpoint to use for the users storage. Default: \u0026quot;localhost:9157\u0026quot;. -storage-users-mount-path | $STORAGE_USERS_MOUNT_PATH mount path. Default: \u0026quot;/users\u0026quot;. -storage-users-mount-id | $STORAGE_USERS_MOUNT_ID mount id. Default: \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;. -public-link-endpoint | $STORAGE_PUBLIC_LINK_ENDPOINT endpoint to use for the public links service. Default: \u0026quot;localhost:9178\u0026quot;. -storage-public-link-mount-path | $STORAGE_PUBLIC_LINK_MOUNT_PATH mount path. Default: \u0026quot;/public\u0026quot;.  storage health    Check health status\nUsage: storage health [command options] [arguments...]\n -debug-addr | $STORAGE_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9109\u0026quot;.  storage storage    Storage service for oCIS\nUsage: storage storage [command options] [arguments...]\n -config-file | $STORAGE_CONFIG_FILE Path to config file. -log-level | $STORAGE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORAGE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORAGE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  storage users    Start users service\nUsage: storage users [command options] [arguments...]\n -debug-addr | $STORAGE_SHARING_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9145\u0026quot;. -network | $STORAGE_USERPROVIDER_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_USERPROVIDER_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9144\u0026quot;. -endpoint | $STORAGE_USERPROVIDER_ENDPOINT URL to use for the storage service. Default: \u0026quot;localhost:9144\u0026quot;. -service | $STORAGE_USERPROVIDER_SERVICES \u0026ndash;service userprovider [\u0026ndash;service otherservice]. Default: cli.NewStringSlice(\u0026quot;userprovider\u0026quot;). -driver | $STORAGE_USERPROVIDER_DRIVER user driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo;, \u0026lsquo;ldap\u0026rsquo;, or \u0026lsquo;rest\u0026rsquo;. Default: \u0026quot;ldap\u0026quot;. -json-config | $STORAGE_USERPROVIDER_JSON Path to users.json file. Default: \u0026quot;\u0026quot;. -user-groups-cache-expiration | $STORAGE_USER_CACHE_EXPIRATION Time in minutes for redis cache expiration.. Default: 5.  storage groups    Start groups service\nUsage: storage groups [command options] [arguments...]\n -debug-addr | $STORAGE_GROUPPROVIDER_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9161\u0026quot;. -network | $STORAGE_GROUPPROVIDER_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_GROUPPROVIDER_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9160\u0026quot;. -endpoint | $STORAGE_GROUPPROVIDER_ENDPOINT URL to use for the storage service. Default: \u0026quot;localhost:9160\u0026quot;. -service | $STORAGE_GROUPPROVIDER_SERVICES \u0026ndash;service groupprovider [\u0026ndash;service otherservice]. Default: cli.NewStringSlice(\u0026quot;groupprovider\u0026quot;). -driver | $STORAGE_GROUPPROVIDER_DRIVER group driver: \u0026lsquo;json\u0026rsquo;, \u0026lsquo;ldap\u0026rsquo;, or \u0026lsquo;rest\u0026rsquo;. Default: \u0026quot;ldap\u0026quot;. -json-config | $STORAGE_GROUPPROVIDER_JSON Path to groups.json file. Default: \u0026quot;\u0026quot;. -group-members-cache-expiration | $STORAGE_GROUP_CACHE_EXPIRATION Time in minutes for redis cache expiration.. Default: 5.  storage storage-home    Start storage-home service\nUsage: storage storage-home [command options] [arguments...]\n -debug-addr | $STORAGE_HOME_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9156\u0026quot;. -grpc-network | $STORAGE_HOME_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -grpc-addr | $STORAGE_HOME_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9154\u0026quot;. -http-network | $STORAGE_HOME_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -http-addr | $STORAGE_HOME_HTTP_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9155\u0026quot;. -driver | $STORAGE_HOME_DRIVER storage driver for home mount: eg. local, eos, owncloud, ocis or s3. Default: \u0026quot;ocis\u0026quot;. -read-only | $STORAGE_HOME_READ_ONLY , $OCIS_STORAGE_READ_ONLY use storage driver in read-only mode. Default: false. -mount-path | $STORAGE_HOME_MOUNT_PATH mount path. Default: \u0026quot;/home\u0026quot;. -mount-id | $STORAGE_HOME_MOUNT_ID mount id. Default: \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;. -expose-data-server | $STORAGE_HOME_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: false. -data-server-url | $STORAGE_HOME_DATA_SERVER_URL data server url. Default: \u0026quot;http://localhost:9155/data\u0026quot;. -http-prefix | $STORAGE_HOME_HTTP_PREFIX prefix for the http endpoint, without leading slash. Default: \u0026quot;data\u0026quot;. -tmp-folder | $STORAGE_HOME_TMP_FOLDER path to tmp folder. Default: \u0026quot;/var/tmp/ocis/tmp/home\u0026quot;. -enable-home | $STORAGE_HOME_ENABLE_HOME enable the creation of home directories. Default: true. -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;. -users-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the storage service. Default: \u0026quot;localhost:9144\u0026quot;.  storage storage-public-link    Start storage-public-link service\nUsage: storage storage-public-link [command options] [arguments...]\n -debug-addr | $STORAGE_PUBLIC_LINK_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9179\u0026quot;. -network | $STORAGE_PUBLIC_LINK_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_PUBLIC_LINK_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9178\u0026quot;. -mount-path | $STORAGE_PUBLIC_LINK_MOUNT_PATH mount path. Default: \u0026quot;/public\u0026quot;. -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;.  storage auth-bearer    Start authprovider for bearer auth\nUsage: storage auth-bearer [command options] [arguments...]\n -debug-addr | $STORAGE_AUTH_BEARER_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9149\u0026quot;. -oidc-issuer | $STORAGE_OIDC_ISSUER , $OCIS_URL OIDC issuer. Default: \u0026quot;https://localhost:9200\u0026quot;. -oidc-insecure | $STORAGE_OIDC_INSECURE OIDC allow insecure communication. Default: true. -oidc-id-claim | $STORAGE_OIDC_ID_CLAIM OIDC id claim. Default: \u0026quot;preferred_username\u0026quot;. -oidc-uid-claim | $STORAGE_OIDC_UID_CLAIM OIDC uid claim. Default: \u0026quot;\u0026quot;. -oidc-gid-claim | $STORAGE_OIDC_GID_CLAIM OIDC gid claim. Default: \u0026quot;\u0026quot;. -network | $STORAGE_AUTH_BEARER_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_AUTH_BEARER_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9148\u0026quot;. -service | $STORAGE_AUTH_BEARER_SERVICES \u0026ndash;service authprovider [\u0026ndash;service otherservice]. Default: cli.NewStringSlice(\u0026quot;authprovider\u0026quot;). -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;.  storage frontend    Start frontend service\nUsage: storage frontend [command options] [arguments...]\n -debug-addr | $STORAGE_FRONTEND_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9141\u0026quot;. -transfer-secret | $STORAGE_TRANSFER_SECRET Transfer secret for datagateway. Default: \u0026quot;replace-me-with-a-transfer-secret\u0026quot;. -webdav-namespace | $STORAGE_WEBDAV_NAMESPACE Namespace prefix for the /webdav endpoint. Default: \u0026quot;/home/\u0026quot;. -dav-files-namespace | $STORAGE_DAV_FILES_NAMESPACE Namespace prefix for the webdav /dav/files endpoint. Default: \u0026quot;/users/\u0026quot;. -network | $STORAGE_FRONTEND_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_FRONTEND_HTTP_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9140\u0026quot;. -public-url | $STORAGE_FRONTEND_PUBLIC_URL , $OCIS_URL URL to use for the storage service. Default: \u0026quot;https://localhost:9200\u0026quot;. -service | $STORAGE_FRONTEND_SERVICES \u0026ndash;service ocdav [\u0026ndash;service ocs]. Default: cli.NewStringSlice(\u0026quot;datagateway\u0026quot;, \u0026quot;ocdav\u0026quot;, \u0026quot;ocs\u0026quot;). -datagateway-prefix | $STORAGE_FRONTEND_DATAGATEWAY_PREFIX datagateway prefix. Default: \u0026quot;data\u0026quot;. -ocdav-prefix | $STORAGE_FRONTEND_OCDAV_PREFIX owncloud webdav endpoint prefix. Default: \u0026quot;\u0026quot;. -ocs-prefix | $STORAGE_FRONTEND_OCS_PREFIX open collaboration services endpoint prefix. Default: \u0026quot;ocs\u0026quot;. -ocs-share-prefix | $STORAGE_FRONTEND_OCS_SHARE_PREFIX the prefix prepended to the path of shared files. Default: \u0026quot;/Shares\u0026quot;. -ocs-home-namespace | $STORAGE_FRONTEND_OCS_HOME_NAMESPACE the prefix prepended to the incoming requests in OCS. Default: \u0026quot;/home\u0026quot;. -ocs-resource-info-cache-ttl | $STORAGE_FRONTEND_OCS_RESOURCE_INFO_CACHE_TTL the TTL for statted resources in the share cache. Default: 0. -ocs-cache-warmup-driver | $STORAGE_FRONTEND_OCS_CACHE_WARMUP_DRIVER the driver to be used for warming up the share cache. Default: \u0026quot;\u0026quot;. -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;. -default-upload-protocol | $STORAGE_FRONTEND_DEFAULT_UPLOAD_PROTOCOL Default upload chunking protocol to be used out of tus/v1/ng. Default: \u0026quot;tus\u0026quot;. -upload-max-chunk-size | $STORAGE_FRONTEND_UPLOAD_MAX_CHUNK_SIZE Max chunk size in bytes to advertise to clients through capabilities, or 0 for unlimited. Default: 0. -upload-http-method-override | $STORAGE_FRONTEND_UPLOAD_HTTP_METHOD_OVERRIDE Specify an HTTP method (ex: POST) that clients should to use when uploading instead of PATCH. Default: \u0026quot;\u0026quot;. -checksum-suppored-type | $STORAGE_FRONTEND_CHECKSUM_SUPPORTED_TYPES \u0026ndash;checksum-suppored-type sha1 [\u0026ndash;checksum-suppored-type adler32]. Default: cli.NewStringSlice(\u0026quot;sha1\u0026quot;, \u0026quot;md5\u0026quot;, \u0026quot;adler32\u0026quot;). -checksum-preferred-upload-type | $STORAGE_FRONTEND_CHECKSUM_PREFERRED_UPLOAD_TYPE Specify the preferred checksum algorithm used for uploads. Default: \u0026quot;\u0026quot;. -user-agent-whitelist-lock-in | $STORAGE_FRONTEND_MIDDLEWARE_AUTH_CREDENTIALS_BY_USER_AGENT \u0026ndash;user-agent-whitelist-lock-in=mirall:basic,foo:bearer Given a tuple of comma separated [UserAgent:challenge] values, it locks a given user agent to the authentication challenge. Particularly useful for old clients whose USer-Agent is known and only support one authentication challenge. When this flag is set in the storage-frontend it configures Reva..  storage sharing    Start sharing service\nUsage: storage sharing [command options] [arguments...]\n -debug-addr | $STORAGE_SHARING_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9151\u0026quot;. -network | $STORAGE_SHARING_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -addr | $STORAGE_SHARING_GRPC_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9150\u0026quot;. -service | $STORAGE_SHARING_SERVICES \u0026ndash;service usershareprovider [\u0026ndash;service publicshareprovider]. Default: cli.NewStringSlice(\u0026quot;usershareprovider\u0026quot;, \u0026quot;publicshareprovider\u0026quot;). -user-driver | $STORAGE_SHARING_USER_DRIVER driver to use for the UserShareProvider. Default: \u0026quot;json\u0026quot;. -user-json-file | $STORAGE_SHARING_USER_JSON_FILE file used to persist shares for the UserShareProvider. Default: \u0026quot;/var/tmp/ocis/storage/shares.json\u0026quot;. -public-driver | $STORAGE_SHARING_PUBLIC_DRIVER driver to use for the PublicShareProvider. Default: \u0026quot;json\u0026quot;. -public-json-file | $STORAGE_SHARING_PUBLIC_JSON_FILE file used to persist shares for the PublicShareProvider. Default: \u0026quot;/var/tmp/ocis/storage/publicshares.json\u0026quot;. -public-password-hash-cost | $STORAGE_SHARING_PUBLIC_PASSWORD_HASH_COST the cost of hashing the public shares passwords. Default: 11. -public-enable-expired-shares-cleanup | $STORAGE_SHARING_PUBLIC_ENABLE_EXPIRED_SHARES_CLEANUP whether to periodically delete expired public shares. Default: true. -public-janitor-run-interval | $STORAGE_SHARING_PUBLIC_JANITOR_RUN_INTERVAL the time period in seconds after which to start a janitor run. Default: 60.  storage storage-users    Start storage-users service\nUsage: storage storage-users [command options] [arguments...]\n -debug-addr | $STORAGE_USERS_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9159\u0026quot;. -grpc-network | $STORAGE_USERS_GRPC_NETWORK Network to use for the users storage, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -grpc-addr | $STORAGE_USERS_GRPC_ADDR GRPC Address to bind users storage. Default: \u0026quot;0.0.0.0:9157\u0026quot;. -http-network | $STORAGE_USERS_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -http-addr | $STORAGE_USERS_HTTP_ADDR HTTP Address to bind users storage. Default: \u0026quot;0.0.0.0:9158\u0026quot;. -driver | $STORAGE_USERS_DRIVER storage driver for users mount: eg. local, eos, owncloud, ocis or s3. Default: \u0026quot;ocis\u0026quot;. -read-only | $STORAGE_USERS_READ_ONLY , $OCIS_STORAGE_READ_ONLY use storage driver in read-only mode. Default: false. -mount-path | $STORAGE_USERS_MOUNT_PATH mount path. Default: \u0026quot;/users\u0026quot;. -mount-id | $STORAGE_USERS_MOUNT_ID mount id. Default: \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;. -expose-data-server | $STORAGE_USERS_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: false. -data-server-url | $STORAGE_USERS_DATA_SERVER_URL data server url. Default: \u0026quot;http://localhost:9158/data\u0026quot;. -http-prefix | $STORAGE_USERS_HTTP_PREFIX prefix for the http endpoint, without leading slash. Default: \u0026quot;data\u0026quot;. -tmp-folder | $STORAGE_USERS_TMP_FOLDER path to tmp folder. Default: \u0026quot;/var/tmp/ocis/tmp/users\u0026quot;. -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;. -users-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the storage service. Default: \u0026quot;localhost:9144\u0026quot;.  storage storage-metadata    Start storage-metadata service\nUsage: storage storage-metadata [command options] [arguments...]\n -config-file | $STORAGE_CONFIG_FILE Path to config file. -log-level | $STORAGE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORAGE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORAGE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -debug-addr | $STORAGE_METADATA_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9217\u0026quot;. -grpc-network | $STORAGE_METADATA_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -grpc-addr | $STORAGE_METADATA_GRPC_PROVIDER_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9215\u0026quot;. -data-server-url | $STORAGE_METADATA_DATA_SERVER_URL URL of the data-provider the storage-provider uses. Default: \u0026quot;http://localhost:9216\u0026quot;. -http-network | $STORAGE_METADATA_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: \u0026quot;tcp\u0026quot;. -http-addr | $STORAGE_METADATA_HTTP_ADDR Address to bind storage service. Default: \u0026quot;0.0.0.0:9216\u0026quot;. -tmp-folder | $STORAGE_METADATA_TMP_FOLDER path to tmp folder. Default: \u0026quot;/var/tmp/ocis/tmp/metadata\u0026quot;. -driver | $STORAGE_METADATA_DRIVER storage driver for metadata mount: eg. local, eos, owncloud, ocis or s3. Default: \u0026quot;ocis\u0026quot;. -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the gateway service. Default: \u0026quot;localhost:9142\u0026quot;. -userprovider-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the userprovider service. Default: \u0026quot;localhost:9144\u0026quot;. -storage-root | $STORAGE_METADATA_ROOT the path to the metadata storage root. Default: \u0026quot;/var/tmp/ocis/storage/metadata\u0026quot;.  Config for the different Storage Drivers    You can set different storage drivers for the Storage Providers. Please check the storage provider configuration.\nExample: Set the home and users Storage Provider to ocis\nSTORAGE_HOME_DRIVER=ocis STORAGE_USERS_DRIVER=ocis\nLocal Driver     -storage-local-root | $STORAGE_DRIVER_LOCAL_ROOT the path to the local storage root. Default: \u0026quot;/var/tmp/ocis/storage/local\u0026quot;.  Eos Driver     -storage-eos-namespace | $STORAGE_DRIVER_EOS_NAMESPACE Namespace for metadata operations. Default: \u0026quot;/eos/dockertest/reva\u0026quot;. -storage-eos-shadow-namespace | $STORAGE_DRIVER_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. -storage-eos-share-folder | $STORAGE_DRIVER_EOS_SHARE_FOLDER name of the share folder. Default: \u0026quot;/Shares\u0026quot;. -storage-eos-binary | $STORAGE_DRIVER_EOS_BINARY Location of the eos binary. Default: \u0026quot;/usr/bin/eos\u0026quot;. -storage-eos-xrdcopy-binary | $STORAGE_DRIVER_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: \u0026quot;/usr/bin/xrdcopy\u0026quot;. -storage-eos-master-url | $STORAGE_DRIVER_EOS_MASTER_URL URL of the Master EOS MGM. Default: \u0026quot;root://eos-mgm1.eoscluster.cern.ch:1094\u0026quot;. -storage-eos-slave-url | $STORAGE_DRIVER_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: \u0026quot;root://eos-mgm1.eoscluster.cern.ch:1094\u0026quot;. -storage-eos-cache-directory | $STORAGE_DRIVER_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.CacheDirectory, os.TempDir()). -storage-eos-enable-logging | $STORAGE_DRIVER_EOS_ENABLE_LOGGING Enables logging of the commands executed. -storage-eos-show-hidden-sysfiles | $STORAGE_DRIVER_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. -storage-eos-force-singleuser-mode | $STORAGE_DRIVER_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. -storage-eos-use-keytab | $STORAGE_DRIVER_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. -storage-eos-enable-home | $STORAGE_DRIVER_EOS_ENABLE_HOME enable the creation of home directories. -storage-eos-sec-protocol | $STORAGE_DRIVER_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. -storage-eos-keytab | $STORAGE_DRIVER_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. -storage-eos-single-username | $STORAGE_DRIVER_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. -storage-eos-layout | $STORAGE_DRIVER_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot;. -storage-eos-gatewaysvc | $STORAGE_DRIVER_EOS_GATEWAYSVC URL to use for the storage gateway service. Default: \u0026quot;localhost:9142\u0026quot;.  owCloud Driver     -storage-owncloud-datadir | $STORAGE_DRIVER_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: \u0026quot;/var/tmp/ocis/storage/owncloud\u0026quot;. -storage-owncloud-uploadinfo-dir | $STORAGE_DRIVER_OWNCLOUD_UPLOADINFO_DIR the path to the tus upload info directory. Default: \u0026quot;/var/tmp/ocis/storage/uploadinfo\u0026quot;. -storage-owncloud-share-folder | $STORAGE_DRIVER_OWNCLOUD_SHARE_FOLDER name of the shares folder. Default: \u0026quot;/Shares\u0026quot;. -storage-owncloud-scan | $STORAGE_DRIVER_OWNCLOUD_SCAN scan files on startup to add fileids. Default: true. -storage-owncloud-redis | $STORAGE_DRIVER_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: \u0026quot;:6379\u0026quot;. -storage-owncloud-enable-home | $STORAGE_DRIVER_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: false. -storage-owncloud-layout | $STORAGE_DRIVER_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: \u0026quot;{{.Id.OpaqueId}}\u0026quot;.  ownCloudSQL Driver     -storage-owncloudsql-datadir | $STORAGE_DRIVER_OWNCLOUDSQL_DATADIR the path to the owncloudsql data directory. Default: \u0026quot;/var/tmp/ocis/storage/owncloud\u0026quot;. -storage-owncloudsql-uploadinfo-dir | $STORAGE_DRIVER_OWNCLOUDSQL_UPLOADINFO_DIR the path to the tus upload info directory. Default: \u0026quot;/var/tmp/ocis/storage/uploadinfo\u0026quot;. -storage-owncloudsql-share-folder | $STORAGE_DRIVER_OWNCLOUDSQL_SHARE_FOLDER name of the shares folder. Default: \u0026quot;/Shares\u0026quot;. -storage-owncloudsql-enable-home | $STORAGE_DRIVER_OWNCLOUDSQL_ENABLE_HOME enable the creation of home storages. Default: false. -storage-owncloudsql-layout | $STORAGE_DRIVER_OWNCLOUDSQL_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: \u0026quot;{{.Username}}\u0026quot;. -storage-owncloudsql-dbusername | $STORAGE_DRIVER_OWNCLOUDSQL_DBUSERNAME \u0026quot;username for accessing the database\u0026quot; . Default: \u0026quot;owncloud\u0026quot;. -storage-owncloudsql-dbpassword | $STORAGE_DRIVER_OWNCLOUDSQL_DBPASSWORD \u0026quot;password for accessing the database\u0026quot; . Default: \u0026quot;owncloud\u0026quot;. -storage-owncloudsql-dbhost | $STORAGE_DRIVER_OWNCLOUDSQL_DBHOST \u0026quot;the database hostname or IP address\u0026quot; . Default: cfg.Reva.Storages.OwnCloudSQL.DBHost. -storage-owncloudsql-dbport | $STORAGE_DRIVER_OWNCLOUDSQL_DBPORT \u0026quot;port the database listens on\u0026quot; . Default: 3306. -storage-owncloudsql-dbname | $STORAGE_DRIVER_OWNCLOUDSQL_DBNAME \u0026quot;the database name\u0026quot; . Default: \u0026quot;owncloud\u0026quot;.  Ocis Driver     -storage-ocis-root | $STORAGE_DRIVER_OCIS_ROOT the path to the local storage root. Default: \u0026quot;/var/tmp/ocis/storage/users\u0026quot;. -storage-ocis-enable-home | $STORAGE_DRIVER_OCIS_ENABLE_HOME enable the creation of home storages. Default: false. -storage-ocis-layout | $STORAGE_DRIVER_OCIS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: \u0026quot;{{.Id.OpaqueId}}\u0026quot;. -service-user-uuid | $STORAGE_DRIVER_OCIS_SERVICE_USER_UUID uuid of the internal service user. Default: 95cb8724-03b2-11eb-a0a6-c33ef8ef53ad.  S3ng Driver     -storage-s3ng-root | $STORAGE_DRIVER_S3NG_ROOT the path to the local storage root. Default: \u0026quot;/var/tmp/ocis/storage/users\u0026quot;. -storage-s3ng-enable-home | $STORAGE_DRIVER_S3NG_ENABLE_HOME enable the creation of home storages. Default: false. -storage-s3ng-layout | $STORAGE_DRIVER_S3NG_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: \u0026quot;{{.Id.OpaqueId}}\u0026quot;. -storage-s3ng-region | $STORAGE_DRIVER_S3NG_REGION \u0026quot;the s3 region\u0026quot; . Default: default. -storage-s3ng-accesskey | $STORAGE_DRIVER_S3NG_ACCESS_KEY \u0026quot;the s3 access key\u0026quot; . -storage-s3ng-secretkey | $STORAGE_DRIVER_S3NG_SECRET_KEY \u0026quot;the secret s3 api key\u0026quot; . -storage-s3ng-endpoint | $STORAGE_DRIVER_S3NG_ENDPOINT \u0026quot;s3 compatible API endpoint\u0026quot; . -storage-s3ng-bucket | $STORAGE_DRIVER_S3NG_BUCKET \u0026quot;bucket where the data will be stored in.  "},{"id":33,"href":"/extensions/store/configuration/","title":"Configuration","parent":"Store","content":"    Configuration  Configuration using config files Environment variables Commandline flags store server store version store health store ocis-store       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nstore server    Start integrated server\nUsage: store server [command options] [arguments...]\n -log-file | $STORE_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $STORE_TRACING_ENABLED Enable sending traces. -tracing-type | $STORE_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $STORE_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $STORE_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $STORE_TRACING_SERVICE Service name for tracing. Default: \u0026quot;store\u0026quot;. -debug-addr | $STORE_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9460\u0026quot;. -debug-token | $STORE_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $STORE_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $STORE_DEBUG_ZPAGES Enable zpages debugging. -grpc-namespace | $STORE_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $STORE_NAME Service name. Default: \u0026quot;store\u0026quot;. -data-path | $STORE_DATA_PATH location of the store data path. Default: \u0026quot;/var/tmp/ocis/store\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  store version    Print the versions of the running instances\nUsage: store version [command options] [arguments...]\n -grpc-namespace | $STORE_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $STORE_NAME Service name. Default: \u0026quot;store\u0026quot;.  store health    Check health status\nUsage: store health [command options] [arguments...]\n -debug-addr | $STORE_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9460\u0026quot;.  store ocis-store    Service to store values for ocis extensions\nUsage: store ocis-store [command options] [arguments...]\n -config-file | $STORE_CONFIG_FILE Path to config file. -log-level | $STORE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":34,"href":"/extensions/thumbnails/configuration/","title":"Configuration","parent":"Thumbnails","content":"    Configuration  Configuration using config files Environment variables Commandline flags thumbnails version thumbnails health thumbnails ocis-thumbnails thumbnails server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nthumbnails version    Print the versions of the running instances\nUsage: thumbnails version [command options] [arguments...]\n -grpc-name | $THUMBNAILS_GRPC_NAME Name of the service. Default: \u0026quot;thumbnails\u0026quot;. -grpc-namespace | $THUMBNAILS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;.  thumbnails health    Check health status\nUsage: thumbnails health [command options] [arguments...]\n -debug-addr | $THUMBNAILS_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9189\u0026quot;.  thumbnails ocis-thumbnails    Example usage\nUsage: thumbnails ocis-thumbnails [command options] [arguments...]\nthumbnails server    Start integrated server\nUsage: thumbnails server [command options] [arguments...]\n -log-file | $THUMBNAILS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $THUMBNAILS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $THUMBNAILS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $THUMBNAILS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $THUMBNAILS_CONFIG_FILE Path to config file. -tracing-enabled | $THUMBNAILS_TRACING_ENABLED Enable sending traces. -tracing-type | $THUMBNAILS_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $THUMBNAILS_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $THUMBNAILS_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $THUMBNAILS_TRACING_SERVICE Service name for tracing. Default: \u0026quot;thumbnails\u0026quot;. -debug-addr | $THUMBNAILS_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9189\u0026quot;. -debug-token | $THUMBNAILS_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $THUMBNAILS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $THUMBNAILS_DEBUG_ZPAGES Enable zpages debugging. -grpc-name | $THUMBNAILS_GRPC_NAME Name of the service. Default: \u0026quot;thumbnails\u0026quot;. -grpc-addr | $THUMBNAILS_GRPC_ADDR Address to bind grpc server. Default: \u0026quot;0.0.0.0:9185\u0026quot;. -grpc-namespace | $THUMBNAILS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -filesystemstorage-root | $THUMBNAILS_FILESYSTEMSTORAGE_ROOT Root path of the filesystem storage directory. Default: /var/tmp/ocis/thumbnails. -reva-gateway-addr | $THUMBNAILS_REVA_GATEWAY , $PROXY_REVA_GATEWAY_ADDR Reva gateway address. Default: \u0026quot;127.0.0.1:9142\u0026quot;. -webdavsource-insecure | $THUMBNAILS_WEBDAVSOURCE_INSECURE Whether to skip certificate checks. Default: true. -thumbnail-resolution | $THUMBNAILS_RESOLUTIONS \u0026ndash;thumbnail-resolution 16x16 [\u0026ndash;thumbnail-resolution 32x32]. Default: cli.NewStringSlice(\u0026quot;16x16\u0026quot;, \u0026quot;32x32\u0026quot;, \u0026quot;64x64\u0026quot;, \u0026quot;128x128\u0026quot;, \u0026quot;1920x1080\u0026quot;, \u0026quot;3840x2160\u0026quot;, \u0026quot;7680x4320\u0026quot;). -webdav-namespace | $STORAGE_WEBDAV_NAMESPACE Namespace prefix for the webdav endpoint. Default: \u0026quot;/home\u0026quot;. -extensions | Run specific extensions during supervised mode.  "},{"id":35,"href":"/extensions/web/configuration/","title":"Configuration","parent":"ownCloud Web","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  web health web server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-web reads web.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    Serve ownCloud Web for oCIS\nUsage: web [global options] command [command options] [arguments...]\nSub Commands    web health    Check health status\nUsage: web health [command options] [arguments...]\n -debug-addr | $WEB_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9104\u0026quot;.  web server    Start integrated server\nUsage: web server [command options] [arguments...]\n -log-level | $WEB_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $WEB_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $WEB_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -log-file | $WEB_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $WEB_CONFIG_FILE Path to config file. -tracing-enabled | $WEB_TRACING_ENABLED Enable sending traces. -tracing-type | $WEB_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $WEB_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $WEB_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $WEB_TRACING_SERVICE Service name for tracing. Default: \u0026quot;web\u0026quot;. -debug-addr | $WEB_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9104\u0026quot;. -debug-token | $WEB_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $WEB_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $WEB_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $WEB_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9100\u0026quot;. -http-root | $WEB_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -http-namespace | $WEB_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -http-cache-ttl | $WEB_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -asset-path | $WEB_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -web-config | $WEB_UI_CONFIG Path to web config. Default: \u0026quot;\u0026quot;. -web-config-server | $WEB_UI_CONFIG_SERVER , $OCIS_URL Server URL. Default: \u0026quot;https://localhost:9200\u0026quot;. -web-config-theme | $WEB_UI_CONFIG_THEME Theme. Default: \u0026quot;owncloud\u0026quot;. -web-config-version | $WEB_UI_CONFIG_VERSION Version. Default: \u0026quot;0.1.0\u0026quot;. -web-config-app | $WEB_UI_CONFIG_APPS --web-config-app files [--web-config-app draw-io]. Default: cli.NewStringSlice(\u0026quot;files\u0026quot;, \u0026quot;search\u0026quot;, \u0026quot;media-viewer\u0026quot;). -oidc-metadata-url | $WEB_OIDC_METADATA_URL OpenID Connect metadata URL, defaults to \u0026lt;WEB_OIDC_AUTHORITY\u0026gt;/.well-known/openid-configuration. Default: \u0026quot;\u0026quot;. -oidc-authority | $WEB_OIDC_AUTHORITY , $OCIS_URL OpenID Connect authority. Default: \u0026quot;https://localhost:9200\u0026quot;. -oidc-client-id | $WEB_OIDC_CLIENT_ID OpenID Connect client ID. Default: \u0026quot;web\u0026quot;. -oidc-response-type | $WEB_OIDC_RESPONSE_TYPE OpenID Connect response type. Default: \u0026quot;code\u0026quot;. -oidc-scope | $WEB_OIDC_SCOPE OpenID Connect scope. Default: \u0026quot;openid profile email\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  "},{"id":36,"href":"/extensions/webdav/configuration/","title":"Configuration","parent":"WebDaV","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  webdav health webdav server webdav version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    Serve WebDAV API for oCIS\nUsage: webdav [global options] command [command options] [arguments...]\nSub Commands    webdav health    Check health status\nUsage: webdav health [command options] [arguments...]\n -debug-addr | $WEBDAV_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9119\u0026quot;.  webdav server    Start integrated server\nUsage: webdav server [command options] [arguments...]\n -log-file | $WEBDAV_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $WEBDAV_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $WEBDAV_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $WEBDAV_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $WEBDAV_CONFIG_FILE Path to config file. -tracing-enabled | $WEBDAV_TRACING_ENABLED Enable sending traces. -tracing-type | $WEBDAV_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $WEBDAV_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $WEBDAV_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $WEBDAV_TRACING_SERVICE Service name for tracing. Default: \u0026quot;webdav\u0026quot;. -debug-addr | $WEBDAV_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9119\u0026quot;. -debug-token | $WEBDAV_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $WEBDAV_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $WEBDAV_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $WEBDAV_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9115\u0026quot;. -http-namespace | $WEBDAV_HTTP_NAMESPACE Set the base namespace for service discovery. Default: \u0026quot;com.owncloud.web\u0026quot;. -service-name | $WEBDAV_SERVICE_NAME Service name. Default: \u0026quot;webdav\u0026quot;. -http-root | $WEBDAV_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -ocis-public-url | $OCIS_PUBLIC_URL , $OCIS_URL The domain under which oCIS is reachable. Default: \u0026quot;https://127.0.0.1:9200\u0026quot;. -webdav-namespace | $STORAGE_WEBDAV_NAMESPACE Namespace prefix for the /webdav endpoint. Default: \u0026quot;/home\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  webdav version    Print the versions of the running instances\nUsage: webdav version [command options] [arguments...]\n -http-namespace | $WEBDAV_HTTP_NAMESPACE Set the base namespace for service discovery. Default: \u0026quot;com.owncloud.web\u0026quot;. -service-name | $WEBDAV_SERVICE_NAME Service name. Default: \u0026quot;webdav\u0026quot;.  "},{"id":37,"href":"/extensions/glauth/configuration/","title":"Configuration","parent":"GLAuth","content":"    Configuration  Configuration using config files Environment variables Commandline flags glauth server glauth health glauth ocis-glauth       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-glauth reads glauth.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nglauth server    Start integrated server\nUsage: glauth server [command options] [arguments...]\n -log-file | $GLAUTH_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $GLAUTH_CONFIG_FILE Path to config file. Default: \u0026quot;\u0026quot;. -tracing-enabled | $GLAUTH_TRACING_ENABLED Enable sending traces. -tracing-type | $GLAUTH_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $GLAUTH_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $GLAUTH_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $GLAUTH_TRACING_SERVICE Service name for tracing. Default: \u0026quot;glauth\u0026quot;. -debug-addr | $GLAUTH_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9129\u0026quot;. -debug-token | $GLAUTH_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $GLAUTH_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GLAUTH_DEBUG_ZPAGES Enable zpages debugging. -role-bundle-id | $GLAUTH_ROLE_BUNDLE_ID roleid used to make internal grpc requests. Default: \u0026quot;71881883-1768-46bd-a24d-a356a2afdf7f\u0026quot;. -ldap-addr | $GLAUTH_LDAP_ADDR Address to bind ldap server. Default: \u0026quot;0.0.0.0:9125\u0026quot;. -ldap-enabled | $GLAUTH_LDAP_ENABLED Enable ldap server. Default: true. -ldaps-addr | $GLAUTH_LDAPS_ADDR Address to bind ldap server. Default: \u0026quot;0.0.0.0:9126\u0026quot;. -ldaps-enabled | $GLAUTH_LDAPS_ENABLED Enable ldap server. Default: true. -ldaps-cert | $GLAUTH_LDAPS_CERT path to ldaps certificate in PEM format. Default: flags.OverrideDefaultString(cfg.Ldaps.Cert, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;ldap\u0026quot;), \u0026quot;ldap.crt\u0026quot;)). -ldaps-key | $GLAUTH_LDAPS_KEY path to ldaps key in PEM format. Default: flags.OverrideDefaultString(cfg.Ldaps.Key, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;ldap\u0026quot;), \u0026quot;ldap.key\u0026quot;)). -backend-basedn | $GLAUTH_BACKEND_BASEDN base distinguished name to expose. Default: \u0026quot;dc=example,dc=org\u0026quot;. -backend-name-format | $GLAUTH_BACKEND_NAME_FORMAT name attribute for entries to expose. typically cn or uid. Default: \u0026quot;cn\u0026quot;. -backend-group-format | $GLAUTH_BACKEND_GROUP_FORMAT name attribute for entries to expose. typically ou, cn or dc. Default: \u0026quot;ou\u0026quot;. -backend-ssh-key-attr | $GLAUTH_BACKEND_SSH_KEY_ATTR ssh key attribute for entries to expose. Default: \u0026quot;sshPublicKey\u0026quot;. -backend-datastore | $GLAUTH_BACKEND_DATASTORE datastore to use as the backend. one of accounts, ldap or owncloud. Default: \u0026quot;accounts\u0026quot;. -backend-insecure | $GLAUTH_BACKEND_INSECURE Allow insecure requests to the datastore. Default: false. -backend-server | $GLAUTH_BACKEND_SERVERS --backend-server http://internal1.example.com [--backend-server http://internal2.example.com]. Default: cli.NewStringSlice(\u0026quot;https://demo.owncloud.com/apps/graphapi/v1.0\u0026quot;). -backend-use-graphapi | $GLAUTH_BACKEND_USE_GRAPHAPI use Graph API, only for owncloud datastore. Default: true. -fallback-basedn | $GLAUTH_FALLBACK_BASEDN base distinguished name to expose. Default: \u0026quot;dc=example,dc=org\u0026quot;. -fallback-name-format | $GLAUTH_FALLBACK_NAME_FORMAT name attribute for entries to expose. typically cn or uid. Default: \u0026quot;cn\u0026quot;. -fallback-group-format | $GLAUTH_FALLBACK_GROUP_FORMAT name attribute for entries to expose. typically ou, cn or dc. Default: \u0026quot;ou\u0026quot;. -fallback-ssh-key-attr | $GLAUTH_FALLBACK_SSH_KEY_ATTR ssh key attribute for entries to expose. Default: \u0026quot;sshPublicKey\u0026quot;. -fallback-datastore | $GLAUTH_FALLBACK_DATASTORE datastore to use as the fallback. one of accounts, ldap or owncloud. Default: \u0026quot;\u0026quot;. -fallback-insecure | $GLAUTH_FALLBACK_INSECURE Allow insecure requests to the datastore. Default: false. -fallback-server | $GLAUTH_FALLBACK_SERVERS --fallback-server http://internal1.example.com [--fallback-server http://internal2.example.com]. Default: cli.NewStringSlice(\u0026quot;https://demo.owncloud.com/apps/graphapi/v1.0\u0026quot;). -fallback-use-graphapi | $GLAUTH_FALLBACK_USE_GRAPHAPI use Graph API, only for owncloud datastore. Default: true. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  glauth health    Check health status\nUsage: glauth health [command options] [arguments...]\n -debug-addr | $GLAUTH_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9129\u0026quot;.  glauth ocis-glauth    Serve GLAuth API for oCIS\nUsage: glauth ocis-glauth [command options] [arguments...]\n -log-level | $GLAUTH_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GLAUTH_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GLAUTH_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":38,"href":"/extensions/graph-explorer/configuration/","title":"Configuration","parent":"Graph-Explorer","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  graph-explorer health graph-explorer server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    Serve Graph-Explorer for oCIS\nUsage: graph-explorer [global options] command [command options] [arguments...]\n -log-level | $GRAPH_EXPLORER_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GRAPH_EXPLORER_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GRAPH_EXPLORER_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands    graph-explorer health    Check health status\nUsage: graph-explorer health [command options] [arguments...]\n -debug-addr | $GRAPH_EXPLORER_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9136\u0026quot;.  graph-explorer server    Start integrated server\nUsage: graph-explorer server [command options] [arguments...]\n -log-file | $GRAPH_EXPLORER_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $GRAPH_EXPLORER_TRACING_ENABLED Enable sending traces. -tracing-type | $GRAPH_EXPLORER_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $GRAPH_EXPLORER_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $GRAPH_EXPLORER_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $GRAPH_EXPLORER_TRACING_SERVICE Service name for tracing. Default: \u0026quot;graph-explorer\u0026quot;. -debug-addr | $GRAPH_EXPLORER_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9136\u0026quot;. -debug-token | $GRAPH_EXPLORER_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $GRAPH_EXPLORER_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GRAPH_EXPLORER_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $GRAPH_EXPLORER_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9135\u0026quot;. -http-root | $GRAPH_EXPLORER_HTTP_ROOT Root path of http server. Default: \u0026quot;/graph-explorer\u0026quot;. -http-namespace | $GRAPH_EXPLORER_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -issuer | $GRAPH_EXPLORER_ISSUER , $OCIS_URL Set the OpenID Connect Provider. Default: \u0026quot;https://localhost:9200\u0026quot;. -client-id | $GRAPH_EXPLORER_CLIENT_ID Set the OpenID Client ID to send to the issuer. Default: \u0026quot;ocis-explorer.js\u0026quot;. -graph-url | $GRAPH_EXPLORER_GRAPH_URL Set the url to the graph api service. Default: \u0026quot;https://localhost:9200/graph\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  "},{"id":39,"href":"/extensions/graph/configuration/","title":"Configuration","parent":"Graph","content":"    Configuration  Configuration using config files Environment variables Commandline flags graph health graph ocis-graph graph server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\ngraph health    Check health status\nUsage: graph health [command options] [arguments...]\n -debug-addr | $GRAPH_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9124\u0026quot;.  graph ocis-graph    Serve Graph API for oCIS\nUsage: graph ocis-graph [command options] [arguments...]\n -config-file | $GRAPH_CONFIG_FILE Path to config file. Default: \u0026quot;\u0026quot;. -log-level | $GRAPH_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GRAPH_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GRAPH_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  graph server    Start integrated server\nUsage: graph server [command options] [arguments...]\n -log-file | $GRAPH_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $GRAPH_TRACING_ENABLED Enable sending traces. -tracing-type | $GRAPH_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $GRAPH_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $GRAPH_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $GRAPH_TRACING_SERVICE Service name for tracing. Default: \u0026quot;graph\u0026quot;. -debug-addr | $GRAPH_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9124\u0026quot;. -debug-token | $GRAPH_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $GRAPH_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GRAPH_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $GRAPH_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9120\u0026quot;. -http-root | $GRAPH_HTTP_ROOT Root path of http server. Default: \u0026quot;/graph\u0026quot;. -http-namespace | $GRAPH_HTTP_NAMESPACE Set the base namespace for the http service for service discovery. Default: \u0026quot;com.owncloud.web\u0026quot;. -spaces-webdav-base | $GRAPH_SPACES_WEBDAV_BASE spaces webdav base URL to use when rendering drive WabDAV URLs. Default: \u0026quot;https://localhost:9200/dav/spaces/\u0026quot;. -jwt-secret | $GRAPH_JWT_SECRET , $OCIS_JWT_SECRET Used to validate the reva access JWT, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -reva-gateway-addr | $REVA_GATEWAY_ADDR REVA Gateway Endpoint. Default: \u0026quot;127.0.0.1:9142\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  "},{"id":40,"href":"/extensions/idp/configuration/","title":"Configuration","parent":"IDP","content":"    Configuration  Configuration using config files Environment variables Commandline flags idp server idp version idp health idp ocis-idp       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-idp reads idp.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nidp server    Start integrated server\nUsage: idp server [command options] [arguments...]\n -log-file | $IDP_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $IDP_CONFIG_FILE Path to config file. Default: \u0026quot;\u0026quot;. -tracing-enabled | $IDP_TRACING_ENABLED Enable sending traces. -tracing-type | $IDP_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $IDP_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $IDP_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $IDP_TRACING_SERVICE Service name for tracing. Default: \u0026quot;idp\u0026quot;. -debug-addr | $IDP_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9134\u0026quot;. -debug-token | $IDP_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $IDP_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $IDP_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $IDP_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9130\u0026quot;. -http-root | $IDP_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -http-namespace | $IDP_HTTP_NAMESPACE Set the base namespace for service discovery. Default: \u0026quot;com.owncloud.web\u0026quot;. -name | $IDP_NAME Service name. Default: \u0026quot;idp\u0026quot;. -identity-manager | $IDP_IDENTITY_MANAGER Identity manager (one of ldap,kc,cookie,dummy). Default: \u0026quot;ldap\u0026quot;. -ldap-uri | $IDP_LDAP_URI URI of the LDAP server (glauth). Default: \u0026quot;ldap://localhost:9125\u0026quot;. -ldap-bind-dn | $IDP_LDAP_BIND_DN Bind DN for the LDAP server (glauth). Default: \u0026quot;cn=idp,ou=sysusers,dc=example,dc=org\u0026quot;. -ldap-bind-password | $IDP_LDAP_BIND_PASSWORD Password for the Bind DN of the LDAP server (glauth). Default: \u0026quot;idp\u0026quot;. -ldap-base-dn | $IDP_LDAP_BASE_DN LDAP base DN of the oCIS users. Default: \u0026quot;ou=users,dc=example,dc=org\u0026quot;. -ldap-scope | $IDP_LDAP_SCOPE LDAP scope of the oCIS users. Default: \u0026quot;sub\u0026quot;. -ldap-login-attribute | $IDP_LDAP_LOGIN_ATTRIBUTE LDAP login attribute of the oCIS users. Default: \u0026quot;cn\u0026quot;. -ldap-email-attribute | $IDP_LDAP_EMAIL_ATTRIBUTE LDAP email attribute of the oCIS users. Default: \u0026quot;mail\u0026quot;. -ldap-name-attribute | $IDP_LDAP_NAME_ATTRIBUTE LDAP name attribute of the oCIS users. Default: \u0026quot;sn\u0026quot;. -ldap-uuid-attribute | $IDP_LDAP_UUID_ATTRIBUTE LDAP UUID attribute of the oCIS users. Default: \u0026quot;uid\u0026quot;. -ldap-uuid-attribute-type | $IDP_LDAP_UUID_ATTRIBUTE_TYPE LDAP UUID attribute type of the oCIS users. Default: \u0026quot;text\u0026quot;. -ldap-filter | $IDP_LDAP_FILTER LDAP filter of the oCIS users. Default: \u0026quot;(objectClass=posixaccount)\u0026quot;. -transport-tls-cert | $IDP_TRANSPORT_TLS_CERT Certificate file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSCert, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;idp\u0026quot;), \u0026quot;server.crt\u0026quot;)). -transport-tls-key | $IDP_TRANSPORT_TLS_KEY Secret file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSKey, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;idp\u0026quot;), \u0026quot;server.key\u0026quot;)). -iss | $IDP_ISS , $OCIS_URL OIDC issuer URL. Default: \u0026quot;https://localhost:9200\u0026quot;. -signing-private-key | $IDP_SIGNING_PRIVATE_KEY Full path to PEM encoded private key file (must match the \u0026ndash;signing-method algorithm). Default: nil. -signing-kid | $IDP_SIGNING_KID Value of kid field to use in created tokens (uniquely identifying the signing-private-key). Default: \u0026quot;\u0026quot;. -validation-keys-path | $IDP_VALIDATION_KEYS_PATH Full path to a folder containg PEM encoded private or public key files used for token validaton (file name without extension is used as kid). Default: \u0026quot;\u0026quot;. -encryption-secret | $IDP_ENCRYPTION_SECRET Full path to a file containing a %d bytes secret key. Default: \u0026quot;\u0026quot;. -signing-method | $IDP_SIGNING_METHOD JWT default signing method. Default: \u0026quot;PS256\u0026quot;. -uri-base-path | $IDP_URI_BASE_PATH Custom base path for URI endpoints. Default: \u0026quot;\u0026quot;. -sign-in-uri | $IDP_SIGN_IN_URI Custom redirection URI to sign-in form. Default: \u0026quot;\u0026quot;. -signed-out-uri | $IDP_SIGN_OUT_URI Custom redirection URI to signed-out goodbye page. Default: \u0026quot;\u0026quot;. -authorization-endpoint-uri | $IDP_ENDPOINT_URI Custom authorization endpoint URI. Default: \u0026quot;\u0026quot;. -endsession-endpoint-uri | $IDP_ENDSESSION_ENDPOINT_URI Custom endsession endpoint URI. Default: \u0026quot;\u0026quot;. -asset-path | $IDP_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -identifier-client-path | $IDP_IDENTIFIER_CLIENT_PATH Path to the identifier web client base folder. Default: \u0026quot;/var/tmp/ocis/idp\u0026quot;. -identifier-registration-conf | $IDP_IDENTIFIER_REGISTRATION_CONF Path to a identifier-registration.yaml configuration file. Default: \u0026quot;./config/identifier-registration.yaml\u0026quot;. -identifier-scopes-conf | $IDP_IDENTIFIER_SCOPES_CONF Path to a scopes.yaml configuration file. Default: \u0026quot;\u0026quot;. -insecure | $IDP_INSECURE Disable TLS certificate and hostname validation. -tls | $IDP_TLS Use TLS (disable only if idp is behind a TLS-terminating reverse-proxy).. Default: false. -trusted-proxy | $IDP_TRUSTED_PROXY Trusted proxy IP or IP network (can be used multiple times). Default: nil. -allow-scope | $IDP_ALLOW_SCOPE Allow OAuth 2 scope (can be used multiple times, if not set default scopes are allowed). Default: nil. -allow-client-guests | $IDP_ALLOW_CLIENT_GUESTS Allow sign in of client controlled guest users. -allow-dynamic-client-registration | $IDP_ALLOW_DYNAMIC_CLIENT_REGISTRATION Allow dynamic OAuth2 client registration. Default: false. -disable-identifier-webapp | $IDP_DISABLE_IDENTIFIER_WEBAPP Disable built-in identifier-webapp to use a frontend hosted elsewhere.. Default: true. -access-token-expiration | $IDP_ACCESS_TOKEN_EXPIRATION Expiration time of access tokens in seconds since generated. Default: 60 * 10. -id-token-expiration | $IDP_ID_TOKEN_EXPIRATION Expiration time of id tokens in seconds since generated. Default: 60 * 60. -refresh-token-expiration | $IDP_REFRESH_TOKEN_EXPIRATION Expiration time of refresh tokens in seconds since generated. Default: 60 * 60 * 24 * 365 * 3. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  idp version    Print the versions of the running instances\nUsage: idp version [command options] [arguments...]\n -http-namespace | $IDP_HTTP_NAMESPACE Set the base namespace for service discovery. Default: \u0026quot;com.owncloud.web\u0026quot;. -name | $IDP_NAME Service name. Default: \u0026quot;idp\u0026quot;.  idp health    Check health status\nUsage: idp health [command options] [arguments...]\n -debug-addr | $IDP_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9134\u0026quot;.  idp ocis-idp    Serve IDP API for oCIS\nUsage: idp ocis-idp [command options] [arguments...]\n -log-level | $IDP_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $IDP_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $IDP_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":41,"href":"/extensions/ocs/configuration/","title":"Configuration","parent":"Ocs","content":"    Configuration  Configuration using config files Environment variables Commandline flags ocs health ocs ocis-ocs ocs server ocs version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-ocs reads ocs.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nocs health    Check health status\nUsage: ocs health [command options] [arguments...]\n -debug-addr | $OCS_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9114\u0026quot;.  ocs ocis-ocs    Serve OCS API for oCIS\nUsage: ocs ocis-ocs [command options] [arguments...]\nocs server    Start integrated server\nUsage: ocs server [command options] [arguments...]\n -log-file | $OCS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $OCS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $OCS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $OCS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $OCS_CONFIG_FILE Path to config file. -tracing-enabled | $OCS_TRACING_ENABLED Enable sending traces. Default: false. -tracing-type | $OCS_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $OCS_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $OCS_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $OCS_TRACING_SERVICE Service name for tracing. Default: \u0026quot;ocs\u0026quot;. -debug-addr | $OCS_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9114\u0026quot;. -debug-token | $OCS_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $OCS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $OCS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $OCS_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9110\u0026quot;. -http-namespace | $OCS_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -name | $OCS_NAME Service name. Default: \u0026quot;ocs\u0026quot;. -http-root | $OCS_HTTP_ROOT Root path of http server. Default: \u0026quot;/ocs\u0026quot;. -jwt-secret | $OCS_JWT_SECRET , $OCIS_JWT_SECRET Used to dismantle the access token, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -account-backend-type | $OCS_ACCOUNT_BACKEND_TYPE account-backend-type. Default: \u0026quot;accounts\u0026quot;. -reva-gateway-addr | $OCS_REVA_GATEWAY_ADDR REVA Gateway Endpoint. Default: \u0026quot;127.0.0.1:9142\u0026quot;. -idm-address | $OCS_IDM_ADDRESS , $OCIS_URL keeps track of the IDM Address. Needed because of Reva requisite of uniqueness for users. Default: \u0026quot;https://localhost:9200\u0026quot;. -users-driver | $OCS_STORAGE_USERS_DRIVER , $STORAGE_USERS_DRIVER storage driver for users mount: eg. local, eos, owncloud, ocis or s3. Default: \u0026quot;ocis\u0026quot;. -extensions | Run specific extensions during supervised mode.  ocs version    Print the versions of the running instances\nUsage: ocs version [command options] [arguments...]\n -http-namespace | $OCS_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -name | $OCS_NAME Service name. Default: \u0026quot;ocs\u0026quot;.  "},{"id":42,"href":"/extensions/onlyoffice/configuration/","title":"Configuration","parent":"OnlyOffice","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  onlyoffice health onlyoffice server       Configuration    oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.dev/extensions/onlyoffice/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: onlyoffice reads onlyoffice.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command    OnlyOffice oCIS extension\nUsage: onlyoffice [global options] command [command options] [arguments...]\n -config-file | $ONLYOFFICE_CONFIG_FILE Path to config file. -log-level | $ONLYOFFICE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $ONLYOFFICE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $ONLYOFFICE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands    onlyoffice health    Check health status\nUsage: onlyoffice health [command options] [arguments...]\n -debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9224\u0026quot;.  onlyoffice server    Start integrated server\nUsage: onlyoffice server [command options] [arguments...]\n -log-file | $ONLYOFFICE_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $ONLYOFFICE_TRACING_ENABLED Enable sending traces. -tracing-type | $ONLYOFFICE_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $ONLYOFFICE_TRACING_SERVICE Service name for tracing. Default: \u0026quot;onlyoffice\u0026quot;. -debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9224\u0026quot;. -debug-token | $ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $ONLYOFFICE_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $ONLYOFFICE_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9220\u0026quot;. -http-namespace | $ONLYOFFICE_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -http-root | $ONLYOFFICE_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -http-cache-ttl | $ONLYOFFICE_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -asset-path | $ONLYOFFICE_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  "},{"id":43,"href":"/extensions/proxy/configuration/","title":"Configuration","parent":"Proxy","content":"    Configuration  Configuration using config files Environment variables Commandline flags proxy health proxy ocis-proxy proxy server proxy version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nproxy health    Check health status\nUsage: proxy health [command options] [arguments...]\n -debug-addr | $PROXY_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9109\u0026quot;.  proxy ocis-proxy    proxy for oCIS\nUsage: proxy ocis-proxy [command options] [arguments...]\n -log-level | $PROXY_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $PROXY_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $PROXY_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -extensions | Run specific extensions during supervised mode.  proxy server    Start integrated server\nUsage: proxy server [command options] [arguments...]\n -log-level | $PROXY_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $PROXY_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $PROXY_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -extensions | Run specific extensions during supervised mode. -log-file | $PROXY_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $PROXY_CONFIG_FILE Path to config file. -tracing-enabled | $PROXY_TRACING_ENABLED Enable sending traces. -tracing-type | $PROXY_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $PROXY_TRACING_ENDPOINT Endpoint for the agent. -tracing-collector | $PROXY_TRACING_COLLECTOR Endpoint for the collector. -tracing-service | $PROXY_TRACING_SERVICE Service name for tracing. Default: \u0026quot;proxy\u0026quot;. -debug-addr | $PROXY_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9205\u0026quot;. -debug-token | $PROXY_DEBUG_TOKEN Token to grant metrics access. -debug-pprof | $PROXY_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $PROXY_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $PROXY_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9200\u0026quot;. -http-root | $PROXY_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -asset-path | $PROXY_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -service-namespace | $PROXY_SERVICE_NAMESPACE Set the base namespace for the service namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -service-name | $PROXY_SERVICE_NAME Service name. Default: \u0026quot;proxy\u0026quot;. -transport-tls-cert | $PROXY_TRANSPORT_TLS_CERT Certificate file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSCert, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;proxy\u0026quot;), \u0026quot;server.crt\u0026quot;)). -transport-tls-key | $PROXY_TRANSPORT_TLS_KEY Secret file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSKey, path.Join(pkgos.MustUserConfigDir(\u0026quot;ocis\u0026quot;, \u0026quot;proxy\u0026quot;), \u0026quot;server.key\u0026quot;)). -tls | $PROXY_TLS Use TLS (disable only if proxy is behind a TLS-terminating reverse-proxy).. Default: true. -jwt-secret | $PROXY_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -reva-gateway-addr | $PROXY_REVA_GATEWAY_ADDR REVA Gateway Endpoint. Default: \u0026quot;127.0.0.1:9142\u0026quot;. -insecure | $PROXY_INSECURE_BACKENDS allow insecure communication to upstream servers. Default: false. -oidc-issuer | $PROXY_OIDC_ISSUER , $OCIS_URL OIDC issuer. Default: \u0026quot;https://localhost:9200\u0026quot;. -oidc-insecure | $PROXY_OIDC_INSECURE OIDC allow insecure communication. Default: true. -oidc-userinfo-cache-tll | $PROXY_OIDC_USERINFO_CACHE_TTL Fallback TTL in seconds for caching userinfo, when no token lifetime can be identified. Default: 10. -oidc-userinfo-cache-size | $PROXY_OIDC_USERINFO_CACHE_SIZE Max entries for caching userinfo. Default: 1024. -autoprovision-accounts | $PROXY_AUTOPROVISION_ACCOUNTS create accounts from OIDC access tokens to learn new users. Default: false. -user-oidc-claim | $PROXY_USER_OIDC_CLAIM The OIDC claim that is used to identify users, eg. \u0026lsquo;ownclouduuid\u0026rsquo;, \u0026lsquo;uid\u0026rsquo;, \u0026lsquo;cn\u0026rsquo; or \u0026lsquo;email\u0026rsquo;. Default: \u0026quot;email\u0026quot;. -user-cs3-claim | $PROXY_USER_CS3_CLAIM The CS3 claim to use when looking up a user in the CS3 users API, eg. \u0026lsquo;userid\u0026rsquo;, \u0026lsquo;username\u0026rsquo; or \u0026lsquo;mail\u0026rsquo;. Default: \u0026quot;mail\u0026quot;. -presignedurl-allow-method | $PRESIGNEDURL_ALLOWED_METHODS \u0026ndash;presignedurl-allow-method GET [\u0026ndash;presignedurl-allow-method POST]. Default: cli.NewStringSlice(\u0026quot;GET\u0026quot;). -enable-presignedurls | $PROXY_ENABLE_PRESIGNEDURLS Enable or disable handling the presigned urls in the proxy. Default: true. -enable-basic-auth | $PROXY_ENABLE_BASIC_AUTH enable basic authentication. Default: false. -account-backend-type | $PROXY_ACCOUNT_BACKEND_TYPE account-backend-type. Default: \u0026quot;accounts\u0026quot;. -proxy-user-agent-lock-in | $PROXY_MIDDLEWARE_AUTH_CREDENTIALS_BY_USER_AGENT \u0026ndash;user-agent-whitelist-lock-in=mirall:basic,foo:bearer Given a tuple of [UserAgent:challenge] it locks a given user agent to the authentication challenge. Particularly useful for old clients whose USer-Agent is known and only support one authentication challenge. When this flag is set in the proxy it configures the authentication middlewares..  proxy version    Print the versions of the running instances\nUsage: proxy version [command options] [arguments...]\n -service-namespace | $PROXY_SERVICE_NAMESPACE Set the base namespace for the service namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -service-name | $PROXY_SERVICE_NAME Service name. Default: \u0026quot;proxy\u0026quot;.  "},{"id":44,"href":"/extensions/settings/configuration/","title":"Configuration","parent":"Settings","content":"    Configuration  Configuration using config files Environment variables Commandline flags settings health settings ocis-settings settings server settings version       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nsettings health    Check health status\nUsage: settings health [command options] [arguments...]\n -debug-addr | $SETTINGS_DEBUG_ADDR Address to debug endpoint. Default: \u0026quot;0.0.0.0:9194\u0026quot;.  settings ocis-settings    Provide settings and permissions for oCIS\nUsage: settings ocis-settings [command options] [arguments...]\n -log-level | $SETTINGS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $SETTINGS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $SETTINGS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  settings server    Start integrated server\nUsage: settings server [command options] [arguments...]\n -config-file | $SETTINGS_CONFIG_FILE Path to config file. -tracing-enabled | $SETTINGS_TRACING_ENABLED Enable sending traces. -tracing-type | $SETTINGS_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $SETTINGS_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $SETTINGS_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $SETTINGS_TRACING_SERVICE Service name for tracing. Default: \u0026quot;settings\u0026quot;. -debug-addr | $SETTINGS_DEBUG_ADDR Address to bind debug server. Default: \u0026quot;0.0.0.0:9194\u0026quot;. -debug-token | $SETTINGS_DEBUG_TOKEN Token to grant metrics access. Default: \u0026quot;\u0026quot;. -debug-pprof | $SETTINGS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $SETTINGS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $SETTINGS_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9190\u0026quot;. -http-namespace | $SETTINGS_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -http-root | $SETTINGS_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -http-cache-ttl | $SETTINGS_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -grpc-addr | $SETTINGS_GRPC_ADDR Address to bind grpc server. Default: \u0026quot;0.0.0.0:9191\u0026quot;. -asset-path | $SETTINGS_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -grpc-namespace | $SETTINGS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $SETTINGS_NAME service name. Default: \u0026quot;settings\u0026quot;. -data-path | $SETTINGS_DATA_PATH Mount path for the storage. Default: \u0026quot;/var/tmp/ocis/settings\u0026quot;. -jwt-secret | $SETTINGS_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -extensions | Run specific extensions during supervised mode. This flag is set by the runtime.  settings version    Print the versions of the running instances\nUsage: settings version [command options] [arguments...]\n -grpc-namespace | $SETTINGS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $SETTINGS_NAME service name. Default: \u0026quot;settings\u0026quot;.  "},{"id":45,"href":"/extensions/idp/","title":"IDP","parent":"Extensions","content":"This service provides an OpenID Connect provider which is the default way to authenticate in oCIS.\n"},{"id":46,"href":"/extensions/proxy/","title":"Proxy","parent":"Extensions","content":"This service provides a proxy service that routes requests to the correct extensions.\n"},{"id":47,"href":"/extensions/accounts/configuration/","title":"Configuration","parent":"Accounts","content":"    Configuration  Configuration using config files Environment variables Commandline flags accounts list accounts rebuildIndex accounts remove accounts version accounts add accounts inspect accounts ocis-accounts accounts server accounts update       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-accounts reads accounts.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\naccounts list    List existing accounts\nUsage: accounts list [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;.  accounts rebuildIndex    Rebuilds the service\u0026rsquo;s index, i.e. deleting and then re-adding all existing documents\nUsage: accounts rebuildIndex [command options] [arguments...]\naccounts remove    Removes an existing account\nUsage: accounts remove [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;.  accounts version    Print the versions of the running instances\nUsage: accounts version [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;.  accounts add    Create a new account\nUsage: accounts add [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;. -enabled | Enable the account. -displayname | Set the displayname for the account. -username | Username will be written to preferred-name and on_premises_sam_account_name. -preferred-name | Set the preferred-name for the account. -on-premises-sam-account-name | Set the on-premises-sam-account-name. -uidnumber | Set the uidnumber for the account. -gidnumber | Set the gidnumber for the account. -mail | Set the mail for the account. -description | Set the description for the account. -password | Set the password for the account. -password-policies | Possible policies: DisableStrongPassword, DisablePasswordExpiration. -force-password-change | Force password change on next sign-in. -force-password-change-mfa | Force password change on next sign-in with mfa.  accounts inspect    Show detailed data on an existing account\nUsage: accounts inspect [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;.  accounts ocis-accounts    Provide accounts and groups for oCIS\nUsage: accounts ocis-accounts [command options] [arguments...]\n -log-level | $ACCOUNTS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $ACCOUNTS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $ACCOUNTS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -extensions | Run specific extensions during supervised mode.  accounts server    Start ocis accounts service\nUsage: accounts server [command options] [arguments...]\n -log-file | $ACCOUNTS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $ACCOUNTS_TRACING_ENABLED Enable sending traces. -tracing-type | $ACCOUNTS_TRACING_TYPE Tracing backend type. Default: \u0026quot;jaeger\u0026quot;. -tracing-endpoint | $ACCOUNTS_TRACING_ENDPOINT Endpoint for the agent. Default: \u0026quot;\u0026quot;. -tracing-collector | $ACCOUNTS_TRACING_COLLECTOR Endpoint for the collector. Default: \u0026quot;\u0026quot;. -tracing-service | $ACCOUNTS_TRACING_SERVICE Service name for tracing. Default: \u0026quot;accounts\u0026quot;. -http-namespace | $ACCOUNTS_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: \u0026quot;com.owncloud.web\u0026quot;. -http-addr | $ACCOUNTS_HTTP_ADDR Address to bind http server. Default: \u0026quot;0.0.0.0:9181\u0026quot;. -http-root | $ACCOUNTS_HTTP_ROOT Root path of http server. Default: \u0026quot;/\u0026quot;. -http-cache-ttl | $ACCOUNTS_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -grpc-addr | $ACCOUNTS_GRPC_ADDR Address to bind grpc server. Default: \u0026quot;0.0.0.0:9180\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;. -accounts-hash-difficulty | $ACCOUNTS_HASH_DIFFICULTY accounts password hash difficulty. Default: 11. -asset-path | $ACCOUNTS_ASSET_PATH Path to custom assets. Default: \u0026quot;\u0026quot;. -jwt-secret | $ACCOUNTS_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -storage-disk-path | $ACCOUNTS_STORAGE_DISK_PATH Path on the local disk, e.g. /var/tmp/ocis/accounts. Default: \u0026quot;\u0026quot;. -storage-cs3-provider-addr | $ACCOUNTS_STORAGE_CS3_PROVIDER_ADDR bind address for the metadata storage provider. Default: \u0026quot;localhost:9215\u0026quot;. -storage-cs3-data-url | $ACCOUNTS_STORAGE_CS3_DATA_URL http endpoint of the metadata storage. Default: \u0026quot;http://localhost:9216\u0026quot;. -storage-cs3-data-prefix | $ACCOUNTS_STORAGE_CS3_DATA_PREFIX path prefix for the http endpoint of the metadata storage, without leading slash. Default: \u0026quot;data\u0026quot;. -storage-cs3-jwt-secret | $ACCOUNTS_STORAGE_CS3_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -service-user-uuid | $ACCOUNTS_SERVICE_USER_UUID uuid of the internal service user (required on EOS). Default: \u0026quot;95cb8724-03b2-11eb-a0a6-c33ef8ef53ad\u0026quot;. -service-user-username | $ACCOUNTS_SERVICE_USER_USERNAME username of the internal service user (required on EOS). Default: \u0026quot;\u0026quot;. -service-user-uid | $ACCOUNTS_SERVICE_USER_UID uid of the internal service user (required on EOS). Default: 0. -service-user-gid | $ACCOUNTS_SERVICE_USER_GID gid of the internal service user (required on EOS). Default: 0. -uid-index-lower-bound | $ACCOUNTS_UID_INDEX_LOWER_BOUND define a starting point for the account UID. Default: 0. -gid-index-lower-bound | $ACCOUNTS_GID_INDEX_LOWER_BOUND define a starting point for the account GID. Default: 1000. -uid-index-upper-bound | $ACCOUNTS_UID_INDEX_UPPER_BOUND define an ending point for the account UID. Default: 0. -gid-index-upper-bound | $ACCOUNTS_GID_INDEX_UPPER_BOUND define an ending point for the account GID. Default: 1000. -extensions | Run specific extensions during supervised mode.  accounts update    Make changes to an existing account\nUsage: accounts update [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: \u0026quot;com.owncloud.api\u0026quot;. -name | $ACCOUNTS_NAME service name. Default: \u0026quot;accounts\u0026quot;. -enabled | Enable the account. -displayname | Set the displayname for the account. -preferred-name | Set the preferred-name for the account. -on-premises-sam-account-name | Set the on-premises-sam-account-name. -uidnumber | Set the uidnumber for the account. -gidnumber | Set the gidnumber for the account. -mail | Set the mail for the account. -description | Set the description for the account. -password | Set the password for the account. -password-policies | Possible policies: DisableStrongPassword, DisablePasswordExpiration. -force-password-change | Force password change on next sign-in. -force-password-change-mfa | Force password change on next sign-in with mfa.  "},{"id":48,"href":"/extensions/ocis_hello/configuration/","title":"Configuration","parent":"Hello (example extension)","content":"    Configuration  Configuration using config files Environment variables Command line flags   Root Command Sub Commands  hello health hello server       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-hello reads hello.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommand line flags    If you prefer to configure the service with command line flags you can see the available variables below. Command line flags are only working when calling the sub command directly.\nRoot Command    Hello, an example oCIS extension\nUsage: hello [global options] command [command options] [arguments...]\n -config-file | $HELLO_CONFIG_FILE Path to config file. -log-level | $HELLO_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. Default: info. -log-pretty | $HELLO_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $HELLO_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands    hello health    Check health status\nUsage: hello health [command options] [arguments...]\n -debug-addr | $HELLO_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9109.  hello server    start hello service\nUsage: hello server [command options] [arguments...]\n -log-file | $HELLO_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $HELLO_TRACING_ENABLED Enable sending traces. -tracing-type | $HELLO_TRACING_TYPE Tracing backend type. Default: jaeger. -tracing-endpoint | $HELLO_TRACING_ENDPOINT Endpoint for the agent. -tracing-collector | $HELLO_TRACING_COLLECTOR Endpoint for the collector. -tracing-service | $HELLO_TRACING_SERVICE Service name for tracing. Default: hello. -debug-addr | $HELLO_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9109. -debug-token | $HELLO_DEBUG_TOKEN Token to grant metrics access. -debug-pprof | $HELLO_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $HELLO_DEBUG_ZPAGES Enable zpages debugging. -http-namespace | $HELLO_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: com.owncloud.web. -http-addr | $HELLO_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9105. -http-root | $HELLO_HTTP_ROOT Root path of http server. Default: /. -http-cache-ttl | $HELLO_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -grpc-namespace | $HELLO_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: com.owncloud.api. -name | $HELLO_NAME service name. Default: \u0026quot;hello\u0026quot;. -grpc-addr | $HELLO_GRPC_ADDR Address to bind grpc server. Default: 0.0.0.0:9106. -asset-path | $HELLO_ASSET_PATH Path to custom assets. -jwt-secret | $HELLO_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: Pive-Fumkiu4.  "},{"id":49,"href":"/extensions/ocis_wopiserver/configuration/","title":"Configuration","parent":"WOPI server","content":"    Configuration  Configuration using config files Environment variables Commandline flags accounts server accounts health accounts wopiserver       Configuration    Configuration using config files    Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-accounts reads accounts.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags    If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\naccounts server    start wopiserver\nUsage: accounts server [command options] [arguments...]\n -log-file | $WOPISERVER_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $WOPISERVER_TRACING_ENABLED Enable sending traces. -tracing-type | $WOPISERVER_TRACING_TYPE Tracing backend type. Default: jaeger. -tracing-endpoint | $WOPISERVER_TRACING_ENDPOINT Endpoint for the agent. -tracing-collector | $WOPISERVER_TRACING_COLLECTOR Endpoint for the collector. -tracing-service | $WOPISERVER_TRACING_SERVICE Service name for tracing. Default: wopiserver. -debug-addr | $WOPISERVER_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9109. -debug-token | $WOPISERVER_DEBUG_TOKEN Token to grant metrics access. -debug-pprof | $WOPISERVER_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $WOPISERVER_DEBUG_ZPAGES Enable zpages debugging. -http-namespace | $WOPISERVER_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: com.owncloud.web. -http-addr | $WOPISERVER_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9105. -http-root | $WOPISERVER_HTTP_ROOT Root path of http server. Default: /. -http-cache-ttl | $WOPISERVER_CACHE_TTL Set the static assets caching duration in seconds. Default: 604800. -name | $WOPISERVER_NAME service name. Default: \u0026quot;wopiserver\u0026quot;. -asset-path | $WOPISERVER_ASSET_PATH Path to custom assets. -wopi-server-host | $WOPISERVER_WOPI_SERVER_HOST Wopiserver Host. Default: http://127.0.0.1:8880. -wopi-server-insecure | $WOPISERVER_WOPI_SERVER_INSECURE Wopiserver insecure. Default: false. -wopi-server-iop-secret | $WOPISERVER_WOPI_SERVER_IOP_SECRET shared IOP secret for CS3 WOPI server. -wopi-server-token-ttl | $WOPISERVER_TOKEN_TTL TTL of issued tokens. Default: (1 * time.Hour). -jwt-secret | $WOPISERVER_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: \u0026quot;Pive-Fumkiu4\u0026quot;. -reva-gateway-addr | $WOPISERVER_REVA_GATEWAY_ADDR Reva gateway address. Default: \u0026quot;127.0.0.1:9142\u0026quot;.  accounts health    Check health status\nUsage: accounts health [command options] [arguments...]\n -debug-addr | $WOPISERVER_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9109.  accounts wopiserver    wopiserver, an example oCIS extension\nUsage: accounts wopiserver [command options] [arguments...]\n -config-file | $WOPISERVER_CONFIG_FILE Path to config file. -log-level | $WOPISERVER_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. Default: info. -log-pretty | $WOPISERVER_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $WOPISERVER_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":50,"href":"/extensions/ocis_wopiserver/","title":"WOPI server","parent":"Extensions","content":"oCIS WOPI server is a proof of concept extension to open office files in ownCloud Infinite Scale. It uses the CS3ORG WOPI server and can integrate WOPI compliant online office suites like Collabora or Office Online Server.\nRequest flow between services       sequenceDiagram autonumber participant User participant ownCloud Web participant oCIS WOPI server participant CS3 WOPI server participant oCIS participant REVA User - ownCloud Web: Log in with OpenID connect activate ownCloud Web Note over ownCloud Web: user session represended by OpenID Connect access token User - ownCloud Web: open office file activate ownCloud Web ownCloud Web - oCIS: /api/v0/wopi/open [OpenID Connect access token] activate oCIS oCIS - oCIS: mints REVA access token for the user oCIS - oCIS WOPI server: /api/v0/wopi/open [REVA access token] activate oCIS WOPI server oCIS WOPI server - oCIS WOPI server: mint new REVA user token with specified TTL (default 1h) oCIS WOPI server - REVA: stat file [REVA access token] activate REVA REVA -- oCIS WOPI server: file info deactivate REVA oCIS WOPI server - CS3 WOPI server: get supported file extensions [unauthenticated] activate CS3 WOPI server CS3 WOPI server -- oCIS WOPI server: file extensions deactivate CS3 WOPI server oCIS WOPI server - CS3 WOPI server: /wopi/iop/open [CS3 WOPI shared IOP secret] (REVA access token is contained in payload) activate CS3 WOPI server activate CS3 WOPI server CS3 WOPI server - CS3 WOPI server: mints CS3 WOPI server access token embeds the REVA access token of the user deactivate CS3 WOPI server CS3 WOPI server -- oCIS WOPI server: Collabora URL, CS3 WOPI server token deactivate CS3 WOPI server oCIS WOPI server -- oCIS: Collabora URL, CS3 WOPI server token deactivate oCIS WOPI server oCIS -- ownCloud Web: Collabora URL, CS3 WOPI server token deactivate oCIS ownCloud Web - Collabora: open Collabora in new tab (Collabora URL, CS3 WOPI server token as parameters) deactivate ownCloud Web activate Collabora Collabora - CS3 WOPI server: /wopi/files/\" [CS3 WOPI server token] activate CS3 WOPI server CS3 WOPI server - CS3 WOPI server: get REVA access token from inside the CS3 WOPI server token CS3 WOPI server - REVA: open file [REVA access token] activate REVA REVA -- CS3 WOPI server: return file deactivate REVA CS3 WOPI server -- Collabora: return file deactivate CS3 WOPI server activate User Collabora -- User: display the file Note over User: can edit the file User - Collabora: stop editing deactivate User deactivate Collabora User - ownCloud Web: logout deactivate ownCloud Web  "},{"id":51,"href":"/ocis/deployment/","title":"Deployment","parent":"oCIS - ownCloud Infinite Scale","content":"    Deployments scenarios and examples  Setup oCIS on your server   Secure an oCIS instance  Change default secrets Delete demo users       Deployments scenarios and examples    This section handles deployments and operations for admins and people who are interested in how versatile oCIS is. If you want to just try oCIS you may also follow Getting started.\nSetup oCIS on your server    oCIS deployments are super simple, yet there are many configurations possible for advanced setups.\n Basic oCIS setup - configure domain, certificates and port oCIS setup with Traefik for SSL termination oCIS setup with Keycloak as identity provider oCIS setup with WOPI server to open office documents in your browser oCIS with S3 storage backend (MinIO) oCIS with the Hello extension example  Secure an oCIS instance    Change default secrets    oCIS uses two system users which are needed for being operational:\n Reva Inter Operability Platform (bc596f3c-c955-4328-80a0-60d018b4ad57) Kopano IDP (820ba2a1-3f54-4538-80a4-2d73007e30bf)  Both have simple default passwords which need to be changed. Currently, changing a password is only possible on the command line. You need to run ocis accounts update --password \u0026lt;new-password\u0026gt; \u0026lt;id\u0026gt; for both users.\nThe new password for the Reva Inter Operability Platform user must be made available to oCIS by using the environment variable STORAGE_LDAP_BIND_PASSWORD. The same applies to the new Kopano IDP user password, which needs do be made available to oCIS in IDP_LDAP_BIND_PASSWORD.\nFurthermore, oCIS uses a shared secret to sign JWT tokens for inter service authorization, which also needs to be changed by the user. You can change it by setting the OCIS_JWT_SECRET environment variable for oCIS to a random string.\nAnother is used secret for singing JWT tokens for uploads and downloads, which also needs to be changed by the user. You can change it by setting the STORAGE_TRANSFER_SECRET environment variable for oCIS to a random string.\nDelete demo users    Before deleting the demo users mentioned below, you must create a new account for yourself and assign it to the administrator role.  oCIS ships with a few demo users besides the system users:\n Admin (ddc2004c-0977-11eb-9d3f-a793888cd0f8) Albert Einstein (4c510ada-c86b-4815-8820-42cdf82c3d51) Richard Feynman (932b4540-8d16-481e-8ef4-588e4b6b151c) Maurice Moss (058bff95-6708-4fe5-91e4-9ea3d377588b) Marie Curie (f7fbf8c8-139b-4376-b307-cf0a8c2d0d9c)  You can view them in ownCloud Web if you log in as Admin user or list them by running ocis accounts list. After adding your own user it is safe to delete the demo users in the web UI or with the command ocis accounts remove \u0026lt;id\u0026gt;. Please do not delete the system users (see change default secrets) or oCIS will not function properly anymore.\n"},{"id":52,"href":"/extensions/accounts/","title":"Accounts","parent":"Extensions","content":"Abstract    oCIS needs to be able to identify users. Without a non reassignable and persistent account ID share metadata cannot be reliably persisted. accounts allows exchanging oidc claims for a uuid. Using a uuid allows users to change the login, mail or even openid connect provider without breaking any persisted metadata that might have been attached to it.\n persists accounts uses graph api properties ldap can be synced using the onpremise* attributes  Table of Contents        Configuration     GRPC API     Releasing     "},{"id":53,"href":"/extensions/ocis_hello/building/","title":"Building","parent":"Hello (example extension)","content":"    Frontend Backend Documentation     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go \u0026gt;= v1.16. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello All required tool besides the ones mentioned above will be automatically installed. All commands to build this project are part of our Makefile and respectively our package.json.\nFrontend    yarn install yarn build The above commands will install the required build dependencies and build the whole frontend bundle. This bundle will we embedded into the binary later on.\nBackend    make generate make build The above commands will embed the frontend bundle into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/hello -h to see all available options.\nDocumentation    Just run make -C docs docs-serve from within the root level of the extensions git repository. This will make documentation available on localhost:1313 and also do a hot reload if you change something in the (non autogenerated) documentation files.\n"},{"id":54,"href":"/extensions/ocis_wopiserver/building/","title":"Building","parent":"WOPI server","content":"    Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go \u0026gt;= v1.16. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-wopiserver.git cd ocis-wopiserver All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile and respectively our package.json.\nFrontend    yarn install yarn build The above commands will install the required build dependencies and build the whole frontend bundle. This bundle will we embedded into the binary later on.\nBackend    make generate make build The above commands will embed the frontend bundle into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-wopiserver -h to see all available options.\n"},{"id":55,"href":"/clients/web/building/","title":"Building from source","parent":"ownCloud Web","content":"    Building ownCloud Web Updating dependencies Building the documentation  Setting up Viewing the documentation Deploying the documentation       Building ownCloud Web     Run yarn install to install dependencies Run yarn build to build Web and all apps included in the packages folder  Updating dependencies     Run yarn upgrade to update dependencies  Building the documentation    Setting up     Install hugo Run make docs  Viewing the documentation    To view the rendered docs in the browser run:\ncd hugo hugo -D server Then open \u0026ldquo;http://localhost:1313/\u0026rdquo;\nWhen making changes to the docs, run make docs again and the server will pick up the changes and reload the page automatically\nDeploying the documentation    The documentation is automatically deployed from the master branch to https://owncloud.dev/clients/web/\n"},{"id":56,"href":"/extensions/glauth/configuration-hints/","title":"Configuration Hints","parent":"GLAuth","content":"    Configuration hints     Configuration hints    The default setup does not use a fallback backend. It can be enabled by setting the GLAUTH_FALLBACK_DATASTORE environment variable.\nWhen using owncloud make sure to use the full URL to the ownCloud 10 graph api app endpoint, eg.: GLAUTH_FALLBACK_SERVERS=\u0026quot;https://demo.owncloud.com/apps/graphapi/v1.0\u0026quot;\n"},{"id":57,"href":"/extensions/onlyoffice/getting-started/","title":"Getting Started","parent":"OnlyOffice","content":"    Installation  Docker Binaries   Configuration  ownCloud Web configuration Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation    So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker    TBD\nBinaries    TBD\nConfiguration    We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nownCloud Web configuration    When loading the extension in the ownCloud Web, it is necessary to specify to which ownCloud 10 server the extension is supposed to connect to. This can be done via config object when registering the extension in config.json. For more details, you can take a look at the following example:\n\u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;onlyoffice\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;https://localhost:9200/onlyoffice.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;https://oc10.example.org\u0026#34; } } ] Environment variables    If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal     ONLYOFFICE_CONFIG_FILE Path to config file, empty default value ONLYOFFICE_LOG_LEVEL Set logging level, defaults to info ONLYOFFICE_LOG_COLOR Enable colored logging, defaults to true ONLYOFFICE_LOG_PRETTY Enable pretty logging, defaults to true  Server     ONLYOFFICE_TRACING_ENABLED Enable sending traces, defaults to false ONLYOFFICE_TRACING_TYPE Tracing backend type, defaults to jaeger ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent, empty default value ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector, empty default value ONLYOFFICE_TRACING_SERVICE Service name for tracing, defaults to onlyoffice ONLYOFFICE_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9224 ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access, empty default value ONLYOFFICE_DEBUG_PPROF Enable pprof debugging, defaults to false ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging, defaults to false ONLYOFFICE_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9220 ONLYOFFICE_HTTP_NAMESPACE The http namespace ONLYOFFICE_HTTP_ROOT Root path of http server, defaults to /  Health     ONLYOFFICE_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9224  Commandline flags    If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal     \u0026ndash;config-file | $ONLYOFFICE_CONFIG_FILE Path to config file. \u0026ndash;log-level | $ONLYOFFICE_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $ONLYOFFICE_LOG_PRETTY Enable pretty logging. Default: true. \u0026ndash;log-color | $ONLYOFFICE_LOG_COLOR Enable colored logging. Default: true.  Server     \u0026ndash;tracing-enabled | $ONLYOFFICE_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $ONLYOFFICE_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $ONLYOFFICE_TRACING_SERVICE Service name for tracing. Default: onlyoffice. \u0026ndash;debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9224. \u0026ndash;debug-token | $ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $ONLYOFFICE_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;http-addr | $ONLYOFFICE_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9220. \u0026ndash;http-namespace | $ONLYOFFICE_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: com.owncloud.web. \u0026ndash;http-root | $ONLYOFFICE_HTTP_ROOT Root path of http server. Default: /. \u0026ndash;asset-path | $ONLYOFFICE_ASSET_PATH Path to custom assets.  Health     \u0026ndash;debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9224.  Configuration file    So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/onlyoffice.yml, ${HOME}/.ocis/onlyoffice.yml or $(pwd)/config/onlyoffice.yml.\nUsage    The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formatted help output if you execute the binary via ocis-onlyoffice --help.\nServer    The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-onlyoffice server --help Health    The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-onlyoffice health --help Metrics    This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable ONLYOFFICE_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9224/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "},{"id":58,"href":"/extensions/glauth/","title":"GLAuth","parent":"Extensions","content":"This service provides a glauth based LDAP proxy for oCIS which can be used by clients or other extensions. It allows applications relying on LDAP to access the accounts stored in the oCIS accounts service. It can be used to make firewalls or identity providers aware of all users, including guest accounts.\nWe are using it to make eos aware of all accounts so the native ACLs can be used to persist share information in the storage.\n"},{"id":59,"href":"/extensions/graph/","title":"Graph","parent":"Extensions","content":"This service provides a simple graph world API which can be used by clients or other extensions.\n"},{"id":60,"href":"/extensions/graph-explorer/","title":"Graph-Explorer","parent":"Extensions","content":"This service embeds Graph-Explorer to provide a UI for ownCloud Infinite Scale.\n"},{"id":61,"href":"/extensions/ocs/","title":"Ocs","parent":"Extensions","content":"This service provides the OCS API which is required by some ownCloud clients.\n"},{"id":62,"href":"/extensions/onlyoffice/","title":"OnlyOffice","parent":"Extensions","content":"This service enables users open documents, spreadsheets and presentations in the OnlyOffice app installed in ownCloud 10.\n"},{"id":63,"href":"/extensions/web/","title":"ownCloud Web","parent":"Extensions","content":"This service embeds ownCloud Web to provide a UI for ownCloud Infinite Scale.\n"},{"id":64,"href":"/extensions/settings/","title":"Settings","parent":"Extensions","content":"Abstract    When using oCIS, the requirement to store settings arises. This extension provides functionality for other extensions to register new settings within oCIS. It is responsible for storing the respective settings values as well.\nFor ease of use, this extension provides an ocis-web extension which allows users to change their settings values. Please refer to the ocis-web extension docs for running ocis-web extensions.\n  graph TD subgraph ow[ocis-web] ows[ocis-web-settings] owc[ocis-web-core] end ows ---|\"listSettingsBundles(),\nsaveSettingsValue(value)\"| os[ocis-settings] owc ---|\"listSettingsValues()\"| sdk[oC SDK] sdk --- sdks{ocis-settings\navailable?} sdks ---|\"yes\"| os sdks ---|\"no\"| defaults[Use set of\ndefault values] oa[oCIS extensions\ne.g. ocis-accounts] ---|\"saveSettingsBundle(bundle)\"| os  The diagram shows how the settings service integrates into oCIS:\nSettings management:\n oCIS extensions can register settings bundles with the ocis-settings service. The settings frontend can be plugged into ocis-web, showing forms for changing settings values as a user. The forms are generated from the registered settings bundles.  Settings usage:\n Extensions can query ocis-settings for settings values of a user. The ownCloud SDK, used as a data abstraction layer for ocis-web, will query ocis-settings for settings values of a user, if it\u0026rsquo;s available. The SDK uses sensible defaults when ocis-settings is not part of the setup.  For compatibility with ownCloud 10, a migration of ownCloud 10 settings into the storage of ocis-settings will be available.\n"},{"id":65,"href":"/extensions/storage/","title":"Storage","parent":"Extensions","content":"Abstract    This service provides an oCIS extension that wraps reva and adds an opinionated configuration to it.\nArchitecture Overview    The below diagram shows the oCIS services and the contained reva services within as dashed boxes. In general:\n A request comes in at the proxy and is authenticated using OIDC. It is forwarded to the oCIS frontend which handles ocs and ocdav requests by talking to the reva gateway using the CS3 API. The gateway acts as a facade to the actual CS3 services: storage providers, user providers, group providers and sharing providers.      proxy     proxy     gateway     gateway     gateway     gateway     authregistry     authregistry     storageregistry     storageregistry     storage users     storage users     storageprovider     storageprovider     dataprovider     dataprovider     storage home     storage home     storageprovider     storageprovider     dataprovider     dataprovider     storage public link     storage public link     publicstorageprovider     publicstorageprovider     authprovider  publicshares     authprovider...     storage metadata     storage metadata     storageprovider     storageprovider     dataprovider     dataprovider     sharing     sharing     usershareprovider     usershareprovider     publicshareprovider     publicshareprovider     users     users     userprovider     userprovider     groups     groups     groupprovider     groupprovider     authbasic     authbasic     authprovider     authprovider     authbearer     authbearer     authprovider     authprovider     accounts     accounts     frontend     frontend     datagateway     datagateway     ocdav     ocdav     ocs     ocs     ocis     ocis     reva     reva     deprecated     deprec...      Viewer does not support full SVG 1.1      The dashed lines in the diagram indicate requests that are made to authenticate requests or lookup the storage provider:\n After authenticating a request, the proxy may either use the CS3 userprovider or the accounts service to fetch the user information that will be minted into the x-access-token. The gateway will verify the JWT signature of the x-access-token or try to authenticate the request itself, e.g. using a public link token.  The bottom part is lighter because we will deprecate it in favor of using only the CS3 user and group providers after moving some account functionality into reva and glauth. The metadata storage is not registered in the reva gateway to seperate metadata necessary for running the service from data that is being served directly.  Endpoints and references    In order to reason about the request flow, two aspects in the architecture need to be understood well:\n What kind of namespaces are presented at the different WebDAV and CS3 endpoints? What kind of resource references are exposed or required: path or id based?  "},{"id":66,"href":"/extensions/store/","title":"Store","parent":"Extensions","content":"This service provides \u0026hellip;\n"},{"id":67,"href":"/extensions/thumbnails/","title":"Thumbnails","parent":"Extensions","content":"This service provides an ocis extensions which generates thumbnails for image files.\n"},{"id":68,"href":"/extensions/webdav/","title":"WebDaV","parent":"Extensions","content":"This service provides the WebDAV API which is required by some ownCloud clients.\n"},{"id":69,"href":"/extensions/idp/theming/","title":"Theming","parent":"IDP","content":"    Intro Customizing assets  Static assets CSS Containers  What pages to theme   Components Images Locales   Building assets     Intro    Our default IDP UI is built with the LibreGraph Connect React app. Even though this app comes already with a simple theming options, we have compiled our own edited version of the app with more advanced changes than the default theming offers. Because of that, it is not possible at the moment to do any kind of easy theming and including custom theme means again compiling custom assets.\nCustomizing assets    Depending on what changes you wish to do with the theme, there are several files you can edit. All of them are located in the idp/ui folder.\nStatic assets    If you wish to add static assets like images, CSS, etc., you can add them to idp/ui/public/static. The public folder also contains the index.html file which can be adjusted to your needs.\nCSS    LibreGraph Connect is built with kpop, a collection of React UI components. To include any custom styles on top of that collection, you can define them in the idp/ui/src/app.css file. These rules will take precedence over the kpop.\nContainers    Layouts of all pages are located in the idp/ui/src/containers folder. By editing any of files in that folder, you can do any kind of changes in the layout and create advanced themes. It is, however, important to be careful when touching this code as it imports also actions which are responsible for the login flow.\nWhat pages to theme     Login  Login - login form used to authenticate the users Consent - consent page used to authorise apps for already signed in users Chooseaccount - page with a list of accounts to choose from   Goodbye  Goodbyescreen - goodbye message displayed to users after they signed out   Welcome  Welcomescreen - welcome message displayed to users after they signed in    Components    idp/ui/src/components folder contains all custom components which are then imported into containers.\nImages    Every image placed in idp/ui/src/images can be directly import into components or containers and will be optimized when compiling assets.\nLocales    If you need to edit or add new locales, you can do so with json files in the idp/ui/src/locales folder. If adding new locale, make sure to add it also in the index.js file in the same folder.\nBuilding assets    In order to build all assets, run yarn build in the idp folder. This script will compile all assets and output them into idp/assets folder.\nAt this point, you have two possible ways how to deploy your new theme:\n run make generate in the root folder of your oCIS clone and generate the new assets start the IDP service directly with custom assets by specifying the env var IDP_ASSET_PATH  "},{"id":70,"href":"/ocis/deployment/ocis_hello/","title":"oCIS with Hello extension","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy oCIS Hello extension runs beside the main oCIS stack and providing the Hello functionality Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists of 3 containers. One of them is Traefik, a proxy which is terminating SSL and forwards the requests to oCIS in the internal docker network.\nThe next container is oCIS itself in a configuration like the oCIS with Traefik example, except that for this example a custom proxy and web UI configuration is used to enable the oCIS Hello extension.\nThe oCIS Hello extension is running in another container and enables you to use its' functionality from within ownCloud Web.\nServer Deployment    Requirements     Linux server with docker and docker-compose installed two domains set up and pointing to your server  ocis.* for serving oCIS traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik      Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_hello\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= # JWT secret which is used for uploads to create transfer tokens. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;replace-me-with-a-transfer-secret\u0026#34; OCIS_TRANSFER_SECRET= ### oCIS Hello settings ### # oCIS Hello version. Defaults to \u0026#34;latest\u0026#34; OCIS_HELLO_DOCKER_TAG= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default oCIS will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nBy default the oCIS Hello extension will be started in the latest version. If you want to start a specific version of oCIS Hello set the version to OCIS_HELLO_DOCKER_TAG=. Available versions can be found on Docker Hub.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and are able to switch to the Hello extension by using the application switcher on the top right corner of ownCloud Web.\n  Local setup    For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.testt After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You are now able to switch to the Hello extension by using the application switcher on the top right corner of ownCloud Web.\n"},{"id":71,"href":"/ocis/deployment/ocis_keycloak/","title":"oCIS with Keycloak","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists 4 containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.\nKeykloak add two containers: Keycloak itself and a PostgreSQL as database. Keycloak will be configured as oCIS' IDP instead of the internal IDP LibreGraph Connect\nThe other container is oCIS itself running all extensions in one container. In this example oCIS uses oCIS storage driver\nServer Deployment    Requirements     Linux server with docker and docker-compose installed Three domains set up and pointing to your server  ocis.* for serving oCIS keycloak.* for serving Keycloak traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik      Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_keycloak\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # ownCloud Web openid connect client id. Defaults to \u0026#34;ocis-web\u0026#34; OCIS_OIDC_CLIENT_ID= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= # JWT secret which is used for uploads to create transfer tokens. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;replace-me-with-a-transfer-secret\u0026#34; OCIS_TRANSFER_SECRET= ### Keycloak ### # Domain of Keycloak, where you can find the management and authentication frontend. Defaults to \u0026#34;keycloak.owncloud.test\u0026#34; KEYCLOAK_DOMAIN= # Realm which to be used with oCIS. Defaults to \u0026#34;oCIS\u0026#34; KEYCLOAK_REALM= # Admin user login name. Defaults to \u0026#34;admin\u0026#34; KEYCLOAK_ADMIN_USER= # Admin user login password. Defaults to \u0026#34;admin\u0026#34; KEYCLOAK_ADMIN_PASSWORD= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default oCIS will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nIf you want to change the OIDC client id of th ownCloud Web frontend, you can do this by setting the name to OCIS_OIDC_CLIENT_ID=.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nSet your domain for the Keycloak administration panel and authentication endpoints to KEYCLOAK_DOMAIN= eg. KEYCLOAK_DOMAIN=keycloak.owncloud.test.\nChanging the used Keycloak realm can be done by setting KEYCLOAK_REALM=. This defaults to the oCIS realm KEYCLOAK_REALM=oCIS. The oCIS realm will be automatically imported on startup and includes our demo users.\nYou probably should secure your Keycloak admin account by setting KEYCLOAK_ADMIN_USER= and KEYCLOAK_ADMIN_PASSWORD= to values other than admin.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS, Keycloak and Traefik dashboard on your configured domains\n  Local setup    For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test 127.0.0.1 keycloak.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://keycloak.owncloud.test in your browser and accept the invalid certificate warning.\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You now can login to oCIS with the demo users.\n"},{"id":72,"href":"/ocis/deployment/ocis_s3/","title":"oCIS with S3 storage backend (MinIO)","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy MinIO as S3 compatible storage provider oCIS is configured to use S3 as user storage provider Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists 3 containers. One of them is Traefik, a proxy which is terminating SSL and forwards the requests to oCIS in the internal docker network.\nThe next container is oCIS itself in a configuration like the oCIS with Traefik example, except that it will use S3 as user storage.\nThe last container is MinIO, providing a S3 compatible API, where oCIS will store its' data.\nServer Deployment    Requirements     Linux server with docker and docker-compose installed Three domains set up and pointing to your server  ocis.* for serving oCIS minio.* for accessing the MinIO S3 bucket in the browser traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik      Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_s3\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= # JWT secret which is used for uploads to create transfer tokens. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;replace-me-with-a-transfer-secret\u0026#34; OCIS_TRANSFER_SECRET= ### MINIO / S3 settings ### # Domain of MinIO where the Web UI is accessible. Defaults to \u0026#34;minio.owncloud.test\u0026#34;. MINIO_DOMAIN= # S3 bucket name, where oCIS stores its data in. Defaults to \u0026#34;ocis-bucket\u0026#34;. MINIO_BUCKET= # S3 bucket access key, which oCIS uses to authenticate. Defaults to \u0026#34;ocis\u0026#34;. MINIO_ACCESS_KEY= # S3 bucket access key secret, which oCIS uses to authenticate. Defaults to \u0026#34;ocis-secret-key\u0026#34;. MINIO_SECRET_KEY= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default oCIS will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nSet your domain for the MinIO frontend in MINIO_DOMAIN=, eg. MINIO_DOMAIN=minio.owncloud.test. If you are using other S3-compatible providers you need to configure the respective endpoint here.\nIf you like you can change the default name of the S3 bucket by setting MINIO_BUCKET= to a different value.\nYou also must override the S3 bucket credentials in MINIO_ACCESS_KEY and MINIO_SECRET_KEY in order to secure your MinIO instance. Choose some random strings eg. from the output of openssl rand -base64 32.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and are able to use it just normally. If you log into the web UI of MinIO, you will see blobs of files you uploaded.\n  Local setup    For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test 127.0.0.1 minio.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You now can use oCIS normally and should now upload a file. Open https://minio.owncloud.test in your browser and accept the invalid certificate warning, after that you will see blobs of files you have uploaded to oCIS.\n"},{"id":73,"href":"/ocis/deployment/ocis_traefik/","title":"oCIS with Traefik","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS running behind Traefik as reverse proxy Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists of two containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.\nThe other one is oCIS itself running all extensions in one container. In this example oCIS uses its internal IDP LibreGraph Connect and the oCIS storage driver\nServer Deployment    Requirements     Linux server with docker and docker-compose installed Two domains set up and pointing to your server  ocis.* for serving oCIS traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik      Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_traefik\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= # JWT secret which is used for uploads to create transfer tokens. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;replace-me-with-a-transfer-secret\u0026#34; OCIS_TRANSFER_SECRET= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default ocis will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and Traefik dashboard on your configured domains\n  Local setup    For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You now can login to oCIS with the default users, which also can be found here: Getting started\n"},{"id":74,"href":"/ocis/deployment/ocis_wopi/","title":"oCIS with WOPI server","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview     oCIS, Wopi server and Collabora running behind Traefik as reverse proxy Collabora enables you to edit text documents in your browser Wopi server acts as a bridge to make the oCIS storage accessible to Collabora Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists 5 containers. One of them is Traefik, a proxy which is terminating SSL and forwards the requests to oCIS in the internal docker network.\nThe next container is oCIS itself in a configuration like the oCIS with Traefik example, except that for this example a custom proxy and web UI configuration is used to enable the oCIS Wopi extension.\nThe oCIS WOPI server extension is running in another container and enables you to open files in Collabora from within ownCloud Web.\nThe last two containers are the WOPI server and Collabora.\nServer Deployment    Requirements     Linux server with docker and docker-compose installed Three domains set up and pointing to your server  ocis.* for serving oCIS collabora.* for serving Collabora wopiserver.* for serving the WOPI server traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik      Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployments/examples/ocis_wopi\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= # JWT secret which is used for uploads to create transfer tokens. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;replace-me-with-a-transfer-secret\u0026#34; OCIS_TRANSFER_SECRET= ### Wopi server settings ### # oCIS Wopi server version. Defaults to \u0026#34;latest\u0026#34; OCIS_WOPISERVER_DOCKER_TAG= # cs3org wopi server version. Defaults to \u0026#34;latest\u0026#34; CS3ORG_WOPISERVER_DOCKER_TAG= # cs3org wopi server domain. Defaults to \u0026#34;wopiserver.owncloud.test\u0026#34; WOPISERVER_DOMAIN= # JWT secret which is used for the documents to be request by the Wopi client from the cs3org Wopi server. Must be change in order to have a secure Wopi server. Defaults to \u0026#34;LoremIpsum567\u0026#34; WOPI_JWT_SECRET= # JWT secret which is used for the documents to be request by the Wopi client from the cs3org Wopi server. Must be change in order to have a secure Wopi server. Defaults to \u0026#34;LoremIpsum123\u0026#34; WOPI_IOP_SECRET= ### Collabora settings ### # Domain of Collabora, where you can find the frontend. Defaults to \u0026#34;collabora.owncloud.test\u0026#34; COLLABORA_DOMAIN= # Admin user for Collabora. Defaults to blank, provide one to enable access COLLABORA_ADMIN_USER= # Admin password for COllabora. Defaults to blank, provide one to enable access COLLABORA_ADMIN_PASSWORD= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default oCIS will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nBy default the oCIS WOPI server extension will be started in the latest version. If you want to start a specific version of oCIS WOPI server set the version to OCIS_WOPISERVER_DOCKER_TAG=. Available versions can be found on Docker Hub.\nBy default the CS3Org WOPI server will also be started in the latest version. If you want to start a specific version of it, you can set the version to CS3ORG_WOPISERVER_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the CS3Org WOPI server in WOPISERVER_DOMAIN=, where Collabora can download the files.\nYou also must override the default WOPI JWT secret and the WOPI IOP secret, in order to have a secure setup. Do this by setting WOPI_JWT_SECRET and WOPI_IOP_SECRET to a long and random string.\nNow it\u0026rsquo;s time to set up Collabora and you need to configure the Domain of Collabora in COLLABORA_DOMAIN=.\nIf you want to use the Collabora admin panel you need to set user name and passwort for in COLLABORA_ADMIN_USER= and COLLABORA_ADMIN_PASSWORD=.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and are able to open an office document in your browser.\n  Local setup    For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test 127.0.0.1 collabora.owncloud.test 127.0.0.1 wopiserver.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://collabora.owncloud.test and https://wopiserver.owncloud.test in your browser and accept the invalid certificate warning.\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You are now able to open an office document in your browser.\n"},{"id":75,"href":"/clients/web/releasing/","title":"Releasing","parent":"ownCloud Web","content":"    Releasing ownCloud Web  Versioning Release Guide Next steps       Releasing ownCloud Web    OwnCloud Web can be hosted standalone, as ownCloud 10 app or as part of oCIS.\nVersioning    We follow the Semantic Versioning scheme. Therefore, each change is of one of the possible types: Bugfix, Change, Enhancement, Security.\nThe highest type before a new release determines the version update number, so if it\u0026rsquo;s only Bugfix and Security changes the next release will be a PATCH version bump, if there\u0026rsquo;s at least one Enhancement within the changes this leads to a MINOR version bump, while Change type changes make for a new MAJOR release version.\nRelease Guide     Create a branch release-$version in https://github.com/owncloud/web. Create a folder in changelog for the release version and date mkdir $major.$minor.$patchVersion_YYYY-MM-DD. Move all changelog items from the changelog/unreleased/ folder to the $major.$minor.$patchVersion_YYYY-MM-DD folder. Update the version in packages/web-integration-oc10/appinfo/info.xml Update the version in package.json Commit your changes. After merging, wait for the CI to run on the merge commit. Go to the Releases section and click \u0026ldquo;Draft a new Release\u0026rdquo;. Use v$major.$minor.$patch as a tag (the v prefix is important) and publish it. The tag and the Release artifacts will be created automatically.  Next steps     The ownCloud 10 app gets created as part of the release pipeline and will be part of the release assets. For oCIS the release assets need to be updated. For that we have prepared a separate ocis-web release guide.  "},{"id":76,"href":"/ocis/flow-docs/","title":"Flow documentation","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":77,"href":"/ocis/deployment/bridge/","title":"Bridge","parent":"Deployment","content":"    Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-web  Get it! Run it!   Start ocis-idp  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis. The idea is to have a reverse proxy infront of ownCloud 10 that will forward requests to ownCloud 10 or ocis-reva, depending on the migration status of the logged in user.\nThis document is a work in progress of the current setup.\nCurrent status    Using ocis and the ownCloud 10 openidconnect and graphapi plugins it is possible today to introduce openid connect based authentication to existing instances. That is a prerequisite for migrating to ocis.\nHow to do it    Install the owncloud 10 graphapi app    In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/graphapi.git $ cd graphapi $ composer install Enable the graphapi app    occ a:e graphapi No configuration necessary. You can test with curl:\n$ curl https://cloud.example.com/index.php/apps/graphapi/v1.0/users -u admin | jq Enter host password for user \u0026#39;admin\u0026#39;: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 694 100 694 0 0 4283 0 --:--:-- --:--:-- --:--:-- 4283 { \u0026#34;value\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mail\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Demo\u0026#34;, \u0026#34;mail\u0026#34;: null }, ... ], \u0026#34;@odata.nextLink\u0026#34;: \u0026#34;https://oc.butonic.de/apps/graphapi/v1.0/users?$top=10\u0026amp;$skip=10\u0026#34; }  Note: The MS graph api actually asks for Bearer auth, but in order to check users passwords during an LDAP bind we are exploiting ownClouds authentication implementation that will grant access when Basic auth is used. An LDAP Bind you may ask? Read on!\n Start ocis-glauth    We are going to use the above ownCloud 10 and graphapi app to turn it into the datastore for an LDAP proxy.\nGrab it!    In an ocis folder\n$ git clone git@github.com:owncloud/ocis-glauth.git $ cd ocis-glauth $ make This should give you a bin/ocis-glauth binary. Try listing the help with bin/ocis-glauth --help.\nRun it!    You need to point ocis-glauth to your owncloud domain:\n$ bin/ocis-glauth --log-level debug server --backend-datastore owncloud --backend-server https://cloud.example.com --backend-basedn dc=example,dc=com --log-level debug is only used to generate more verbose output --backend-datastore owncloud switches to tho owncloud datastore --backend-server https://cloud.example.com is the url to an ownCloud instance with an enabled graphapi app --backend-basedn dc=example,dc=com is used to construct the LDAP dn. The user admin will become cn=admin,dc=example,dc=com.\nCheck it is up and running    You should now be able to list accounts from your ownCloud 10 oc_accounts table using:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixaccount)\u0026#39; Groups should work as well:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixgroup)\u0026#39;  Note: This is currently a readonly implementation and minimal to the usecase of authenticating users with idp.\n Start ocis-web    Get it!    In an ocis folder\n$ git clone git@github.com:owncloud/ocis.git $ cd web $ make This should give you a bin/web binary. Try listing the help with bin/web --help.\nRun it!    Point ocis-web to your owncloud domain and tell it where to find the openid connect issuing authority:\n$ bin/web server --web-config-server https://cloud.example.com --oidc-authority https://192.168.1.100:9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration --oidc-client-id ocis ocis-web needs to know\n --web-config-server https://cloud.example.com is ownCloud url with webdav and ocs endpoints (oc10 or ocis) --oidc-authority https://192.168.1.100:9130 the openid connect issuing authority, in our case oidc-idp, running on port 9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration the openid connect configuration endpoint, typically the issuer host with .well-known/openid-configuration, but there are cases when another endpoint is used, eg. ping identity provides multiple endpoints to separate domains --oidc-client-id ocis the client id we will register later with ocis-idp in the identifier-registration.yaml  Start ocis-idp    Get it!    In an ocis folder\n$ git clone git@github.com:owncloud/ocis-idp.git $ cd ocis-idp $ make This should give you a bin/ocis-idp binary. Try listing the help with bin/ocis-idp --help.\nSet environment variables    Konnectd needs environment variables to configure the LDAP server:\nexport LDAP_URI=ldap://192.168.1.100:9125 export LDAP_BINDDN=\u0026#34;cn=admin,dc=example,dc=com\u0026#34; export LDAP_BINDPW=\u0026#34;its-a-secret\u0026#34; export LDAP_BASEDN=\u0026#34;dc=example,dc=com\u0026#34; export LDAP_SCOPE=sub export LDAP_LOGIN_ATTRIBUTE=uid export LDAP_EMAIL_ATTRIBUTE=mail export LDAP_NAME_ATTRIBUTE=givenName export LDAP_UUID_ATTRIBUTE=uid export LDAP_UUID_ATTRIBUTE_TYPE=text export LDAP_FILTER=\u0026#34;(objectClass=posixaccount)\u0026#34; Don\u0026rsquo;t forget to use an existing user and the correct password.\nConfigure clients    Now we need to configure a client we can later use to configure the ownCloud 10 openidconnect app. In the assets/identifier-registration.yaml have:\n---# OpenID Connect client registry.clients:- id:ocisname:ownCloud Infinite Scaleapplication_type:webredirect_uris:- https://cloud.example.com/apps/openidconnect/redirect- http://localhost:9100/oidc-callback.html- http://localhost:9100- http://localhost:9100/Replace cloud.example.com in the redirect URI with your ownCloud 10 host and port. Replace localhost:9100 in the redirect URIs with your ocis-web host and port.\nRun it!    You can now bring up ocis-idp with:\n$ bin/ocis-idp server --iss https://192.168.1.100:9130 --identifier-registration-conf assets/identifier-registration.yaml --signing-kid gen1-2020-02-27 ocis-idp needs to know\n --iss https://192.168.1.100:9130 the issuer, which must be a reachable https endpoint. For testing an ip works. HTTPS is NOT optional. This url is exposed in the https://192.168.1.100:9130/.well-known/openid-configuration endpoint and clients need to be able to connect to it --identifier-registration-conf assets/identifier-registration.yaml the identifier-registration.yaml you created --signing-kid gen1-2020-02-27 a signature key id, otherwise the jwks key has no name, which might cause problems with clients. a random key is ok, but it should change when the actual signing key changes.  Check it is up and running     Try getting the configuration:  $ curl https://192.168.1.100:9130/.well-known/openid-configuration Check if the login works at https://192.168.1.100:9130/signin/v1/identifier   Note: If you later get a Unable to find a key for (algorithm, kid):PS256, ) Error make sure you did set a --signing-kid when starting ocis-idp by checking it is present in https://192.168.1.100:9130/konnect/v1/jwks.json\n Patch owncloud    While the UserSession in ownCloud 10 is currently used to test all available IAuthModule implementations, it immediately logs out the user when an exception occurs. However, existing owncloud 10 instances use the oauth2 app to create Bearer tokens for mobile and desktop clients.\nTo give the openidconnect app a chance to verify the tokens we need to change the code a bit. See https://github.com/owncloud/core/pull/37043 for a possible solution.\n Note: The PR is hot \u0026hellip; as in younger than this list of steps. And it messes with authentication. Use with caution.\n Install the owncloud 10 openidconnect app    In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/openidconnect.git $ cd openidconnect $ composer install After enabling the app configure it in config/oidc.config.php\n$CONFIG = [ \u0026#39;openid-connect\u0026#39; =\u0026gt; [ \u0026#39;provider-url\u0026#39; =\u0026gt; \u0026#39;https://192.168.1.100:9130\u0026#39;, \u0026#39;client-id\u0026#39; =\u0026gt; \u0026#39;ocis\u0026#39;, \u0026#39;loginButtonName\u0026#39; =\u0026gt; \u0026#39;OpenId Connect @ Konnectd\u0026#39;, ], \u0026#39;debug\u0026#39; =\u0026gt; true, // if using self signed certificates  // allow the different domains access to the ocs and webdav endpoints:  \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [ \u0026#39;https://cloud.example.com\u0026#39;, \u0026#39;http://localhost:9100\u0026#39;, ], ]; In the above configuration replace\n provider-url with the URL to your ocis-idp issuer https://cloud.example.com with the URL to your ownCloud 10 instance http://localhost:9100 with the URL to your ownCloud Web instance   Note: By default the openidconnect app will use the email of the user to match the user from the oidc userinfo endpoint with the ownCloud account. So make sure your users have a unique primary email.\n Next steps    Aside from the above todos these are the next steps\n tie it all together behind ocis-proxy create an ocis bridge command that runs all the ocis services in one step with a properly preconfigured ocis-idp identifier-registration.yaml file for ownCloud Web and the owncloud 10 openidconnect app, as well as a randomized --signing-kid.  "},{"id":78,"href":"/ocis/development/build/","title":"Build","parent":"Development","content":"    Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image     Build requirements    see Development - Getting Started\nGet the sources    git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary    You only need to run following command if you have changed protobuf definitions or the frontend part in one of the extensions. Run the command in the root directory of the repository. Otherwise you can skip this step and proceed to build the oCIS binary. This will usually modify multiple embed.go files because we embed the frontend build output in these embed.go files and a timestamp will be updated and also minor differences are expected between different Node.js versions.\nmake generate The next step is to build the actual oCIS binary. Therefore you need to navigate to the subdirectory ocis and start the build process.\ncd ocis make build After the build process finished, you can find the binary within the bin/ folder (in ocis/bin relative to the oCIS repository root folder).\nTry to run it: ./bin/ocis h\nBuild a local oCIS docker image    If you are developing and want to run your local changes in a docker or docker-compose setup, you have to build an image locally.\nTherefore run following commands in the root of the oCIS repository:\ndocker build -t owncloud/ocis:dev . Then you can test as usual via\ndocker run --rm -ti owncloud/ocis:dev "},{"id":79,"href":"/ocis/storage-backends/eos/","title":"EOS","parent":"Storage backends","content":"    Docker dev environment for eos storage  1. Start eos \u0026amp; ocis containers 2. LDAP support 3. Home storage 4. Users storage 5. Metadata storage 6. Accounts service   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       oCIS can be configured to run on top of eos. While the eos documentation does cover a lot of topics, it leaves out some details that you may have to either pull from various docker containers, the forums or even the source itself.\nThis document is a work in progress of the current setup.\nDocker dev environment for eos storage    We begin with the docker-compose.yml found in https://github.com/owncloud/ocis/tree/master/ocis/ and switch it to eos-storage.\n1. Start eos \u0026amp; ocis containers    Start the eos cluster and ocis via the compose stack.\ndocker-compose up -d The first time the ocis container starts up, it will compile ocis from scratch which can take a while. To follow progress, run docker-compose logs -f --tail=10 ocis  2. LDAP support    Configure the OS to resolve users and groups using ldap\ndocker-compose exec -d ocis /start-ldap Check that the OS in the ocis container can now resolve einstein or the other demo users\n$ docker-compose exec ocis id einstein uid=20000(einstein) gid=30000(users) groups=30000(users),30001(sailing-lovers),30002(violin-haters),30007(physics-lovers) If the user is not found at first you might need to wait a few more minutes in case the ocis container is still compiling.  We also need to restart the storage-userprovider service, so it picks up the changed environment. Without a restart it is not able to resolve users from LDAP.\ndocker-compose exec ocis ./bin/ocis kill storage-userprovider docker-compose exec ocis ./bin/ocis run storage-userprovider 3. Home storage    Kill the home storage. By default it uses the ocis storage driver. We need to switch it to the eoshome driver:\ndocker-compose exec ocis ./bin/ocis kill storage-home docker-compose exec -e STORAGE_HOME_DRIVER=eoshome ocis ./bin/ocis run storage-home 4. Users storage    Kill the users storage. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill storage-users docker-compose exec -e STORAGE_USERS_DRIVER=eos ocis ./bin/ocis run storage-users 5. Metadata storage    First we need to create the metadata root in eos and set an owner:\ndocker-compose exec ocis eos mkdir -p /eos/dockertest/ocis/metadata docker-compose exec ocis eos chown 2:2 /eos/dockertest/ocis/metadata The uid and gid 2 are referencing the user daemon inside the ocis container. That user is also configured when restarting the accounts service later. For production systems you should create a dedicated user for the metadata storage.  Kill the metadata storage. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill storage-metadata docker-compose exec -e STORAGE_METADATA_DRIVER=eos -e STORAGE_METADATA_ROOT=/eos/dockertest/ocis/metadata ocis ./bin/ocis run storage-metadata 6. Accounts service    Kill the accounts service. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill accounts docker-compose exec -e ACCOUNTS_SERVICE_USER_USERNAME=daemon -e ACCOUNTS_SERVICE_USER_UID=2 -e ACCOUNTS_SERVICE_USER_GID=2 ocis ./bin/ocis run accounts Verification    Login with einstein / relativity, upload a file to einsteins home and verify the file is there using\ndocker-compose exec ocis eos ls -l /eos/dockertest/reva/users/4/4c510ada-c86b-4815-8820-42cdf82c3d51/ -rw-r--r-- 1 einstein users 10 Jul 1 15:24 newfile.txt If the problem persists, please check the troubleshooting section about uploads.\nFurther exploration    EOS has a built in shell that you can enter using\n$ docker-compose exec mgm-master eos # --------------------------------------------------------------------------- # EOS Copyright (C) 2011-2019 CERN/Switzerland # This program comes with ABSOLUTELY NO WARRANTY; for details type `license\u0026#39;. # This is free software, and you are welcome to redistribute it # under certain conditions; type `license\u0026#39; for details. # --------------------------------------------------------------------------- EOS_INSTANCE=eostest EOS_SERVER_VERSION=4.6.5 EOS_SERVER_RELEASE=1 EOS_CLIENT_VERSION=4.6.5 EOS_CLIENT_RELEASE=1 EOS Console [root://localhost] |/\u0026gt; help access Access Interface accounting Accounting Interface acl Acl Interface archive Archive Interface attr Attribute Interface backup Backup Interface clear Clear the terminal cd Change directory chmod Mode Interface chown Chown Interface config Configuration System console Run Error Console cp Cp command debug Set debug level exit Exit from EOS console file File Handling fileinfo File Information find Find files/directories newfind Find files/directories (new implementation) fs File System configuration fsck File System Consistency Checking fuse Fuse Mounting fusex Fuse(x) Administration geosched Geoscheduler Interface group Group configuration health Health information about system help Display this text info Retrieve file or directory information inspector Interact with File Inspector io IO Interface json Toggle JSON output flag for stdout license Display Software License ls List a directory ln Create a symbolic link map Path mapping interface member Check Egroup membership mkdir Create a directory motd Message of the day mv Rename file or directory node Node configuration ns Namespace Interface pwd Print working directory quit Exit from EOS console quota Quota System configuration reconnect Forces a re-authentication of the shell recycle Recycle Bin Functionality rmdir Remove a directory rm Remove a file role Set the client role route Routing interface rtlog Get realtime log output from mgm \u0026amp; fst servers silent Toggle silent flag for stdout space Space configuration stagerrm Remove disk replicas of a file if it has tape replicas stat Run \u0026#39;stat\u0026#39; on a file or directory squash Run \u0026#39;squashfs\u0026#39; utility function test Run performance test timing Toggle timing flag for execution time measurement touch Touch a file token Token interface tracker Interact with File Tracker transfer Transfer Interface version Verbose client/server version vid Virtual ID System Configuration whoami Determine how we are mapped on server side who Statistics about connected users ? Synonym for \u0026#39;help\u0026#39; .q Exit from EOS console EOS Console [root://localhost] |/\u0026gt; But this is a different adventure. See the links at the top of this page for other sources of information on eos.\nCleaning up    To clean up and start completely from scratch, run docker-compose down -v. Then delete the local \u0026ldquo;bin\u0026rdquo; folder as root which contains the ocis binaries compiled by the \u0026ldquo;ocis\u0026rdquo; docker.\nTroubleshooting    Docker-compose exits right away    When running docker-compose up -d ocis exits right away.\nYou can check the error code using docker-compose ps and investigate further by running only ocis again using docker-compose up ocis (without -d so you can see what is going on in the foreground). One reason might be that the binary was already built but does not match the container env. Try running make clean before running docker-compose up ocis so it gets built inside the container.\nWhere are the logs ?    The ocis logs can be accessed using docker-compose logs ocis. Add -f for following.\nHow do I update a service in the ocis container?     docker-compose exec ocis make clean build to update the binary docker-compose exec ocis ./bin/ocis kill \u0026lt;service\u0026gt; to kill the service docker-compose exec ocis ./bin/ocis run \u0026lt;service\u0026gt; to start the service. Do not forget to set any env vars, eg. docker-compose exec -e STORAGE_HOME_DRIVER=eoshome -e STORAGE_DRIVER_EOS_LAYOUT=\u0026quot;{{substr 0 1 .Id.OpaqueId}}/{{.Id.OpaqueId}}\u0026quot; ocis ./bin/ocis run storage-home  Creation and upload of files does not work    If the upload did not work, please check the status of the eos space using the command docker-compose exec mgm-master eos fs ls. In case the default space appears as offline, run docker-compose exec mgm-master eos space set default on.\nUploading big files appears to hang    Please note that the uploads first go into the \u0026ldquo;ocis\u0026rdquo; docker and land in its \u0026ldquo;/tmp\u0026rdquo; folder, then gets copied over to the EOS docker using xrdcopy. This is why uploading first transfers all bytes and then seem to hang for a while during the final copy.\nRunning out of space quickly    The EOS dockers are configured with replication, so every file uploaded there will be replicated 4 times, so make sure there is enough physical space on disk when testing.\nAlso please note that older failed uploads might still be present in the \u0026ldquo;/tmp\u0026rdquo; directory of the \u0026ldquo;ocis\u0026rdquo; container.\n"},{"id":80,"href":"/extensions/onlyoffice/building/","title":"Building","parent":"OnlyOffice","content":"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis/onlyoffice.git cd ocis-onlyoffice All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend    make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/onlyoffice -h to see all available options.\n"},{"id":81,"href":"/extensions/storage/users/","title":"Users","parent":"Storage","content":"Demo driver    This is a simple user driver for testing. It contains three users:\neinstein:relativity marie:radioactivity richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:\nexport STORAGE_USERS_DRIVER=demo JSON driver    In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:\nexport STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples\nLDAP driver    This is the default user driver.\nIf the below defaults don\u0026rsquo;t match your environment change them accordingly:\nexport STORAGE_LDAP_HOSTNAME=localhost export STORAGE_LDAP_PORT=9126 export STORAGE_LDAP_BASE_DN=\u0026#39;dc=example,dc=org\u0026#39; export STORAGE_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export STORAGE_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export STORAGE_LDAP_BIND_DN=\u0026#39;cn=reva,ou=sysusers,dc=example,dc=org\u0026#39; export STORAGE_LDAP_BIND_PASSWORD=reva export STORAGE_LDAP_USER_SCHEMA_UID=uid export STORAGE_LDAP_USER_SCHEMA_MAIL=mail export STORAGE_LDAP_USER_SCHEMA_DISPLAYNAME=sn export STORAGE_LDAP_USER_SCHEMA_CN=cn Then restart the bin/storage users and bin/storage auth-basic services for the changes to take effect.\n"},{"id":82,"href":"/extensions/storage/storages/","title":"Storages","parent":"Storage","content":"Storage commands    storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.\nStorage providers    To manage the file tree oCIS uses storage providers that are accessing the underlying storage using a storage driver. The driver can be used to change the implementation of a storage aspect to better reflect the actual underlying storage capabilities. As an example a move operation on a POSIX filesystem (theoretically) is an atomic operation. When trying to implement a file tree on top of S3 there is no native move operation that can be used. A naive implementation might fall back on a COPY and DELETE. Some S3 implementations provide a COPY operation that uses an existing key as the source, so the file at least does not need to be reuploaded. In the worst case scenario, which is renaming a folder with hundreds of thousands of objects, a reupload for every file has to be made. Instead of hiding this complexity a better choice might be to disable renaming of files or at least folders on S3. There are however implementations of filesystems on top of S3 that store the tree metadata in dedicated objects or use a completely different persistence mechanism like a distributed key value store to implement the file tree aspect of a storage.\nWhile the storage provider is responsible for managing the tree, file up- and downloads are delegated to a dedicated data provider. See below.  Storage aspects    A lot of different storage technologies exist, ranging from general purpose file systems with POSIX semantics to software defined storage with multiple APIs. Choosing any of them is making a tradeoff decision. Or, if a storage technology is already in place it automatically predetermines the capabilities that can be made available. Not all storage systems are created equal.\nUnfortunately, no POSIX filesystem natively supports all storage aspects that ownCloud 10 requires:\nA hierarchical file tree    An important aspect of a filesystem is organizing files and directories in a file hierarchy, or tree. It allows you to create, move and delete nodes. Beside the name a node also has well known metadata like size and mtime that are persisted in the tree as well.\nFolders are not directories There is a difference between folder and directory: a directory is a file system concept. A folder is a metaphor for the concept of a physical file folder. There are also virtual folders or smart folders like the recent files folder which are no file system directories. So, every directory and every virtual folder is a folder, but not every folder is a directory. See the folder metaphor in wikipedia. Also see the activity history below.  Id based lookup    While traditionally nodes in the tree are reached by traversing the path the tree persistence should be prepared to look up a node by an id. Think of an inode in a POSIX filesystem. If this operation needs to be cached for performance reasons keep in mind that cache invalidation is hard and crawling all files to update the inode to path mapping takes O(n), not O(1).\nETag propagation    For the state based sync a client can discover changes by recursively descending the tree and comparing the ETag for every node. If the storage technology supports propagating ETag changes up the tree, only the root node of a tree needs to be checked to determine if a discovery needs to be started and which nodes need to be traversed. This allows using the storage technology itself to persist all metadata that is necessary for sync, without additional services or caches.\nSubtree size accounting    The tree can keep track of how many bytes are stored in a folder. Similar to ETag propagation a change in file size is propagated up the hierarchy.\nETag and Size propagation When propagating the ETag (mtime) and size changes up the tree the question is where to stop. If all changes need to be propagated to the root of a storage then the root or busy folders will become a hotspot. There are two things to keep in mind: 1. propagation only happens up to the root of a single space (a user private drive or a single group drive), 2. no cross storage propagation. The latter was used in oc10 to let clients detect when a file in a received shared folder changed. This functionality is moving to the storage registry which caches the ETag for every root so clients can discover if and which storage changed.  Rename    Depending on the underlying storage technology some operations may either be slow, up to a point where it makes more sense to disable them entirely. One example is a folder rename: on S3 a simple folder rename translates to a copy and delete operation for every child of the renamed folder. There is an exception though: this restriction only applies if the S3 storage is treated like a filesystem, where the keys are the path and the value is the file content. There are smarter ways to implement file systems on top of S3, but again: there is always a tradeoff.\nS3 has no rename Technically, S3 has no rename operation at all. By design, the location of the value is determined by the key, so it always has to do a copy and delete. Another example is the redis RENAME operation: while being specified as O(1) it executes an implicit DEL operation, so if the deleted key contains a very big value it may cause high latency\u0026hellip;  Arbitrary metadata persistence    In addition to well known metadata like name size and mtime, users might be able to add arbitrary metadata like tags, comments or dublin core. In POSIX filesystems this maps to extended attributes.\nGrant persistence    The CS3 API uses grants to describe access permissions. Storage systems have a wide range of permissions granularity and not all grants may be supported by every storage driver. POSIX ACLs for example have no expiry. If the storage system does not support certain grant properties, e.g. expiry, then the storage driver may choose to implement them in a different way. Expiries could be persisted in a different way and checked periodically to remove the grants. Again: every decision is a tradeoff.\nTrash persistence    After deleting a node the storage allows listing the deleted nodes and has an undo mechanism for them.\nVersions persistence    A user can restore a previous version of a file.\nSnapshots are not versions Modern POSIX filesystems support snapshotting of volumes. This is different from keeping track of versions to a file or folder, but might be another implementation strategy for a storage driver to allow users to restore content.  Activity History    The storage keeps an activity history, tracking the different actions that have been performed. This does not only include file changes but also metadata changes like renames and permission changes.\nStorage drivers    Reva currently has four storage driver implementations that can be used for storage providers an well as data providers.\nLocal Storage Driver    The minimal storage driver for a POSIX based filesystem. It literally supports none of the storage aspect other than basic file tree management. Sharing can - to a degree - be implemented using POSIX ACLs.\n tree provided by a POSIX filesystem  inefficient path by id lookup, currently uses the file path as id, so ids are not stable  can store a uuid in extended attributes and use a cache to look them up, similar to the ownCloud driver   no native ETag propagation, five options are available:  built in propagation (changes bypassing ocis are not picked up until a rescan) built in inotify (requires 48 bytes of RAM per file, needs to keep track of every file and folder) external inotify (same RAM requirement, but could be triggered by external tools, e.g. a workflow engine) kernel audit log (use the linux kernel audit to capture file events on the storage and offload them to a queue) fuse filesystem overlay   no subtree accounting, same options as for ETag propagation efficient rename arbitrary metadata using extended attributes   grant persistence  using POSIX ACLs  requires an LDAP server to make guest accounts available in the OS  oCIS has glauth which contains all users an existing LDAP could be used if guests ar provisioned in another way     using extended attributes to implement expiry or sharing that does not require OS level integration fuse filesystem overlay   no native trash  could use the The FreeDesktop.org Trash specification fuse filesystem overlay   no native versions, multiple options possible  git for folders rcs for single files rsnapshot for hourly / daily / weekly / monthly backups \u0026hellip; but this is not versioning as known from oc10 design new freedesktop spec, basically what is done in oc10 without the limitations or borrow ideas from the freedesktop trash spec fuse filesystem overlay    To provide the other storage aspects we plan to implement a FUSE overlay filesystem which will add the different aspects on top of local filesystems like ext4, btrfs or xfs. It should work on NFSv45 as well, although NFSv4 supports RichACLs and we will explore how to leverage them to implement sharing at a future date. The idea is to use the storages native capabilities to deliver the best user experience. But again: that means making the right tradeoffs.\nOwnCloud Storage Driver    This is the current default storage driver. While it implements the file tree (using redis, including id based lookup), ETag propagation, trash, versions and sharing (including expiry) using the data directory layout of ownCloud 10 it has known limitations that cannot be fixed without changing the actual layout on disk.\nTo setup it up properly in a distributed fashion, the storage-home and the storage-oc need to share the same underlying FS. Their \u0026ldquo;data\u0026rdquo; counterparts also need access to the same shared FS. For a simple docker-compose setup, you can create a volume which will be used by the \u0026ldquo;storage-storage-home\u0026rdquo;, \u0026ldquo;storage-storage-home-data\u0026rdquo;, \u0026ldquo;storage-storage-oc\u0026rdquo; and \u0026ldquo;storage-storage-oc-data\u0026rdquo; containers. Using the owncloud/ocis docker image, the volume would need to be hooked in the /var/tmp/ocis folder inside the containers.\n tree provided by a POSIX filesystem  file layout is mapped to the old ownCloud 10 layout  the root of tree for a user on disk is prefixed with /path/to/data/\u0026lt;username\u0026gt;/files/   efficient path by id lookup  all files and folders get assigned a uuid in the extended attributes when starting the storage provider it will walk all files to populate a redis kv store for uuid to path lookup slow to boot trees with lots of nodes   build in ETag propagation  ETags are calculated based on mtime mtime is propagated by the storage driver changes bypassing ocis are not picked up until a restart of the storage provider   no subtree accounting, same options as for local storage efficient rename  TODO update the kv store for path lookup, this is an O(n) operation   arbitrary metadata using extended attributes   grant persistence  using custom ACLs that are stored as extended attributes  a grant corresponds to one extended attribute of 40-100 bytes, effectively limiting the number of shares to ~100-40 extended attributes have varying limitations, based on the underlying filesystem  the linux kernel imposes a limit of 255bytes per name and 64KiB per value ext2/3/4: total bytes for all attributes of a file is limited to 4KiB (a filesystem block) xfs: limit of 64KiB per value btrfs: total bytes used for the name, value, and implementation overhead bytes 16KiB (the default filesystem nodesize value)     does not require OS level integration   built in trash  trashed files are moved to /path/to/data/\u0026lt;username\u0026gt;/files_trashbin/ trashed files are appended a timestamp .d\u0026lt;unixtime\u0026gt;, which breaks trashing of files that reach the filesystems specific name limit   built in versions  file versions are stored in /path/to/data/\u0026lt;username\u0026gt;/files_versions/ file versions are appended a timestamp .d\u0026lt;unixtime\u0026gt;, which breaks versioning of files that reach the filesystems specific name limit    EOS Storage Driver    The CERN eos storage has evolved with ownCloud and natively supports id based lookup, ETag propagation, subtree size accounting, sharing, trash and versions. To use it you need to change the default configuration of the storage storage-home command (or have a look at the Makefile ̀ eos-start` target):\nexport STORAGE_HOME_DRIVER=eos export STORAGE_DRIVER_EOS_NAMESPACE=/eos export STORAGE_DRIVER_EOS_MASTER_URL=\u0026#34;root://eos-mgm1.eoscluster.cern.ch:1094\u0026#34; export STORAGE_DRIVER_EOS_ENABLE_HOME=true export STORAGE_DRIVER_EOS_LAYOUT=\u0026#34;dockertest/{{.Username}}\u0026#34; Running it locally also requires the eos and xrootd binaries. Running it using make eos-start will use CentOS based containers that already have the necessary packages installed.\nPull requests to add explicit storage storage-(s3|custom|...) commands with working defaults are welcome.  S3 Storage Driver    A naive driver that treats the keys in an S3 capable storage as / delimited path names. While it does not support MOVE or ETag propagation it can be used to read and write files. Better integration with native capabilities like versioning is possible but depends on the Use Case. Several storage solutions that provide an S3 interface also support some form of notifications that can be used to implement ETag propagation.\nData Providers    Clients using the CS3 API use an InitiateFileDownload and ]InitiateUpload](https://cs3org.github.io/cs3apis/#cs3.storage.provider.v1beta1.InitiateFileUploadRequest) request at the storage gateway to obtain a URL endpoint that can be used to either GET the file content or upload content using the resumable tus.io protocol.\nThe data provider uses the same storage driver as the storage provider but can be scaled independently.\nThe dataprovider allows uploading the file to a quarantine area where further data analysis may happen before making the file accessible again. One use case for this is anti virus scanning for files coming from untrusted sources.\nFuture work    FUSE overlay filesystem    We are planning to further separate the concerns and use a local storage provider with a FUSE filesystem overlaying the actual POSIX storage that can be used to capture deletes and writes that might happen outside of ocis/reva.\nIt would allow us to extend the local storage driver with missing storage aspects while keeping a tree like filesystem that end users are used to see when sshing into the machine.\nUpload to Quarantine area    Antivirus scanning of random files uploaded from untrusted sources and executing metadata extraction or thumbnail generation should happen in a sandboxed system to prevent malicious users from gaining any information about the system. By spawning a new container with access to only the uploaded data we can further limit the attack surface.\n"},{"id":83,"href":"/ocis/development/testing/","title":"Testing","parent":"Development","content":"    Testing with test suite in docker  Run full test suite Run single feature test oCIS image to be tested (or: skip build and take existing image) Test log output Cleanup   Testing with test suite natively installed  Getting the tests Run ocis Run the acceptance tests use existing tests for BDD       For running tests in the test suite you have two options. You may go the easy way and just run the test suite in docker. But for some tasks you could also need to install the test suite natively, which requires a little bit more setup since PHP and some dependencies need to be installed.\nBoth ways to run tests with the test suites are described here.\nTesting with test suite in docker    Let\u0026rsquo;s see what is available. Invoke the following command from within the root of the oCIS repository.\nmake -C tests/acceptance/docker help Basically we have two sources for feature tests and test suites:\n oCIS feature test and test suites ownCloud feature tests and test suites  At the moment both can be applied to oCIS since the api of oCIS is designed to be compatible to ownCloud.\nSince we have to offer an migration path to existing users of ownCloud, you can use your existing ownCloud as storage backend for oCIS. As another storage backend we offer oCIS native storage, also called \u0026ldquo;oCIS\u0026rdquo;. This stores files directly on disk. Which storage backend is used is also reflected in the tests, there are always different tests for oCIS storage and ownCloud storage.\nYou can invoke two types of test suite runs:\n run a full test suite, which consists of multiple feature tests run a single feature test  Run full test suite    The names of the full test suite make targets have the same naming as in the CI pipeline.\nFor example make -C tests/acceptance/docker localApiTests-apiAccountsHashDifficulty-ocis runs the same tests as the localApiTests-apiAccountsHashDifficulty-ocis CI pipeline, which runs the oCIS test suite \u0026ldquo;apiAccountsHashDifficulty\u0026rdquo; against an oCIS with oCIS storage.\nFor example make -C tests/acceptance/docker Core-API-Tests-owncloud-storage-3runs the same tests as the Core-API-Tests-owncloud-storage-3 CI pipeline, which runs the third (out of ten) ownCloud test suite against an oCIS with owncloud storage.\nRun single feature test    The single feature tests can also be run against the different storage backends. Therefore multiple make targets with the schema test--feature-exists. For selecting a single feature test you have to add an additional BEHAT_FEATURE=... parameter when invoking the make command:\nmake -C tests/acceptance/docker test-ocis-feature-ocis BEHAT_FEATURE=\u0026#39;tests/acceptance/features/apiAccountsHashDifficulty/addUser.feature\u0026#39; This must be pointing to a valid feature definition.\noCIS image to be tested (or: skip build and take existing image)    By default the tests will be run against docker image built from your current working state of the oCIS repository. For some purposes it might also be handy to use a oCIS image from Docker Hub. Therefore you can provide the optional flag OCIS_IMAGE_TAG=... which must contain an available docker tag of the owncloud/ocis registry on Docker Hub (eg. \u0026lsquo;latest\u0026rsquo;).\nmake -C tests/acceptance/docker localApiTests-apiAccountsHashDifficulty-ocis OCIS_IMAGE_TAG=latest Test log output    While a test is running or when it is finished, you can attach to the logs generated by the tests.\nmake -C tests/acceptance/docker show-test-logs The log output is opened in less. You can navigate up and down with your cursors. By pressing \u0026ldquo;F\u0026rdquo; you can follow the latest line of the output.  Cleanup    During testing we start an redis and oCIS docker container. These will not be stopped automatically. You can stop them with:\nmake -C tests/acceptance/docker clean Testing with test suite natively installed    We are using the ownCloud 10 acceptance test suite against oCIS.\nGetting the tests    All you need to do to get the acceptance tests is check out the core repo:\ngit clone https://github.com/owncloud/core.git Run ocis    To start ocis:\nPROXY_ENABLE_BASIC_AUTH=true bin/ocis server PROXY_ENABLE_BASIC_AUTH will allow the acceptance tests to make requests against the provisioning api (and other endpoints) using basic auth.\nRun the acceptance tests    First we will need to clone the testing app in owncloud which contains the skeleton files required for running the tests. In the ownCloud 10 core clone the testing app with the following command:\ngit clone https://github.com/owncloud/testing apps/testing Then run the api acceptance tests with the following command from the root of the ownCloud 10 core repository:\nmake test-acceptance-api \\ TEST_SERVER_URL=https://localhost:9200 \\ TEST_OCIS=true \\ STORAGE_DRIVER=OCIS \\ SKELETON_DIR=apps/testing/data/apiSkeleton \\ BEHAT_FILTER_TAGS=\u0026#39;~@notToImplementOnOCIS\u0026amp;\u0026amp;~@toImplementOnOCIS\u0026#39; Make sure to adjust the settings TEST_SERVER_URL and OCIS_REVA_DATA_ROOT according to your environment.\nThis will run all tests that are relevant to oCIS.\nTo run a single test add BEHAT_FEATURE=\u0026lt;feature file\u0026gt;\nTo run tests with a different storage driver set STORAGE_DRIVER to the correct value. It can be set to OCIS or OWNCLOUD and uses OWNCLOUD as the default value.\nuse existing tests for BDD    As a lot of scenarios are written for oC10, we can use those tests for Behaviour driven development in ocis. Every scenario that does not work in oCIS with \u0026ldquo;owncloud\u0026rdquo; storage, is listed in tests/acceptance/expected-failures-on-OWNCLOUD-storage.md with a link to the related issue. Every scenario that does not work in oCIS with \u0026ldquo;ocis\u0026rdquo; storage, is listed in tests/acceptance/expected-failures-on-OCIS-storage.md with a link to the related issue.\nThose scenarios are run in the ordinary acceptance test pipeline in CI. The scenarios that fail are checked against the expected failures. If there are any differences then the CI pipeline fails. Similarly, scenarios that do not work in oCIS with EOS storage are listed in tests/acceptance/expected-failures-on-EOS-storage.md.\nIf you want to work on a specific issue\n  adjust the core commit id to the latest commit in core so that CI will run the latest test code and scenarios from core. For that change CORE_COMMITID in .drone.env:\n # The test runner source for API tests CORE_COMMITID=38c91e5cf5fc4ffdc0536ba1d147a2a618ef83b5 CORE_BRANCH=master    locally run each of the tests marked with that issue in the expected failures file.\nE.g.:\nmake test-acceptance-api \\ TEST_SERVER_URL=https://localhost:9200 \\ TEST_OCIS=true \\ STORAGE_DRIVER=OCIS \\ BEHAT_FEATURE=\u0026#39;tests/acceptance/features/apiComments/comments.feature:123\u0026#39;   the tests will fail, try to understand how and why they are failing\n  fix the code\n  go back to 2. and repeat till the tests are passing.\n  remove those tests from the expected failures file\n  make a PR that has the fixed code, and the relevant lines removed from the expected failures file.\n  "},{"id":84,"href":"/ocis/storage_registry_discovery/","title":"Storage Registry Discovery","parent":"oCIS - ownCloud Infinite Scale","content":"Introduction    In order for an oCIS client to access oCIS storage spaces for an End-User, the client needs to know where the oCIS instance is. oCIS uses WebFinger RFC7033 to locate the oCIS instance for an End-User.\nThis discovery is optional. If the client has another way of discovering the OpenID instance, e.g. when logging in with a username a static domain might be configured or the domain in the URL might be used.\nFor guest accounts that do not have an OIDC issuer or whose IdP is not part of a trusted federation clients may fall back to a local IdP.\nUser Input using E-Mail Address Syntax    To find the oCIS instance for the given user input in the form of an e-mail address joe@example.com, the WebFinger parameters are as follows:\n   WebFinger Parameter Value     resource acct:joe@example.com   host example.com   rel http://owncloud.com/specs/ocis/1.0/instance    Note that in this case, the acct: scheme is prepended to the identifier.\nThe client (relying party) would make the following WebFinger request to discover the oCIS instance location (with line wraps within lines for display purposes only):\nGET /.well-known/webfinger ?resource=acct%3Ajoe%40example.com \u0026amp;rel=http%3A%2F%2Fowncloud.com%2Fspecs%2Focis%2F1.0%2Finstance HTTP/1.1 Host: example.com HTTP/1.1 200 OK Content-Type: application/jrd+json { \u0026#34;subject\u0026#34;: \u0026#34;acct:joe@example.com\u0026#34;, \u0026#34;links\u0026#34;: [ { \u0026#34;rel\u0026#34;: \u0026#34;http://owncloud.com/specs/ocis/1.0/instance\u0026#34;, \u0026#34;href\u0026#34;: \u0026#34;https://cloud.example.com\u0026#34; } ] } Note: the example.com domain is derived from the email.  The https://cloud.example.com domain above would point to the ocis instance. TODO that ins ocis web \u0026hellip; not the registry \u0026hellip; hmmmm maybe introduce an ocis provider which then has an /.well-known/ocis-configuration, similar to /.well-known/openid-configuration? It would contain\n the ocis domain, e.g. https://cloud.example.com the web endpoint, e.g. https://cloud.example.com the registry / drives endpoint, e.g. https://cloud.example.com/graph/v0.1/drives/me see Add draft of adr for spaces API. #1827  example:\nHTTP/1.1 200 OK Content-Type: application/json { \u0026#34;instance\u0026#34;: \u0026#34;https://cloud.example.com\u0026#34;, \u0026#34;graph_endpoint\u0026#34;: \u0026#34;https://cloud.example.com/graph/v0.0\u0026#34;, \u0026#34;ocis_web_config\u0026#34;: \u0026#34;https://cloud.example.com/web/config.json\u0026#34;, \u0026#34;issuer\u0026#34;: \u0026#34;https://idp.example.com\u0026#34;, } graph_endpoint is the open-graph-api endpoint that is used to list storage spaces at e.g. https://cloud.example.com/graph/v0.1/me/drives.\nocis_web_config points ocis web to the config for the instance. Maybe we can add more config in the /.well-known/ocis-configuration to replace the config.json? Is this the new status.php? How safe is it to expose all this info \u0026hellip;?\nThe issuer could be used to detect the issuer that is used if no other issuer is found \u0026hellip; might be a fallback_issuer, but actually we may decide to skid the OIDC discovery and rely on this property. Maybe we need it if no IdP is present yet or the /.well-known/openid-configuration is not set up / reachable.\n Obtaining oCIS Provider Configuration Information    Using the instance location discovered as described above or by other means, the oCIS Provider\u0026rsquo;s configuration information can be retrieved.\noCIS Providers supporting Discovery MUST make a JSON document available at the path formed by concatenating the string /.well-known/openid-configuration to the instance. The syntax and semantics of .well-known are defined in RFC5785 and apply to the instance value when it contains no path component. ocis-configuration MUST point to a JSON document compliant with this specification and MUST be returned using the application/json content type.\noCIS Provider Configuration Request    An oCIS Provider Configuration Document MUST be queried using an HTTP GET request at the previously specified path.\nThe client (relying party) would make the following request to the instance https://example.com to obtain its Configuration information, since the Issuer contains no path component:\nGET /.well-known/openid-configuration HTTP/1.1 Host: example.com If the Issuer value contains a path component, any terminating / MUST be removed before appending /.well-known/openid-configuration. The RP would make the following request to the Issuer https://example.com/issuer1 to obtain its Configuration information, since the Issuer contains a path component:\nGET /issuer1/.well-known/openid-configuration HTTP/1.1 Host: example.com Using path components enables supporting multiple issuers per host. This is required in some multi-tenant hosting configurations. This use of .well-known is for supporting multiple issuers per host; unlike its use in RFC 5785 [RFC5785], it does not provide general information about the host.\n"},{"id":85,"href":"/clients/web/backend-oc10/","title":"Setup with ownCloud 10","parent":"ownCloud Web","content":"    Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Web   Running Web Running acceptance tests     Prerequisites    Decide on which host and port Web will be served, for example https://web-host:9100/web-path/. In this document, we will refer to the following:\n \u0026lt;web-url\u0026gt; as the full URL, for example https://web-host:9100/web-path/ \u0026lt;web-domain\u0026gt; as the protocol, domain and port, for example: https://web-host:9100  Setting up the ownCloud Server    Make sure you have an ownCloud Server already installed.\nAdjusting config.php    Add the following entries to config/config.php:\n tell ownCloud where Web is located:  \u0026#39;web.baseUrl\u0026#39; =\u0026gt; \u0026#39;\u0026lt;web-url\u0026gt;\u0026#39;,  add a CORS domain entry for Web in config.php:  \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [\u0026#39;\u0026lt;web-domain\u0026gt;\u0026#39;], Setting up OAuth2    To connect to the ownCloud server, it is necessary to set it up with OAuth2.\nInstall and enable the oauth2 app:\n% occ market:install oauth2 % occ app:enable oauth2 Login as administrator in the ownCloud Server web interface and go to the \u0026ldquo;User Authentication\u0026rdquo; section in the admin settings and add an entry for Web as follows:\n pick an arbitrary name for the client set the redirection URI to \u0026lt;web-url\u0026gt;/oidc-callback.html make sure to take note of the client identifier value as it will be needed in the Web configuration later on  Setting up Web    In the local Web checkout, copy the config/config.json.sample-oc10 file to config/config.json and adjust it accordingly:\n Set the \u0026ldquo;server\u0026rdquo; key to the URL of the ownCloud server including path. If the URL contains a path, please also add a trailing slash there. Set the \u0026ldquo;clientId\u0026rdquo; key to the client identifier as copied from the \u0026ldquo;User Authentication\u0026rdquo; section before. Adjust \u0026ldquo;url\u0026rdquo; and \u0026ldquo;authUrl\u0026rdquo; using the ownCloud server URL as prefix for both Optionally adjust \u0026ldquo;apps\u0026rdquo; for the list of apps to be loaded. These match the app names inside the \u0026ldquo;apps\u0026rdquo; folder.  Running Web     if running from source, make sure to build Web first run by launching a rollup dev server yarn serve when working on the Web code, rollup will recompile the code automatically  Running acceptance tests    For testing, please refer to the ownCloud 10 testing section\n"},{"id":86,"href":"/ocis/development/extensions/","title":"Extensions","parent":"Development","content":"oCIS is all about files, sync and share - but most of the time there is more you want to do with your files, e.g. having a different view on your photo collection or editing your offices files in an online file editor. ownCloud 10 faced the same problem and solved it with applications, which can extend the functionality of ownCloud 10 in a wide range. Since oCIS is different in its architecture compared to ownCloud 10, we had to come up with a similiar (yet slightly different) solution. To extend the functionality of oCIS, you can write or install extensions. An extension is basically any running code which integrates into oCIS and provides functionality to oCIS and its users. Because extensions are just microservices providing an API, you can technically choose any programming language you like - a huge improvement to ownCloud 10, where it was nearly impossible to use a different programming language than PHP.\nWe will now introduce you to the oCIS extension system and show you how you can create a custom extension yourself.\nExtension examples    Technically every service in oCIS is an extension, even if oCIS would not really work without some of them. Therefore, you can draw inspiration from any of the plenty of extensions in the oCIS monorepo.\nBesides these \u0026ldquo;default\u0026rdquo; extensions in the oCIS monorepo, there are two more extensions you should be aware of:\n Hello WOPI server  Differences between the extensions maintained inside the oCIS monorepo and the ones maintained in their own repository are:\n extensions inside the oCIS monorepo are all written in Go, whereas other extensions may choose the programming language freely extensions inside the oCIS monorepo heavily share tooling to reduce maintenance efforts, whereas other extensions may use different tooling (e.g. a different CI system) extensions inside the oCIS monorepo will be all build into one binary and started with the ocis server command. All other extensions must be started individually besides oCIS.  For quickstart purposes we also offer a template project which can be used to generate all the boilerplate code for you. But you also can decide to use your own project layout or even a different programming language.\nIntegration into oCIS    Depending on the functionality of your extension, you might need to integrate with one or multiple of the components of oCIS mentioned below.\nownCloud Web    If your extension is not just doing something in the background, you will need a UI in order to allow the user to interact with your extension. You could just provide your own web frontend for that purpose, but for a better user experience you can easily integrate into the web frontend of oCIS, the new ownCloud Web.\nownCloud Web allows you to write an extension for itself and therefore offers a seamless user experience. Upon login, the user will be able to use the application switcher to switch between the files view, settings and other available and installed extensions, yours included. Furthermore it is also possible to register your extension for different file actions. As an example, you could offer your extension to the user for creating and editing office documents. The user will then be able to create or open a file with your application directly from the files view. How to provide create an extension for ownCloud Web can be seen best in the Hello extension, whereas plain file handling without any web frontend is available in the WOPI server extension.\nTo make ownCloud Web pick up your extension, you need to activate it in the configuration like seen in the Hello extension.\nFor a consistent look and feel, ownCloud Web uses a external design library, the ownCloud design system. Since its classes and components are available through the wrapping web runtime, we highly recommend you to leverage it in your extension as well.\nSettings    An extension likely has some behaviour which the user can configure. Fundamental configuration will often be done by administrators during deployment, via configuration files or by setting environment variables. But for other settings, which are supposed to change more often or which are even user specific, this is not a viable way. Therefore you need to offer the users a UI where they can configure your extension to their liking. Because implementing something like this is a repetitive task among extensions, oCIS already offers the settings extensions which does that for your extension. Your extension just needs to register settings bundles, respective permissions and finally read the current values from the settings service. You can read more on that on the settings extension and see how oCIS Hello uses these settings.\nProxy    The Proxy is an API gateway and acts as the single connection point where all external request from users and devices need to pass through.\nTo make sure that requests can reach your extension\u0026rsquo;s API, you need to register one or multiple endpoints at the proxy. The registration is a easy task and can be seen best on the oCIS Hello example.\nAs files in ownCloud must always stay private (unless you share them with your friends or coworkers), requests to oCIS have an authenticated user context. This user context is also available to your extension and can be used to interact with the user\u0026rsquo;s files. How to get the user context and authentication can be seen on the oCIS Hello example.\nStorage    oCIS leverages the CS3 APIs and CS3 REVA as a storage system because it offers a very flexible setup and supports a variety of storage backends like EOS, S3 and of course your local hard drive. REVA makes it easy to support more storage backends as needed.\nIf you need to interact with files directly, you have the full power of the CS3 APIs in your hand. With the user context and the user\u0026rsquo;s authentication token, which your extensions gets from the proxy, your extension can make these request in behalf of the user.\nIf your extension needs to store persistent data which is not supposed to live in the user\u0026rsquo;s home folder, there is also a so-called metadata storage, intended for exactly that purpose. You should always use the metadata storage in favor of the local filesystem for persistent files, because your extension will then automatically use the storage backend the oCIS admin decides to use. For a temporary cache it is perfectly fine to use the local filesystem.\n"},{"id":87,"href":"/ocis/storage-backends/","title":"Storage backends","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":88,"href":"/extensions/onlyoffice/license/","title":"License","parent":"OnlyOffice","content":"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"},{"id":89,"href":"/extensions/web/releasing/","title":"Releasing","parent":"ownCloud Web","content":"    Releasing  Package Hierarchy  Prerequisites Updating ocis-web         Releasing    The next generation Web Frontend is shipped as an oCIS Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.\nTo update this package within all the deliveries, we need to update the package in the following chain from the bottom to the top.\nPackage Hierarchy     ocis  ocis-web  ocis-pkg ownCloud Web      Prerequisites    Before updating the assets, make sure that ownCloud Web has been released first and take note of its release tag name.\nUpdating ocis-web     Create a branch update-web-$version in the ocis repository Change into web package folder via cd web Inside web/, update the Makefile so that the WEB_ASSETS_VERSION variable references the currently released version of https://github.com/owncloud/web Inside web/, replace the current assets with newly released ones by running make pull-assets Inside web/, run make generate. The output should look something like this: web: embed.go - YYY/MM/DD ... to write [./embed.go] from config file ... Move to the changelog (cd ../changelog/) and add a changelog file to the unreleased/ folder (You can copy an old web release changelog item as a template) Move to the repo root (cd ..)and update the WEB_COMMITID in the /.drone.env file to the commit id from the released version (unless the existing commit id is already newer) Optional: Test the changes locally by running cd ocis \u0026amp;\u0026amp; go run cmd/ocis/main.go server, visiting https://localhost:9200 and confirming everything renders correctly Commit your changes, push them and create a PR  "},{"id":90,"href":"/ocis/migration/","title":"Migration","parent":"oCIS - ownCloud Infinite Scale","content":"The migration happens in subsequent stages while the service is online. First all users need to migrate to the new architecture, then the global namespace needs to be introduced. Finally, the data on disk can be migrated user by user by switching the storage driver.\n@jfd: It might be easier to introduce the spaces api in oc10 and then migrate to oCIS. We cannot migrate both at the same time, the architecture to oCIS (which will change fileids) and introduce a global namespace (which requires stable fileids to let clients handle moves without redownloading). Either we implement arbitrary mounting of shares in oCIS / reva or we make clients and oc10 spaces aware.   Migration Stages    Stage 0: pre migration    Is the pre-migration stage when having a functional ownCloud 10 instance.\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage 1: introduce ownCloud Web    Install and introduce ownCloud Web and let users test it voluntarily to gain early feedback on the new UI.\nSteps    Deploy web and enable switching to and from it. For more details see: ownCloud 10 with ownCloud Web\nTODO allow limiting the web ui switch to an \u0026lsquo;early adopters\u0026rsquo; group\n Validation    Ensure switching back an forth between the classic ownCloud 10 web UI and ownCloud web works as at our https://demo.owncloud.com.\nRollback    Should there be problems with ownCloud web at this point it can simply be removed from the menu and be undeployed.\nNotes     The ownCloud 10 demo instance uses OAuth to obtain a token for ownCloud web and currently always requires explicit consent. In oCIS the token is provided by the OpenID Connect Identity Provider, which may skip the consent step for trusted clients for a more seamless login experience. You may want to introduce OpenID Connect before enabling the new web UI. TODO make oauth2 in oc10 trust the new web ui, based on redirect_uri and CSRF so no explicit consent is needed\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage 2: introduce OpenID Connect    Basic auth requires us to properly store and manage user credentials. Something we would rather like to delegate to a tool specifically built for that task. While SAML and Shibboleth are protocols that solve that problem, they are limited to web clients. Desktop and mobile clients were an afterthought and keep running into timeouts. For these reasons, we decided to move to OpenID Connect as our primary authentication protocol.\nTODO @butonic add ADR for OpenID Connect\n User impact    When introducing OpenID Connect, the clients will detect the new authentication scheme when their current way of authenticating returns an error. Users will then have to reauthorize at the OpenID Connecd IdP, which again, may be configured to skip the consent step for trusted clients.\nSteps     There are multiple products that can be used as an OpenID Connect IdP. We test with LibreGraph Connect, which is also embedded in oCIS. Other alternatives include Keycloak or Ping. Please refer to the corresponding setup instructions for the product you intent to use.  TODO @butonic flesh out oCIS IDP documentation\n Add Openid Connect (OIDC) support to ownCloud 10.  Validation    When OpenID Connect support is enabled verify that all clients can login:\n web classic ownCloud web desktop android iOS  Rollback    Should there be problems with OpenID Connect at this point you can disable the app. Users will have to reauthenticate in this case.\nNotes     Legacy clients relying on Basic auth or app passwords need to be migrated to OpenId Connect to work with oCIS. For a transition period Basic auth in oCIS can be enabled with `PROXY_ENABLE_BASIC_AUTH=true`, but we strongly recommend adopting OpenID Connect for other tools as well. While OpenID Connect providers will send an iss and sub claim that relying parties (services like oCIS or ownCloud 10) can use to identify users we recommend introducing a dedicated, globally unique, persistent, non-reassignable user identifier like a UUID for every user. This ownclouduuid shold be sent as an additional claim to save additional lookups on the server side. It will become the user id in oCIS, e.g. when searching for recipients the ownclouduuid will be used to persist permissions with the share manager. It has a different purpose than the ownCloud 10 username, which is used to login. Using UUIDs we can not only mitigate username collisions when merging multiple instances but also allow renaming usernames after the migration to oCIS has been completed.\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage 3: introduce oCIS interally    Befor letting oCIS handle end user requests we will first make it available in the internal network. By subsequently adding services we can add functionality and verify the services work as intended.\nStart oCIS backend and make read only tests on existing data using the owncloudsql storage driver which will read (and write)\n blobs from the same datadirectory layout as in ownCloud 10 metadata from the ownCloud 10 database: The oCIS share manager will read share information from the ownCloud database using an owncloud driver as well.  TODO @butonic add guide on how to configure owncloudsql\nTODO we need a share manager that can read from the ownCloud 10 database as well as from whatever new backend will be used for a pure oCIS setup. Currently, that would be the json file. Or that is migrated after all users have switched to oCIS. \u0026ndash; jfd\n User impact    None, only administrators will be able to explore oCIS during this stage.\nSteps and verifications    We are going to run and explore a series of services that will together handle the same requests as ownCloud 10. For initial exploration the oCIS binary is recommended. The services can later be deployed using a single oCIS runtime or in multiple cotainers.\nStorage provider for file metadata     Deploy OCIS storage provider with owncloudsql driver. Set read_only: true in the storage provider config. TODO @butonic add read only flag to storage drivers Use cli tool to list files using the CS3 api  File ID alternatives    Multiple ownCloud instances can be merged into one oCIS instance. To prevent the numeric ids from colliding, the file ids will be prefixed with a new storage space id which is used by oCIS to route requests to the correct storage provider. See Stage 8 below.\nAlternative 1 Add a routable prefix to fileids in oc10, and replicate the prefix in oCIS.\nStage-3.1    Let oc10 render file ids with prefixes: \u0026lt;instance name\u0026gt;$\u0026lt;numeric storageid\u0026gt;!\u0026lt;fileid\u0026gt;. This will allow clients to handle moved files.\nStage-3.2    Roll out new clients that understand the spaces API and know how to convert local sync pairs for legacy oc10 /webdav or /dav/files/\u0026lt;username\u0026gt; home folders into multiple sync pairs. One pair for /webdav/home or /dav/files/\u0026lt;username\u0026gt;/home and another pair for every accepted share. The shares will be accessible at /webdav/shares/ when the server side enables the spaces API. Files can be identified using \u0026lt;instance name\u0026gt;$\u0026lt;numeric storageid\u0026gt;!\u0026lt;fileid\u0026gt; and moved to the correct sync pair.\nStage-3.3    Enable spaces API in oc10:\n New clients will get a response from the spaces API and can set up new sync pairs. Legacy clients will still poll /webdav or /dav/files/\u0026lt;username\u0026gt; where they will see new subfolders instead of the users home. They will move down the users files into /home and shares into /shares. Custom sync pairs will no longer be available, causing the legacy client to leave local files in place. They can be picked up manually when installing a new client.   Alternative 2 An additional uuid property used only to detect moves. A lookup by uuid is not necessary for this. The /dav/meta endpoint would still take the fileid. Clients would use the uuid to detect moves and set up new sync pairs when migrating to a global namespace.\nStage-3.1    Generate a uuid for every file as a file property. Clients can submit a uuid when creating files. The server will create a uuid if the client did not provide one.\nStage-3.2    Roll out new clients that understand the spaces API and know how to convert local sync pairs for legacy oc10 /webdav or /dav/files/\u0026lt;username\u0026gt; home folders into multiple sync pairs. One pair for /webdav/home or /dav/files/\u0026lt;username\u0026gt;/home and another pair for every accepted share. The shares will be accessible at /webdav/shares/ when the server side enables the spaces API. Files can be identified using the uuid and moved to the correct sync pair.\nStage-4.1    When reading the files from oCIS return the same uuid. It can be migrated to an extended attribute or it can be read from oc10. If users change it the client will not be able to detect a move and maybe other weird stuff happens. What if the uuid gets lost on the server side due to a partial restore?\n   graph API endpoint     Deploy graph api to list spaces Use curl to list spaces using graph drives endpoint  owncloud flavoured WebDAV endpoint     Deploy Ocdav Use curl to send PROPFIND  data provider for up and download     Deploy dataprovider Use curl to up and download files Use tus to upload files  Deploy \u0026hellip;\nshare manager    Deploy share manager with owncloud driver\nreva gateway     Deploy gateway to authenticate requests? I guess we need that first\u0026hellip; Or we need the to mint a token. Might be a good exercise.  automated deployment    Finally, deploy OCIS with a config to set up everything running in a single oCIS runtime or in multiple containers.\nRollback    You can stop the oCIS process at any time.\nNotes     Multiple ownCloud instances can be merged into one oCIS instance. The file ids will be prefixed with a new storage space id which is used to route requests to the correct storage provider. FAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage 4: internal write access with oCIS    Test writing data with oCIS into the existing ownCloud 10 data directory using the owncloudsql storage driver.\nUser impact    Only administrators will be able to explore oCIS during this stage. End users should not be affected if the testing is limited to test users.\nSteps    Set read_only: false in the storage provider config.\nTODO @butonic add read only flag to storage drivers\n Verification    Rollback    Set read_only: true in the storage provider config.\nTODO @butonic add read only flag to storage drivers\n Notes     With write access it becomes possible to manipulate existing files and shares. FAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage-5: introduce user aware proxy    In the previous stages oCIS was only accessible for administrators with access to the network. To expose only a single service to the internet, oCIS comes with a user aware proxy that can be used to route requests to the existing ownCloud 10 installation or oCIS, based on the authenticated user. The proxy uses OIDC to identify the logged in user and route them to the configured backend.\nUser impact    The IP address of the ownCloud host changes. There is no change for the file sync and share functionality when requests are handled by the oCIS codebase as it uses the same database and storage system as owncloud 10.\nSteps and verifications    Deploy oCIS proxy     Deploy the ocis proxy Verify the requests are routed based on the ownCloud 10 routing policy oc10 by default  Test user based routing     Change the routing policy for a user or an early adoptors group to ocis TODO @butonic currently, the migration selector will use the ocis policy for users that have been added to the accounts service. IMO we need to evaluate a claim from the IdP. Verify the requests are routed based on the oCIS routing policy oc10 for \u0026lsquo;migrated\u0026rsquo; users.  At this point you are ready to rock \u0026amp; roll!\nLet ownCloud domain point to proxy     Update the dns to use the oCIS proxy instead of the ownCloud application servers directly. Let DNS propagate the change and monitor requests moving from the ownCloud application servers to the oCIS proxy. Verify the DNS change has propagated sufficiently. All requests should now use the oCIS Proxy.  Rollback    Should there be a problem with the oCIS routes the user can be routed to ownCloud by changing his routing policy. In case of unfixable problems with the proxy the DNS needs to be updated to use the ownCloud 10 application servers directly. This could also be done in a load balancer.\nNotes     The proxy is stateless, multiple instances can be deployed as needed. FAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage-6: parallel deployment    Running ownCloud 10 and oCIS in parallel is a crucial stage for the migration: it allows users access to group shares regardless of the system that is being used to to access the data. A user by user migration with multiple domains would technically break group shares when users vanish because they (and their data) are no longer available in the old system.\nDepending on the amount of power users on an instance, the admin may want to allow users to voluntarily migrate to the oCIS backend. A monitoring system can be used to visualize the behavior for the two systems and gain trust in the overall stability and performance.\nUser impact    Since the underling data is still stored in the same systems, a similar or performance can be expected.\nSee TODO hmpf outdated didn\u0026rsquo;t we want to run them nightly? \u0026hellip; TODO @butonic update performance comparisons nightly\n Steps    There are several options to move users to the oCIS backend:\n Use a canary app to let users decide thamselves Use an early adoptors group with an opt in Force migrate users in batch or one by one at the administrators will  Verification    The same verification steps as for the internal testing stage apply. Just from the outside.\nRollback    Until now, the oCIS configuration mimics ownCloud 10 and uses the old data directory layout and the ownCloud 10 database. Users can seamlessly be switched from ownCloud 10 to oCIS and back again.\nTODO @butonic we need a canary app that allows users to decide for themself which backend to use\n  Notes    Running the two systems in parallel stage Try to keep the duration of this stage short. Until now we only added services and made the system more complex. oCIS aims to reduce the maintenance cost of an ownCloud instance. You will not get there if you keep both systems alive.\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage-7: shut down ownCloud 10    Disable ownCloud 10 in the proxy, all requests are now handled by oCIS, shut down oc10 web servers and redis (or keep for calendar \u0026amp; contacts only? rip out files from oCIS?)\nUser impact    All users are already sent to the oCIS backend. Shutting down ownCloud 10 will remove the old web UI, apps and functionality that is not yet present in ownCloud web. For example contacts and calendar.\nTODO @butonic recommend alternatives\n Steps     Shut down the apache servers that are running the ownCloud 10 PHP code. DO NOT SHUT DOWN THE DATABASE, YET!  Verification    The ownCloud 10 classic web UI should no longer be reachable.\nRollback    Redeploy ownCloud 10.\nNotes     The database needs to remain online until the storage layer and share metadata have been migrated as well. One thing at a time. FAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage 8: storage migration    To get rid of the database we will move the metadata from the old ownCloud 10 database into dedicated storage providers. This can happen in a user by user fashion. group drives can properly be migrated to group, project or workspaces in this stage.\nUser impact    Noticeable performance improvements because we effectively shard the storage logic and persistence layer.\nSteps     User by user storage migration from owncloud or ownclouds3 driver to ocis/s3ng/cephfs\u0026hellip; currently this means copying the metadata from one storage provider to another using the cs3 api. Change the responsible storage provider for a storage space (e.g. a user home, a group or project space are a workspace) in the storage registry.  TODO @butonic implement ownclouds3 based on s3ng TODO @butonic implement tiered storage provider for seamless migration TODO @butonic document how to manually do that until the storge registry can discover that on its own.\n Verification    Start with a test user, then move to early adoptors and finally migrate all users.\nRollback    To switch the storage provider again the same storage space migration can be performed again: copy medatata and blob data using the CS3 api, then change the responsible storage provider in the storage registry.\nNotes     Multiple ownCloud instances can be merged into one oCIS instance. The file ids will be prefixed with a new storage space id which is used to route requests to the correct storage provider. The storage space migration will become a seamless feature in the future that allows administrators to move users to storage systems with different capabilities, to implement premium features, deprovisioning strategies or archiving.\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Stage-9: share metadata migration    Migrate share data to yet to determine share manager backend and shut down ownCloud database.\nThe ownCloud 10 database still holds share information in the oc_share and oc_share_external tables. They are used to efficiently answer queries about who shared what with whom. In oCIS shares are persisted using a share manager and if desired these grants are also sent to the storage provider so it can set ACLs if possible. Only one system should be responsible for the shares, which in case of treating the storage as the primary source effectively turns the share manager into a cache.\nUser impact    Depending on chosen the share manager provider some sharing requests should be faster: listing incoming and outgoing shares is no longer bound to the ownCloud 10 database but to whatever technology is used by the share provdier:\n For non HA scenarios they can be served from memory, backed by a simple json file. TODO: implement share manager with redis / nats / \u0026hellip; key value store backend: use the micro store interface please \u0026hellip;  Steps     Start new share manager Migrate metadata using the CS3 API (copy from old to new) Shut down old share manager Shut down ownCloud 10 database  TODO for HA implement share manager with redis / nats / \u0026hellip; key value store backend: use the micro store interface please \u0026hellip; TODO for batch migration implement share data migration cli with progress that reads all shares via the cs3 api from one provider and writes them into another provider TODO for seamless migration implement tiered/chained share provider that reads share data from the old provider and writes newc shares to the new one TODO for storage provider as source of truth persist ALL share data in the storage provider. Currently, part is stored in the share manager, part is in the storage provider. We can keep both, but the the share manager should directly persist its metadata to the storage system used by the storage provider so metadata is kept in sync\n Verification    After copying all metadata start a dedicated gateway and change the configuration to use the new share manager. Route a test user, a test group and early adoptors to the new gateway. When no problems occur you can stirt the desired number of share managers and roll out the change to all gateways.\nTODO let the gateway write updates to multiple share managers \u0026hellip; or rely on the tiered/chained share manager provider to persist to both providers\n Rollback    To switch the share manager to the database one revert routing users to the new share manager. If you already shut down the old share manager start it again. Use the tiered/chained share manager provider in reverse configuration (new share provider as read only, old as write) and migrate the shares again. You can alse restore a database backup if needed.\nStage-10    Profit! Well, on the one hand you do not need to maintain a clustered database setup and can rely on the storage system. On the other hand you are now in microservice wonderland and will have to relearn how to identify bottlenecks and scale oCIS accordingly. The good thing is that tools like jaeger and prometheus have evolved and will help you understand what is going on. But this is a different Topic. See you on the other side!\nFAQ    Feel free to add your question as a PR to this document using the link at the top of this page!\n  Architectural differences    The fundamental difference between ownCloud 10 and oCIS is that the file metadata is moved from the database in the oc_filecache table (which is misnamed, as it actually is an index) to the storage provider who can place metadata as close to the underlying storage system as possible. In effect, the file metadata is sharded over multiple specialized services.\nData that will be migrated    Currently, oCIS focuses on file sync and share use cases.\nBlob data    In ownCloud 10 the files are laid out on disk in the data directory using the following layout:\ndata ├── einstein │ ├── cache │ ├── files │ │ ├── Photos │ │ │ └── Portugal.jpg │ │ ├── Projects │ │ │ └── Notes.md │ │ └── ownCloud Manual.pdf │ ├── files_external │ ├── files_trashbin │ │ ├── files │ │ │ ├── Documents.d1564687985 │ │ │ ├── TODO.txt.d1565721976 │ │ │ └── welcome.txt.d1564775872 │ │ └── versions │ │ │ ├── TODO.txt.v1564605543.d1565721976 │ │ │ └── TODO.txt.v1564775936.d1565721976 │ ├── files_versions │ │ ├── Projects │ │ │ ├── Notes.md.v1496912691 │ │ │ └── Notes.md.v1540305560 │ │ └── ownCloud Manual.pdf.v1396628249 │ ├── thumbnails │ │ └── 123 │ │ │ ├── 2048-1536-max.png │ │ │ └── 32-32.png // the file id, eg. of /Photos/Portugal.jpg │ └── uploads ├── marie │ ├── cache │ ├── files │ ├── files_external │ ├── files_trashbin │ ├── files_versions │ └── thumbnails │ … ├── moss … The data directory may also contain subfolders for ownCloud 10 applications like avatars, gallery, files_external and cache.\nWhen an object storage is used as the primary storage all file blobs are stored by their file id and a prefix, eg.: urn:oid:\u0026lt;fileid\u0026gt;.\nThe three types of blobs we need to migrate are stored in\n files for file blobs, the current file content, files_trashbin for trashed files (and their versions) and files_versions for file blobs of older versions.   Filecache table    In both cases the file metadata, including a full replication of the file tree, is stored in the oc_filecache table of an ownCloud 10 database. The primary key of a row is the file id. It is used to attach additional metadata like shares, tags, favorites or arbitrary file properties.\nThe filecache table itself has more metadata:\n   Field Type Null Key Default Extra Comment Migration     fileid bigint(20) NO PRI NULL auto_increment  MUST become the oCIS opaqueid of a file reference. ocis driver stores it in extendet attributes and can use numbers as node ids on disk. for eos see note below table   storage int(11) NO MUL 0  the filecache holds metadata for multiple storages corresponds to an oCIS storage space   path varchar(4000) YES  NULL  the path relative to the storages root MUST become the path relative to the storage root. files prefix needs to be trimmed.   path_hash varchar(32) NO    *mysql once had problems indexing long paths, so we stored a hash for lookup by path. -   parent bigint(20) NO MUL 0  used to implement the hierarchy and listing children of a folder by id. redundant with path -   name varchar(250) YES  NULL  basename of path -   mimetype int(11) NO  0  joined with the oc_mimetypes table. only relevant for object storage deployments can be determined from blob / file extension   mimepart int(11) NO  0  \u0026quot; can be determined from blob / file extension   size bigint(20) NO  0  same as blob size unless encryption is used MAY become size, can be determined from blob   mtime bigint(20) NO  0  same as blob mtime for files MAY become mtime (can be determined from blob as well), for directories MUST become tmtime   encrypted int(11) NO  0  encrypted flag oCIS currently does not support encryption   etag varchar(40) YES  NULL  used to propagate changes in a tree MUST be migrated (or calculated in the same way) to prevent clients from syncing unnecessarily   unencrypted_size bigint(20) NO  0  same as blob size oCIS currently does not support encryption   storage_mtime bigint(20) NO  0  used to detect external storage changes oCIS delegates that to the storage providers and drivers   permissions int(11) YES  0  *used as the basis for permissions. synced from disk when running a file scan. * oCIS delegates that to the storage providers and drivers   checksum varchar(255) YES  NULL  same as blob checksum SHOULD become the checksum in the storage provider. eos calculates it itself, ocis driver stores it in extended attributes     Note: for EOS a hot migration only works seamlessly if file ids in oc10 are already read from eos. otherwise either a mapping from the oc10 filecache file id to the new eos file id has to be created under the assumption that these id sets do not intersect or files and corresponding shares need to be exported and imported offline to generate a new set of ids. While this will preserve public links, user, group and even federated shares, old internal links may still point to different files because they contain the oc10 fileid\n  share table    used to store\n Public links Private shares with users and groups Federated shares partly Guest shares     Field Type Null Key Default Extra Comment CS3 API     id int(11) NO PRI NULL auto_increment  ShareId.opaqueid string   share_type smallint(6) NO  0  in CS3 every type is handled by a dedicated API. See below the table does NOT map to Share.ShareType TODO clarify   share_with varchar(255) YES MUL NULL   Share.grantee Grantee   uid_owner varchar(64) NO     ShareId.owner UserID   parent int(11) YES  NULL   -   item_type varchar(64) NO MUL    Share.resource_id ResourceId   item_source varchar(255) YES MUL NULL   Share.resource_id ResourceId   item_target varchar(255) YES  NULL   Share.resource_id ResourceId   file_source bigint(20) YES MUL NULL  cannot store uuid style file ids from oCIS. when all users have migrated to oCIS the share manager needs to be updated / migrated to a version that does. Share.resource_id ResourceId   file_target varchar(512) YES  NULL   Share.resource_id ResourceId   permissions smallint(6) NO  0   Share.Permissions SharePermissions   stime bigint(20) NO  0   Share.ctime, Share.mtime   accepted smallint(6) NO  0   ReceivedShare.ShareState ShareState   expiration datetime YES  NULL  only used for the Link API and storage provider api, currently cannot be added using the Collaboration or OCM API Grant   token varchar(32) YES MUL NULL   PublicShare.token   mail_send smallint(6) NO  0   -   uid_initiator varchar(64) YES  NULL   ShareId.creator UserID   share_name varchar(64) YES  NULL  only exists for public shares PublicShare.display_name   attributes longtext YES  NULL  additional share attributes could be implemented using opaque data, but should be added to the CS3 api    In the CS3 API\n public links are handled by the PublicShareProvider using the Link API internal shares are handled by the UserShareProvider using the Collaboration API. This covers user and group shares. federated shares are handled by the OcmShareProvider using the OCM Share Provider AP aka. Open Cloud Mesh.   share_external    Used to store additional metadata for federated shares.\n   Field Type Null Key Default Extra Comment     id bigint(20) NO PRI NULL auto_increment    remote varchar(512) NO  NULL  Url of the remote owncloud instance   share_token varchar(64) NO  NULL  Public share token   password varchar(64) YES  NULL  Optional password for the public share   name varchar(64) NO  NULL  Original name on the remote server   owner varchar(64) NO  NULL  User that owns the public share on the remote server   user varchar(64) NO MUL NULL  Local user which added the external share   mountpoint varchar(4000) NO  NULL  Full path where the share is mounted   mountpoint_hash varchar(32) NO  NULL  md5 hash of the mountpoint   remote_id varchar(255) NO  -1     accepted int(11) NO  0      TODO document how the reva OCM service currently persists the data\n  trusted_servers    used to determine if federated shares can automatically be accepted\n   Field Type Null Key Default Extra Comment     id int(11) NO PRI NULL auto_increment    url varchar(512) NO  NULL  Url of trusted server   url_hash varchar(255) NO UNI   sha1 hash of the url without the protocol   token varchar(128) YES  NULL  token used to exchange the shared secret   shared_secret varchar(256) YES  NULL  shared secret used to authenticate   status int(11) NO  2  current status of the connection   sync_token varchar(512) YES  NULL  cardDav sync token    TODO clarify how OCM handles this and where we store / configure this. It seems related to trusted IdPs\n  user data    Users are migrated in two steps:\n They should all be authenticated using OpenID Connect, which already moves them to a common identity management system. To search share recipients, both, ownCloud 10 and oCIS need access to the same user directory using eg. LDAP.  TODO add state to CS3 API, so we can \u0026lsquo;disable\u0026rsquo; users TODO how do we map (sub) admins? -\u0026gt; map to roles \u0026amp; permissions\n accounts:\n   Field Type Null Key Default Extra Comment     id bigint(20) unsigned NO PRI NULL auto_increment    email varchar(255) YES MUL NULL     user_id varchar(255) NO UNI NULL     lower_user_id varchar(255) NO UNI NULL     display_name varchar(255) YES MUL NULL     quota varchar(32) YES  NULL     last_login int(11) NO  0     backend varchar(64) NO  NULL     home varchar(1024) NO  NULL     state smallint(6) NO  0      users:\n   Field Type Null Key Default Extra Comment     uid varchar(64) NO PRI      password varchar(255) NO       displayname varchar(64) YES  NULL      groups:\nThe groups table really only contains the group name.\n   Field Type Null Key Default Extra     gid varchar(64) NO PRI       LDAP    TODO clarify if metadata from ldap \u0026amp; user_shibboleth needs to be migrated\n The dn -\u0026gt; owncloud internal username mapping that currently lives in the oc_ldap_user_mapping table needs to move into a dedicated ownclouduuid attribute in the LDAP server. The idp should send it as a claim so the proxy does not have to look up the user using LDAP again. The username cannot be changed in ownCloud 10 and the oCIS provisioning API will not allow changing it as well. When we introduce the graph api we may allow changing usernames when all clients have moved to that api.\nThe problem is that the username in owncloud 10 and in oCIS also need to be the same, which might not be the case when the ldap mapping used a different column. In that case we should add another owncloudusername attribute to the ldap server.\nactivities    dedicated service, not yet implemented, requires decisions about an event system \u0026ndash; jfd\n   Field Type Null Key Default Extra Comment     activity_id bigint(20) NO PRI NULL auto_increment    timestamp int(11) NO MUL 0     priority int(11) NO  0     type varchar(255) YES  NULL     user varchar(64) YES  NULL     affecteduser varchar(64) NO MUL NULL     app varchar(255) NO  NULL     subject varchar(255) NO  NULL     subjectparams longtext NO  NULL     message varchar(255) YES  NULL     messageparams longtext YES  NULL     file varchar(4000) YES  NULL     link varchar(4000) YES  NULL     object_type varchar(255) YES MUL NULL     object_id bigint(20) NO  0      Links    The data_exporter has logic that allows exporting and importing users, including shares. The model classes contain the exact mapping.\n "},{"id":91,"href":"/extensions/storage/ports/","title":"Ports","parent":"Storage","content":"Currently, every service needs to be configured with a port so oCIS can start them on localhost. We will automate this by using a service registry for more services, until eventually only the proxy has to be configured with a public port.\nFor now, the storage service uses these ports to preconfigure those services:\n   port service     9109 health, used by cli?   9140 frontend   9141 frontend debug   9142 gateway   9143 gateway debug   9144 users   9145 users debug   9146 authbasic   9147 authbasic debug   9148 authbearer   9149 authbearer debug   9150 sharing   9151 sharing debug   9154 storage home grpc   9155 storage home http   9156 storage home debug   9157 storage users grpc   9158 storage users http   9159 storage users debug   9160 groups   9161 groups debug   9178 storage public link   9179 storage public link data   9215 storage meta grpc   9216 storage meta http   9217 storage meta debug    "},{"id":92,"href":"/ocis/flow-docs/login-flow/","title":"Login Flow","parent":"Flow documentation","content":"Login Flow    The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well:\n  sequenceDiagram %% we have comments!! \\o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#use-pkce-to-make-your-apps-more-secure participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant glauth as ocis-glauth participant graph as ocis-graph participant accounts as ocis-accounts participant ldap as external LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND no (or expired) auth Note over client,proxy: ocis needs to know the IdP that is\nused to authenticate users. The\nproxy will redirect unauthenticated\nrequests to that IdP. proxy---client: 302 Found Note over client, idp: HTTP/1.1 302 Found\nLocation: https://server.example.com/authorize?\nresponse_type=code\u0026\nscope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb Note over client, idp: We should follow the OpenID Connect Discovery protocol Note over client, idp: Clients might fall back to the ocis server if the discovery failed.\nWe can provide a webfinger endpoint there to let guests use an idp\nthat is backed by the accounts service. Note over client, idp: For now, clients can only handle one IdP, which is configured in ocis. client--client: 1. Client prepares an Authentication Request\ncontaining the desired request parameters. client-+idp: 2. Client sends the request to the Authorization Server. Note over client, idp: GET /authorize?\nresponse_type=code\n\u0026scope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1\nHost: server.example.com Note over user, idp: 3. Authorization Server Authenticates the End-User. Note over idp,ldap: Either an IdP already exists or a new one is introduced. Since we are not yet using oidc discovery we can only use one IdP. alt all users managed by idp/ocis idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result Note over accounts,ldap: In case internal users are managed\nin an external ldap they have to be\nsynced to the accounts service to\nshow up as recipients during sharing. else all users authenticated by an external idp idp-+ldap: LDAP query/bind ldap---idp: LDAP result alt guest accounts managed in ocis / lookup using glauth proxy: Note over idp,glauth: Idp is configured to use glauth as a\nsecond ldap server. idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result else guest account provisioned by other means Note over accounts, ldap: In case guest accounts are managed\nin an existing ldap they need to be\nsynced to the accounts service to\nbe able to login and show up as\nrecipients during sharing. end end Note over user, idp: 4. Authorization Server obtains End-User Consent/Authorization. idp---client: 5. Authorization Server sends the End-User back\nto the Client with an Authorization Code. Note over client, idp: HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?\ncode=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj client-+idp: 6. Client requests a response using the\nAuthorization Code at the Token Endpoint. Note over client, idp: POST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\ngrant_type=authorization_code\u0026code=SplxlOBeZQQYbYS6WxSbIA\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb idp---client: 7. Client receives a response that contains an\nID Token and Access Token in the response body. Note over client, idp: HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n{\n\"access_token\": \"SlAV32hkKG\",\n\"token_type\": \"Bearer\",\n\"refresh_token\": \"8xLOxBtZp8\",\n\"expires_in\": 3600,\n\"id_token\": \"a ... b.c ... d.e ... f\" // must be a JWT\n} client--client: 8. Client validates the ID token and\nretrieves the End-User's Subject Identifier. client-+proxy: PROPFIND With access token proxy---client: 207 Multi-Status client---user: List of Files X, Y, Z ...  "},{"id":93,"href":"/ocis/metrics/","title":"Metrics","parent":"oCIS - ownCloud Infinite Scale","content":"Metrics    This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which has to be configured either through the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default, the metrics endpoint is bound to http://0.0.0.0:8001/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "},{"id":94,"href":"/ocis/flow-docs/request-flow/","title":"Request Flow","parent":"Flow documentation","content":"Request Flow    The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:\n  sequenceDiagram %% we have comments!! \\o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND Bearer auth using oidc auth token Note over client,proxy: What is in a bearer token? The spec recommends opaque tokens. Treat it as random byte noise. Note over client,proxy: the proxy MUST authenticate users using ocis-accounts because it needs to decide where to send the request %% Mention introspection endpoint for opaque tokens %% idp uses jwt, so we can save a request %% either way the token can be used to look up the sub and iss of the user %% or is token check enough? proxy-+idp: GET /userinfo alt userinfo succeeds idp--proxy: 200 OK Note over proxy,accounts: Content-Type: application/json\n{\n\"sub\": \"248289761001\",\n\"name\": \"Jane Doe\",\n\"given_name\": \"Jane\",\n\"family_name\": \"Doe\",\n\"preferred_username\": \"j.doe\",\n\"email\": \"janedoe@example.com\",\n\"picture\": \"http://example.com/janedoe/me.jpg\"\n} %% see: https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse else userinfo fails idp---proxy: 401 Unauthorized Note over proxy,accounts: WWW-Authenticate: error=\"invalid_token\",\nerror_description=\"The Access Token expired\" proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-+accounts: TODO API call to exchange sub@iss with account UUID Note over proxy,accounts: does not autoprovision users. They are explicitly provsioned later. alt account exists or has been migrated accounts--proxy: existing account UUID else account does not exist opt oc10 endpoint is configured Note over proxy,oc10: Check if user exists in oc10 proxy-+oc10: GET /apps/graphapi/v1.0/users/\u0026lt;uuid\u0026gt; opt user exists in oc10 oc10---proxy: 200 %% TODO auth using internal token proxy-+oc10: PROPFIND Note over proxy,oc10: forward existing bearer auth oc10---proxy: Multistatus response proxy--client: Multistatus response client--user: List of Files X, Y, Z ... end end Note over proxy,accounts: provision a new account including displayname, email and sub@iss TODO only if the user is allowed to login, based on group membership in the ldap server proxy-proxy: generate new uuid proxy-+accounts: TODO create account with new generated uuid accounts---proxy: OK / error else account has been disabled accounts---proxy: account is disabled proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-proxy: store uuid in context %% what if oc10 does not support a certain request / API proxy-proxy: mint an internal jwt that includes the UUID and username using revas `x-access-token` header proxy-+reva: PROPFIND Token auth using internal JWT reva---proxy: Multistatus response proxy---client: Multistatus response client---user: List of Files X, Y, Z ...  "},{"id":95,"href":"/ocis/flow-docs/public-upload-flow/","title":"Public upload Flow","parent":"Flow documentation","content":"Public Upload flow    The following diagram describes the flow of requests:\n ocis-reva sharing\nREVA_SHARING_ADDR = 0.0.0.0:9150\nocis-reva sharing...ocis-reva frontend\nREVA_FRONTEND_ADDR = 0.0.0.0:9140\nREVA_GATEWAY_URL = ocis:9142\nocis-reva frontend...ocis-proxy\nPROXY_HTTP_ADDR = 0.0.0.0:9200\nocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav\nprefix = \"\"\ntimeout = 86400\nocdav...datagateway\nprefix = \"data\"\ntimeout = 86400\ndatagateway...client\nclient\u0026#xa;22  PATCH https://oc.example.org/data/{token}\nTus-Resumable: 1.0.022 PATCH http...ocis-reva gateway\nREVA_GATEWAY_ADDR = 0.0.0.0:9142\nocis-reva gateway...storage-registry\nstorage-registry\u0026#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http...4  GetStorageProvider\n(ShareReference)4 GetStorageP...5  ProviderInfo5 ProviderInfostorageprovider\nREVA_STORAGE_HOME_ADDR = 0.0.0.0:9154\nREVA_STORAGE_HOME_DRIVER = eoshome\nREVA_STORAGE_HOME_EXPOSE_DATA_SERVER = false\nREVA_STORAGE_HOME_DATA_SERVER_URL =\nhttp://ocis:9156/data\nstorageprovider...Expose: falseExpose: false6  InitiateFileUpload\n(ShareReference)6 InitiateFil...EOSEOS15  WriteFile(upload info)15 WriteFile(...7  GetPublicShare7 GetPublicSh...19  UploadEndpoint\nhttps://oc.example.org/data/{token}19 UploadEndp...20  201 Created\nLocation: https://oc.example.org/data/{token}20 201 Create...21  201 Created\nLocation: https://oc.example.org/data/{token}21 201 Create...1 POST https://oc.example.org/remote.php/dav/files/einstein/\nUpload-Length: 100\nTus-Resumable: 1.0.0\nUpload-Metadata: filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==,dir d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==1 POST https:...23  PATCH http://ocis:9140/data/{token}\nTus-Resumable: 1.0.023 PATCH http...3  InitiateFileUpload3 InitiateFil...25  Write(bytes)25 Write(byte...26  204 No Content26 204 No Con...27  204 No Content27 204 No Con...28  204 No Content28 204 No Con...publicstorageprovider\nexpose-data-server = true\npublicstorageprovider...publicshareprovider\npublicshareprovider\u0026#xa;8  GetPublicShare8 GetPublicSh...9  PublicShare9 PublicShare10  PublicShare10 PublicShare11  InitiateFileUpload(TargetReference)11 InitiateFi...12  GetStorageProvider\n(TargetReference)12 GetStorage...13  ProviderInfo13 ProviderIn...14  InitiateFileUpload(TargetReference)14 InitiateFi...16  UploadEndpoint\nhttp://ocis:9156/data/u-u-i-d\nExpose: false16 UploadEndp...17 UploadEndpoint\nhttps://oc.example.org/data/\ntoken: sign(http://ocis:9156/data/u-u-i-d)17 UploadEndp...18  UploadEndpoint\nhttps://oc.example.org/data/{token}\nExpose: true18 UploadEndp...gateway\nREVA_TRANSFER_EXPIRES = 86400\nREVA_FRONTEND_URL =\nhttps://oc.example.org\nREVA_DATAGATEWAY_URL =\nhttps://oc.example.org/data\n\ngateway...When a storage provider\nsets the Expose flag of an Upload/Download Endpoint to false the gateway will wrap the url in a JWT and return the URL of the datagateway along with a transfer-token.When a storage provider...dataprovider\nREVA_STORAGE_HOME_DATA_ADDR = 0.0.0.0:9156\nREVA_STORAGE_HOME_DATA_DRIVER = eoshome\ndataprovider...GOAL: transfer bytes from the client up here ...GOAL: tran...... to the storage system somewhere down here... to the storage syst...Viewer does not support full SVG 1.1  "},{"id":96,"href":"/extensions/storage/updating/","title":"Updating reva","parent":"Storage","content":"    Updating reva     Updating reva     Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  "},{"id":97,"href":"/extensions/settings/bundles/","title":"Settings Bundles","parent":"Settings","content":"A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It\u0026rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.\nAs of now we support five different types of settings:\n boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle. Some attributes depend on the chosen type of setting. Through the information provided with the attributes of the setting, the settings frontend dynamically renders form elements, allowing users to change their settings individually.\nExample    { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34; }, \u0026#34;displayName\u0026#34;: \u0026#34;Profile\u0026#34;, \u0026#34;settings\u0026#34;: [ { \u0026#34;settingKey\u0026#34;: \u0026#34;lastname\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Lastname\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for lastname\u0026#34;, \u0026#34;stringValue\u0026#34;: { \u0026#34;placeholder\u0026#34;: \u0026#34;Set lastname\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;age\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Age\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for age\u0026#34;, \u0026#34;intValue\u0026#34;: { \u0026#34;min\u0026#34;: \u0026#34;16\u0026#34;, \u0026#34;max\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;step\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;placeholder\u0026#34;: \u0026#34;Set age\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;timezone\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Timezone\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;User timezone\u0026#34;, \u0026#34;singleChoiceValue\u0026#34;: { \u0026#34;options\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34; }, { \u0026#34;stringValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34; } ] } } ] } "},{"id":98,"href":"/clients/web/backend-ocis/","title":"Setup with oCIS","parent":"ownCloud Web","content":"    Setting up oCIS services Setting up Web Running Web Running acceptance tests     Setting up oCIS services     Setup oCIS by following the setup instructions. Kill the oCIS Web service ./ocis kill web  Setting up Web     Copy ./config/config.json.sample-ocis to ./config/config.json and adjust values if required  Running Web     in the Web checkout folder, run yarn serve open https://localhost:9200 and accept the certificate. when signing in, use one of the available demo users whenever code changes are made, you need to manually reload the browser page (no hot reload)  Running acceptance tests    For testing, please refer to the oCIS testing section\n"},{"id":99,"href":"/ocis/development/debugging/","title":"Debugging","parent":"Development","content":"    Debugging  Start ocis  Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process   Gather error messages Managing dependencies and testing changes       Debugging    As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.\nUltimately, we want to be able to stop a single service using eg. ocis kill web so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.\nStart ocis    For debugging there are two workflows that work well, depending on your preferences.\nUse the debug binary and attach to the process as needed    Run the debug binary with OCIS_LOG_LEVEL=debug bin/ocis-debug server and then find the service you want to debug using:\n# ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug idp 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug web 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Then you can set a breakpoint in the service you need and attach to the process via processid. To debug the reva-sharing service the VS Code launch.json would look like this:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ocis attach\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;go\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;processId\u0026#34;: 12897 } ] } Start all services independently to replace one of them with a debug process     You can use this ./ocis.sh script to start all services independently, so they don\u0026rsquo;t get restarted by the runtime when you kill them:  #/bin/sh LOG_LEVEL=\u0026#34;debug\u0026#34; bin/ocis --log-level=$LOG_LEVEL micro \u0026amp; bin/ocis --log-level=$LOG_LEVEL glauth \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph-explorer \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph \u0026amp; #bin/ocis --log-level=$LOG_LEVEL hello \u0026amp; bin/ocis --log-level=$LOG_LEVEL idp \u0026amp; #bin/ocis --log-level=$LOG_LEVEL ocs \u0026amp; bin/ocis --log-level=$LOG_LEVEL web \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-basic \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-bearer \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-frontend \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-gateway \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-sharing \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-root \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-users \u0026amp; #bin/ocis --log-level=$LOG_LEVEL webdav bin/ocis --log-level=$LOG_LEVEL proxy \u0026amp; Get the list of running processes:  # ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug idp 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug web 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Kill the service you want to start in debug mode:  # kill 17628 Start the service you are interested in in debug mode. When using make to build the binary there is already a bin/ocis-debug binary for you. When running an IDE tell it which service to start by providing the corresponding sub command, eg. bin\\ocis-debug reva-frontend.  Gather error messages    We recommend you collect all related information in a single file or in a GitHub issue. Let us start with an error that pops up in the Web UI:\n Error while sharing. error sending a grpc stat request\n This popped up when I tried to add marie as a collaborator in ownCloud Web. That triggers a request to the server which I copied as curl. We can strip a lot of headers and the gist of it is:\n# curl \u0026#39;https://localhost:9200/ocs/v1.php/apps/files_sharing/api/v1/shares\u0026#39; -d \u0026#39;shareType=0\u0026amp;shareWith=marie\u0026amp;path=%2FNeuer+Ordner\u0026amp;permissions=1\u0026#39; -u einstein:relativity -k -v | xmllint -format - [... headers ...] \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;ocs\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;status\u0026gt;error\u0026lt;/status\u0026gt; \u0026lt;statuscode\u0026gt;998\u0026lt;/statuscode\u0026gt; \u0026lt;message\u0026gt;error sending a grpc stat request\u0026lt;/message\u0026gt; \u0026lt;/meta\u0026gt; \u0026lt;/ocs\u0026gt; The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  TODO add ocis cli tool to obtain a bearer token.  We also have a few interesting log entries:\n0:43PM INF home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=OK end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:44078 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=95841 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=Unknown end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:43910 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=586115 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.gateway.v1beta1.GatewayAPI/Stat user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94 \u0026gt; error sending a grpc stat request error=\u0026#34;rpc error: code = Unknown desc = gateway: error calling Stat: rpc error: code = Unavailable desc = connection error: desc = \\\u0026#34;transport: Error while dialing dial tcp [::1]:9152: connect: connection refused\\\u0026#34;\u0026#34; pid=17832 pkg=rhttp traceid=b4eb9a9f45921f7d3632523ca32a42b0 TODO return the trace id in the response so we can correlate easier. For reva tracked in https://github.com/cs3org/reva/issues/587  The last line gives us a hint where the log message originated: .../github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94. Which looks like this:\n89: // WriteOCSResponse handles writing ocs responses in json and xml 90: func WriteOCSResponse(w http.ResponseWriter, r *http.Request, res *Response, err error) { 91: var encoded []byte 92: 93: if err != nil { 94: appctx.GetLogger(r.Context()).Error().Err(err).Msg(res.OCS.Meta.Message) 95: } Ok, so this seems to be a convenience method that is called from multiple places an also handles errors. Unfortunately, this hides the actual source of the error. We could set a breakpoint in line 94 and reproduce the problem, which can be a lot harder than just clicking the share button or sending a curl request again. So let us see what else the log tells us.\nThe previous line tells us that a Stat request failed: uri=/cs3.gateway.v1beta1.GatewayAPI/Stat. This time the line is written by the grpc log interceptor. What else is there?\nThe first line tells us that looking up the responsible storage provider seems to have succeeded: uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider.\nAt this point it your familiarity with the codebase starts to become a factor. If you are new you should probably go back to setting a break point on the log line and check the stack trace.\nDebug wherever the call trace leads you to \u0026hellip; good luck!\nManaging dependencies and testing changes    You can either run and manage the services independently, or you can update the go.mod file and replace dependencies with your local version.\nTo debug the reva frontend we need to add two replacements:\n// use the local ocis-reva repo replace github.com/owncloud/ocis-reva =\u0026gt; ../ocis-reva // also use the local reva repo replace github.com/cs3org/reva =\u0026gt; ../reva The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  Rebuild ocis to make sure the dependency is used. It should be sufficient to just restart the service you want to debug.\n"},{"id":100,"href":"/extensions/accounts/grpc/","title":"GRPC API","parent":"Accounts","content":"    accounts.proto  Account AddMemberRequest CreateAccountRequest CreateGroupRequest DeleteAccountRequest DeleteGroupRequest GetAccountRequest GetGroupRequest Group Identities ListAccountsRequest ListAccountsResponse ListGroupsRequest ListGroupsResponse ListMembersRequest ListMembersResponse OnPremisesProvisioningError PasswordProfile RebuildIndexRequest RebuildIndexResponse RemoveMemberRequest UpdateAccountRequest UpdateGroupRequest AccountsService GroupsService IndexService   Scalar Value Types     accounts.proto    Account    Account follows the properties of the ms graph api user resuorce. See https://docs.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0#properties\n   Field Type Label Description     id string  The unique identifier for the user. Key. Not nullable. Non reassignable. Read-only.   account_enabled bool  true* if the account is enabled; otherwise, *false*. This property is required when a user is created. Supports $filter.   is_resource_account bool  A resource account is also known as a /disabled user object/ in Azure AD, and can be used to represent resources in general. In Exchange it might be used to represent conference rooms, for example, and allow them to have a phone number. You could give printers or machines with a sync client resource accounts as well. A resource account can be homed in Microsoft 365 or on premises using Skype for Business Server 2019. true if the user is a resource account; otherwise, false. Null value should be considered false.   creation_type string  Indicates whether the account was created as - a regular school or work account (\u0026quot;\u0026quot; / emptystring), - a local account, fully managed by oCIS (LocalAccount), includes synced accounts or - an external account (Invitation), - self-service sign-up using email verification (EmailVerified). Read-only.   identities Identities repeated Represents the identities that can be used to sign in to this account. An identity can be provided by oCIS (also known as a local account), by organizations, or by social identity providers such as Facebook, Google, and Microsoft, and is tied to an account. May contain multiple items with the same signInType value. Supports $filter.   display_name string  The name displayed in the address book for the account. This is usually the combination of the user\u0026rsquo;s first name, middle initial and last name. This property is required when a user is created and it cannot be cleared during updates. Supports $filter and $orderby. posixaccount MUST cn   preferred_name string  The username posixaccount MUST uid   uid_number int64  TODO rename to on_premise_? or move to extension? see https://docs.microsoft.com/en-us/graph/extensibility-open-users used for exposing the user using ldap posixaccount MUST uidnumber   gid_number int64  used for exposing the user using ldap posixaccount MUST gidnumber   mail string  The SMTP address for the user, for example, \u0026ldquo;jeff@contoso.onmicrosoft.com\u0026rdquo;. Read-Only. Supports $filter. inetorgperson MAY mail   description string  A description, useful for resource accounts posixaccount MAY description   password_profile PasswordProfile  Specifies the password profile for the user. The profile contains the user’s password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. posixaccount MAY authPassword   memberOf Group repeated The groups, directory roles and administrative units that the user is a member of. Read-only. Nullable. should we only respond with repeated strings of ids? no clients should a proper filter mask!   created_date_time google.protobuf.Timestamp  The created date of the account object.   deleted_date_time google.protobuf.Timestamp  The date and time the user was deleted. Returned only on $select.   on_premises_sync_enabled bool  true* if this object is synced from an on-premises directory; *false* if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only   on_premises_immutable_id string  This property is used to associate an on-premises LDAP user to the oCIS account object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user’s userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when specifying this property. Supports $filter.   on_premises_security_identifier string  Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only.   on_premises_distinguished_name string  Contains the on-premises LDAP distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_sam_account_name string  Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_domain_name string  Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_user_principal_name string  Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_last_sync_date_time google.protobuf.Timestamp  Indicates the last time at which the object was synced with the on-premises directory; Read-only.   on_premises_provisioning_errors OnPremisesProvisioningError repeated Errors when using synchronization during provisioning.   external_user_state string  For an external user invited to the tenant using the invitation API, this property represents the invited user\u0026rsquo;s invitation status. For invited users, the state can be PendingAcceptance or Accepted, or \u0026quot;\u0026quot; / emptystring for all other users. Returned only on $select. Supports $filter with the supported values. For example: $filter=externalUserState eq \u0026lsquo;PendingAcceptance\u0026rsquo;.   external_user_state_change_date_time google.protobuf.Timestamp  Shows the timestamp for the latest change to the externalUserState property. Returned only on $select.   refresh_tokens_valid_from_date_time google.protobuf.Timestamp  Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Returned only on $select. Read-only. Use invalidateAllRefreshTokens to reset.   sign_in_sessions_valid_from_date_time google.protobuf.Timestamp  Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.    AddMemberRequest       Field Type Label Description     group_id string  The id of the group to add a member to   account_id string  The account id to add    CreateAccountRequest       Field Type Label Description     account Account  The account resource to create    CreateGroupRequest       Field Type Label Description     group Group  The account resource to create    DeleteAccountRequest       Field Type Label Description     id string      DeleteGroupRequest       Field Type Label Description     id string      GetAccountRequest       Field Type Label Description     id string      GetGroupRequest       Field Type Label Description     id string      Group       Field Type Label Description     id string  The unique identifier for the group. Returned by default. Inherited from directoryObject. Key. Not nullable. Read-only.   display_name string  The display name for the group. This property is required when a group is created and cannot be cleared during updates. Returned by default. Supports $filter and $orderby. groupofnames MUST cn    groupofnames MUST/MAY member | | members | Account | repeated | Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable. TODO accounts (users) only for now, we can add groups with the dedicated message using oneof construct later | | owners | Account | repeated | groupofnames MAY businessCategory groupofnames MAY o groupofnames MAY ou groupofnames MAY owner, SINGLE-VALUE but there might be multiple owners | | description | string | | An optional description for the group. Returned by default. groupofnames MAY description | | gid_number | int64 | | used for exposing the user using ldap posixgroup MUST gidnumber\nposixgroup MAY authPassword posixgroup MAY userPassword posixgroup MAY memberUid -\u0026gt; groupofnames member posixgroup MAY description -\u0026gt; groupofnames | | created_date_time | google.protobuf.Timestamp | | Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created Returned by default. Read-only. | | deleted_date_time | google.protobuf.Timestamp | | For some Azure Active Directory objects (user, group, application), if the object is deleted, it is first logically deleted, and this property is updated with the date and time when the object was deleted. Otherwise this property is null. If the object is restored, this property is updated to null. Returned by default. Read-only. | | expiration_date_time | google.protobuf.Timestamp | | Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group is created. Returned by default. Read-only. | | hide_from_address_lists | bool | | True if the group is not displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups; false otherwise. Default value is false. Returned only on $select. | | visibility | string | | Specifies the visibility of an Office 365 group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as public. See group visibility options to learn more. Visibility can be set only when a group is created; it is not editable. Returned by default. | | on_premises_sync_enabled | bool | | true* if this group is synced from an on-premises directory; *false* if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter. | | on_premises_immutable_id | string | | This property is used to associate an on-premises LDAP user to the oCIS account object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user’s userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when specifying this property. Supports $filter. | | on_premises_security_identifier | string | | Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Returned by default. Read-only. | | on_premises_distinguished_name | string | | Contains the on-premises LDAP distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only. | | on_premises_sam_account_name | string | | Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Returned by default. Read-only. | | on_premises_domain_name | string | | Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Returned by default. Read-only. | | on_premises_net_bios_name | string | | Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Returned by default. Read-only. | | on_premises_last_sync_date_time | string | | Indicates the last time at which the group was synced with the on-premises directory. Returned by default. Read-only. Supports $filter. | | on_premises_provisioning_errors | OnPremisesProvisioningError | repeated | Errors when using synchronization during provisioning. |\nIdentities    Identities Represents an identity used to sign in to a user account. An identity can be provided by oCIS, by organizations, or by social identity providers such as Facebook, Google, or Microsoft, that are tied to a user account. This enables the user to sign in to the user account with any of those associated identities. They are also used to keep a history of old usernames.\n   Field Type Label Description     sign_in_type string  Specifies the user sign-in types in your directory, such as emailAddress, userName or federated. Here, federated represents a unique identifier for a user from an issuer, that can be in any format chosen by the issuer. Additional validation is enforced on issuer_assigned_id when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.   issuer string  Specifies the issuer of the identity, for example facebook.com. For local accounts (where signInType is not federated), this property is the local B2C tenant default domain name, for example contoso.onmicrosoft.com. For external users from other Azure AD organization, this will be the domain of the federated organization, for example contoso.com. Supports $filter. 512 character limit.   issuer_assigned_id string  Specifies the unique identifier assigned to the user by the issuer. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts). When signInType is set to: * emailAddress, (or starts with emailAddress like emailAddress1) issuerAssignedId must be a valid email address * userName, issuer_assigned_id must be a valid local part of an email address Supports $filter. 512 character limit.    ListAccountsRequest       Field Type Label Description     page_size int32  Optional. The maximum number of accounts to return in the response   page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the accounts to return. If no search criteria is specified then all accounts will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query email=foo@example.com returns accounts with email set to foo@example.com * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns accounts with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; |  ListAccountsResponse       Field Type Label Description     accounts Account repeated The field name should match the noun \u0026ldquo;accounts\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    ListGroupsRequest       Field Type Label Description     page_size int32  Optional. The maximum number of groups to return in the response   page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the groups to return. If no search criteria is specified then all groups will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns groups with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; |  ListGroupsResponse       Field Type Label Description     groups Group repeated The field name should match the noun \u0026ldquo;group\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    ListMembersRequest       Field Type Label Description     page_size int32     page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the groups to return. If no search criteria is specified then all groups will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns groups with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; | | id | string | | The id of the group to list members from |  ListMembersResponse       Field Type Label Description     members Account repeated The field name should match the noun \u0026ldquo;members\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    OnPremisesProvisioningError       Field Type Label Description     category string  Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.   occurred_date_time google.protobuf.Timestamp  The date and time at which the error occurred.   property_causing_error string  Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress   value string  Value of the property causing the error.    PasswordProfile       Field Type Label Description     password string  The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next login. The password must satisfy minimum requirements as specified by the user’s passwordPolicies property. By default, a strong password is required.   last_password_change_date_time google.protobuf.Timestamp  The time when this account last changed their password.   password_policies string repeated Specifies password policies for the user. This value is an enumeration with one possible value being “DisableStrongPassword”, which allows weaker passwords than the default policy to be specified. “DisablePasswordExpiration” can also be specified.   force_change_password_next_sign_in bool  true* if the user must change her password on the next login; otherwise false.   force_change_password_next_sign_in_with_mfa bool  If true, at next sign-in, the user must perform a multi-factor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multi-factor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false.    RebuildIndexRequest    RebuildIndexResponse    RemoveMemberRequest       Field Type Label Description     group_id string  The id of the group to remove a member from   account_id string  The account id to remove    UpdateAccountRequest       Field Type Label Description     account Account  The account resource which replaces the resource on the server   update_mask google.protobuf.FieldMask  The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask    UpdateGroupRequest       Field Type Label Description     group Group  The group resource which replaces the resource on the server   update_mask google.protobuf.FieldMask  The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask    AccountsService    Follow recommended Methods for rpc APIs https://cloud.google.com/apis/design/resources?hl=de#methods https://cloud.google.com/apis/design/standard_methods?hl=de#list https://cloud.google.com/apis/design/naming_convention?hl=de\n   Method Name Request Type Response Type Description     ListAccounts ListAccountsRequest ListAccountsResponse Lists accounts   GetAccount GetAccountRequest Account Gets an account   CreateAccount CreateAccountRequest Account Creates an account   UpdateAccount UpdateAccountRequest Account Updates an account   DeleteAccount DeleteAccountRequest .google.protobuf.Empty Deletes an account    GroupsService       Method Name Request Type Response Type Description     ListGroups ListGroupsRequest ListGroupsResponse Lists groups   GetGroup GetGroupRequest Group Gets an groups   CreateGroup CreateGroupRequest Group Creates a group   UpdateGroup UpdateGroupRequest Group Updates a group   DeleteGroup DeleteGroupRequest .google.protobuf.Empty Deletes a group   AddMember AddMemberRequest Group group:addmember https://docs.microsoft.com/en-us/graph/api/group-post-members?view=graph-rest-1.0\u0026amp;tabs=http   RemoveMember RemoveMemberRequest Group group:removemember https://docs.microsoft.com/en-us/graph/api/group-delete-members?view=graph-rest-1.0   ListMembers ListMembersRequest ListMembersResponse group:listmembers https://docs.microsoft.com/en-us/graph/api/group-list-members?view=graph-rest-1.0    IndexService       Method Name Request Type Response Type Description     RebuildIndex RebuildIndexRequest RebuildIndexResponse     Scalar Value Types       .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":101,"href":"/extensions/ocis_hello/grpc/","title":"GRPC API","parent":"Hello (example extension)","content":"    hello.proto  GreetRequest GreetResponse Hello   Scalar Value Types     hello.proto    GreetRequest       Field Type Label Description     name string      GreetResponse       Field Type Label Description     message string      Hello       Method Name Request Type Response Type Description     Greet GreetRequest GreetResponse     Scalar Value Types       .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":102,"href":"/extensions/settings/grpc/","title":"GRPC API","parent":"Settings","content":"    settings.proto  AddSettingToBundleRequest AddSettingToBundleResponse AssignRoleToUserRequest AssignRoleToUserResponse Bool Bundle GetBundleRequest GetBundleResponse GetPermissionByIDRequest GetPermissionByIDResponse GetValueByUniqueIdentifiersRequest GetValueRequest GetValueResponse Identifier Int ListBundlesRequest ListBundlesResponse ListOption ListOptionValue ListPermissionsByResourceRequest ListPermissionsByResourceResponse ListRoleAssignmentsRequest ListRoleAssignmentsResponse ListValue ListValuesRequest ListValuesResponse MultiChoiceList Permission RemoveRoleFromUserRequest RemoveSettingFromBundleRequest Resource SaveBundleRequest   requests and responses for settings bundles  SaveBundleResponse SaveValueRequest SaveValueResponse Setting SingleChoiceList String UserRoleAssignment Value ValueWithIdentifier Bundle.Type Permission.Constraint Permission.Operation Resource.Type BundleService PermissionService RoleService ValueService   Scalar Value Types     settings.proto    AddSettingToBundleRequest       Field Type Label Description     bundle_id string     setting Setting      AddSettingToBundleResponse       Field Type Label Description     setting Setting      AssignRoleToUserRequest       Field Type Label Description     account_uuid string     role_id string  the role_id is a bundle_id internally    AssignRoleToUserResponse       Field Type Label Description     assignment UserRoleAssignment      Bool       Field Type Label Description     default bool     label string      Bundle       Field Type Label Description     id string     name string     type Bundle.Type     extension string     display_name string     settings Setting repeated    resource Resource      GetBundleRequest       Field Type Label Description     bundle_id string      GetBundleResponse       Field Type Label Description     bundle Bundle      GetPermissionByIDRequest       Field Type Label Description     permission_id string      GetPermissionByIDResponse       Field Type Label Description     permission Permission      GetValueByUniqueIdentifiersRequest       Field Type Label Description     account_uuid string     setting_id string      GetValueRequest       Field Type Label Description     id string      GetValueResponse       Field Type Label Description     value ValueWithIdentifier      Identifier       Field Type Label Description     extension string     bundle string     setting string      Int       Field Type Label Description     default int64     min int64     max int64     step int64     placeholder string      ListBundlesRequest       Field Type Label Description     bundle_ids string repeated     ListBundlesResponse       Field Type Label Description     bundles Bundle repeated     ListOption       Field Type Label Description     value ListOptionValue     default bool     display_value string      ListOptionValue       Field Type Label Description     string_value string     int_value int64      ListPermissionsByResourceRequest       Field Type Label Description     resource Resource      ListPermissionsByResourceResponse       Field Type Label Description     permissions Permission repeated     ListRoleAssignmentsRequest       Field Type Label Description     account_uuid string      ListRoleAssignmentsResponse       Field Type Label Description     assignments UserRoleAssignment repeated     ListValue       Field Type Label Description     values ListOptionValue repeated     ListValuesRequest       Field Type Label Description     bundle_id string     account_uuid string      ListValuesResponse       Field Type Label Description     values ValueWithIdentifier repeated     MultiChoiceList       Field Type Label Description     options ListOption repeated     Permission       Field Type Label Description     operation Permission.Operation     constraint Permission.Constraint      RemoveRoleFromUserRequest       Field Type Label Description     id string      RemoveSettingFromBundleRequest       Field Type Label Description     bundle_id string     setting_id string      Resource       Field Type Label Description     type Resource.Type     id string      SaveBundleRequest     requests and responses for settings bundles       Field Type Label Description     bundle Bundle      SaveBundleResponse       Field Type Label Description     bundle Bundle      SaveValueRequest       Field Type Label Description     value Value      SaveValueResponse       Field Type Label Description     value ValueWithIdentifier      Setting       Field Type Label Description     id string     name string     display_name string     description string     int_value Int     string_value String     bool_value Bool     single_choice_value SingleChoiceList     multi_choice_value MultiChoiceList     permission_value Permission     resource Resource      SingleChoiceList       Field Type Label Description     options ListOption repeated     String       Field Type Label Description     default string     required bool     min_length int32     max_length int32     placeholder string      UserRoleAssignment       Field Type Label Description     id string  id is generated upon saving the assignment   account_uuid string     role_id string  the role_id is a bundle_id internally    Value       Field Type Label Description     id string  id is the id of the Value. It is generated on saving it.   bundle_id string     setting_id string  setting_id is the id of the setting from within its bundle.   account_uuid string     resource Resource     bool_value bool     int_value int64     string_value string     list_value ListValue      ValueWithIdentifier       Field Type Label Description     identifier Identifier     value Value      Bundle.Type       Name Number Description     TYPE_UNKNOWN 0    TYPE_DEFAULT 1    TYPE_ROLE 2     Permission.Constraint       Name Number Description     CONSTRAINT_UNKNOWN 0    CONSTRAINT_OWN 1    CONSTRAINT_SHARED 2    CONSTRAINT_ALL 3     Permission.Operation       Name Number Description     OPERATION_UNKNOWN 0    OPERATION_CREATE 1    OPERATION_READ 2    OPERATION_UPDATE 3    OPERATION_DELETE 4    OPERATION_WRITE 5 WRITE is a combination of CREATE and UPDATE   OPERATION_READWRITE 6 READWRITE is a combination of READ and WRITE    Resource.Type       Name Number Description     TYPE_UNKNOWN 0    TYPE_SYSTEM 1    TYPE_FILE 2    TYPE_SHARE 3    TYPE_SETTING 4    TYPE_BUNDLE 5    TYPE_USER 6    TYPE_GROUP 7     BundleService       Method Name Request Type Response Type Description     SaveBundle SaveBundleRequest SaveBundleResponse    GetBundle GetBundleRequest GetBundleResponse    ListBundles ListBundlesRequest ListBundlesResponse    AddSettingToBundle AddSettingToBundleRequest AddSettingToBundleResponse    RemoveSettingFromBundle RemoveSettingFromBundleRequest .google.protobuf.Empty     PermissionService       Method Name Request Type Response Type Description     ListPermissionsByResource ListPermissionsByResourceRequest ListPermissionsByResourceResponse    GetPermissionByID GetPermissionByIDRequest GetPermissionByIDResponse     RoleService       Method Name Request Type Response Type Description     ListRoles ListBundlesRequest ListBundlesResponse    ListRoleAssignments ListRoleAssignmentsRequest ListRoleAssignmentsResponse    AssignRoleToUser AssignRoleToUserRequest AssignRoleToUserResponse    RemoveRoleFromUser RemoveRoleFromUserRequest .google.protobuf.Empty     ValueService       Method Name Request Type Response Type Description     SaveValue SaveValueRequest SaveValueResponse    GetValue GetValueRequest GetValueResponse    ListValues ListValuesRequest ListValuesResponse    GetValueByUniqueIdentifiers GetValueByUniqueIdentifiersRequest GetValueResponse     Scalar Value Types       .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":103,"href":"/extensions/store/grpc/","title":"GRPC API","parent":"Store","content":"    store.proto  DatabasesRequest DatabasesResponse DeleteOptions DeleteRequest DeleteResponse Field ListOptions ListRequest ListResponse ReadOptions ReadOptions.WhereEntry ReadRequest ReadResponse Record Record.MetadataEntry TablesRequest TablesResponse WriteOptions WriteRequest WriteResponse Store   Scalar Value Types     store.proto    DatabasesRequest    DatabasesResponse       Field Type Label Description     databases string repeated     DeleteOptions       Field Type Label Description     database string     table string      DeleteRequest       Field Type Label Description     key string     options DeleteOptions      DeleteResponse    Field       Field Type Label Description     type string  type of value e.g string, int, int64, bool, float64   value string  the actual value    ListOptions       Field Type Label Description     database string     table string     prefix string     suffix string     limit uint64     offset uint64      ListRequest       Field Type Label Description     options ListOptions      ListResponse       Field Type Label Description     keys string repeated     ReadOptions       Field Type Label Description     database string     table string     prefix bool     suffix bool     limit uint64     offset uint64     where ReadOptions.WhereEntry repeated     ReadOptions.WhereEntry       Field Type Label Description     key string     value Field      ReadRequest       Field Type Label Description     key string     options ReadOptions      ReadResponse       Field Type Label Description     records Record repeated     Record       Field Type Label Description     key string  key of the recorda   value bytes  value in the record   expiry int64  time.Duration (signed int64 nanoseconds)   metadata Record.MetadataEntry repeated the associated metadata    Record.MetadataEntry       Field Type Label Description     key string     value Field      TablesRequest       Field Type Label Description     database string      TablesResponse       Field Type Label Description     tables string repeated     WriteOptions       Field Type Label Description     database string     table string     expiry int64  time.Time   ttl int64  time.Duration    WriteRequest       Field Type Label Description     record Record     options WriteOptions      WriteResponse    Store       Method Name Request Type Response Type Description     Read ReadRequest ReadResponse    Write WriteRequest WriteResponse    Delete DeleteRequest DeleteResponse    List ListRequest ListResponse stream    Databases DatabasesRequest DatabasesResponse    Tables TablesRequest TablesResponse     Scalar Value Types       .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":104,"href":"/extensions/thumbnails/grpc/","title":"GRPC API","parent":"Thumbnails","content":"    thumbnails.proto  CS3Source GetThumbnailRequest GetThumbnailResponse WebdavSource GetThumbnailRequest.ThumbnailType ThumbnailService   Scalar Value Types     thumbnails.proto    CS3Source       Field Type Label Description     path string     authorization string      GetThumbnailRequest    A request to retrieve a thumbnail\n   Field Type Label Description     filepath string  The path to the source image   thumbnail_type GetThumbnailRequest.ThumbnailType  The type to which the thumbnail should get encoded to.   width int32  The width of the thumbnail   height int32  The height of the thumbnail   webdav_source WebdavSource     cs3_source CS3Source      GetThumbnailResponse    The service response\n   Field Type Label Description     thumbnail bytes  The thumbnail as a binary   mimetype string  The mimetype of the thumbnail    WebdavSource       Field Type Label Description     url string  REQUIRED.   is_public_link bool  REQUIRED.   webdav_authorization string  OPTIONAL.   reva_authorization string  OPTIONAL.   public_link_token string  OPTIONAL.    GetThumbnailRequest.ThumbnailType    The file types to which the thumbnail can get encoded to.\n   Name Number Description     PNG 0 Represents PNG type   JPG 1 Represents JPG type    ThumbnailService    A Service for handling thumbnail generation\n   Method Name Request Type Response Type Description     GetThumbnail GetThumbnailRequest GetThumbnailResponse Generates the thumbnail and returns it.    Scalar Value Types       .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":105,"href":"/extensions/ocis_hello/running/","title":"Running","parent":"Hello (example extension)","content":"In order to use the Hello extension we need to configure and start oCIS first. After that we can run the Hello extension itself.\nConfigure and start oCIS    You can either start oCIS from a binary or build it from source.\nNo matter which way you choose, we need to create a configuration file for ownCloud Web, so that the Hello extension will be loaded in the frontend. Therefore create a file web-config.json with the following contents:\n{ \u0026#34;server\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;https://localhost:9200/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [\u0026#34;files\u0026#34;, \u0026#34;media-viewer\u0026#34;], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;settings\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/settings.js\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;accounts\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/accounts.js\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/hello.js\u0026#34; } ], \u0026#34;options\u0026#34;: { \u0026#34;hideSearchBar\u0026#34;: true } } Please note the the regististration of our Hello extension in the external_apps section. It will trigger ownCloud Web to load hello.js, the frontend bundle generated in the frontend build step.\nThe frontend bundle will be requested from the oCIS proxy and requests to our Hello extension\u0026rsquo;s API will also be passed to the oCIS proxy first. Therefore the oCIS proxy needs to be configured to forward these requests to our Hello extension. We do this by using the existing proxy-example.json file from the oCIS proxy. Just add an extra endpoint at the end for the Hello extension.\n{ \u0026#34;endpoint\u0026#34;: \u0026#34;/api/v0/greet\u0026#34;, \u0026#34;backend\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; }, { \u0026#34;endpoint\u0026#34;: \u0026#34;/hello.js\u0026#34;, \u0026#34;backend\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } In addition to all these we will also need to activate the config files we just created. Therefore set these two variables with the path to the respective config file.\nexport WEB_UI_CONFIG=\u0026lt;path to web-config.json\u0026gt; export PROXY_CONFIG_FILE=\u0026lt;path to ocis proxy config file\u0026gt; And finally start the oCIS server:\nocis server Start the extension    After oCIS is running, we can start the Hello extension.\nFor that just build ocis-hello binary.\ncd ocis-hello make And Run the service\n./bin/hello server "},{"id":106,"href":"/extensions/ocis_wopiserver/configuration-with-ocis/","title":"Running","parent":"WOPI server","content":"Running ocis    In order to run this extension we will need to run oCIS first. For that clone and build the oCIS single binary from the github repo https://github.com/owncloud/ocis. After that we will need to create a config file for phoenix so that we can load the WOPI app in the frontend. Create a file web-config.json with the following contents.\n{ \u0026#34;server\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;https://localhost:9200/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [\u0026#34;files\u0026#34;, \u0026#34;media-viewer\u0026#34;], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;settings\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/settings.js\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;accounts\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/accounts.js\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;wopi\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/wopi.js\u0026#34; } ], \u0026#34;options\u0026#34;: { \u0026#34;hideSearchBar\u0026#34;: true } } Here we can add the url for the js file from where the WOPI app will be loaded.\nAfter that we will need a configuration file for oCIS where we can specify the path for the WOPI app in the backend. For this you can use the existing proxy-example.json file from the ocis-proxy repo. Just add an extra endpoint at the end for the WOPI app.\n{ \u0026#34;endpoint\u0026#34;: \u0026#34;/api/v0/wopi\u0026#34;, \u0026#34;backend\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; }, { \u0026#34;endpoint\u0026#34;: \u0026#34;/wopi.js\u0026#34;, \u0026#34;backend\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } In addition to all these we will also need to set the config files we just modified. For that set these variables with the path to the config files.\nexport WEB_UI_CONFIG=\u0026lt;path to web-config.json\u0026gt; export PROXY_CONFIG_FILE=\u0026lt;path to ocis proxy config file\u0026gt; And finally start the ocis server\nocis server After this we will need to start the oCIS WOPI server service. For that just build oCIS WOPI server binary.\ncd ocis-wopi make And Run the service\nbin/wopiserver server "},{"id":107,"href":"/extensions/ocis_hello/settings/","title":"Settings","parent":"Hello (example extension)","content":"oCIS provides an settings extension that other extensions can use to make settings accessible to users.\nIn case of the Hello extension administrator users are able to change the greeter message.\nSettings are stored and presented to the user by the oCIS settings extension. It also exposes endpoints for registering and manipulating so called settings bundles.\nThe settings defined through settings bundles can be changed by authenticated users in ownCloud Web, if they have enough permissions to edit them. As a result, your service only has to register a settings bundle and permissions for it and oCIS settings takes care of everything else. Your service can simply use the settings values that were set by users.\nIn this chapter we want to show you how to register a settings bundle, the settings permissions and how to use the respective values that were set by users. We do this by customizing the greeter phrase from our greeter service in the Hello extension.\nYou can find the source code, especially how it\u0026rsquo;s integrated into the service, in the following files:\n pkg/service/v0/service.go for the requests pkg/command/server.go for the integration of registerSettingsBundles into the service start  Register a settings bundle and set the permissions    In order to register a settings bundle, you need to create a request message and then send it to the BundleService of oCIS settings through a gRPC call. The same applies for setting permissions on the setting bundles.\nCreate a bundle request    request := \u0026amp;settings.SaveBundleRequest{ Bundle: \u0026amp;settings.Bundle{ Id: bundleIDGreeting, Name: \u0026#34;greeting\u0026#34;, DisplayName: \u0026#34;Greeting\u0026#34;, Extension: \u0026#34;ocis-hello\u0026#34;, Type: settings.Bundle_TYPE_DEFAULT, Resource: \u0026amp;settings.Resource{ Type: settings.Resource_TYPE_SYSTEM, }, Settings: []*settings.Setting{ { Id: settingIDGreeterPhrase, Name: \u0026#34;phrase\u0026#34;, DisplayName: \u0026#34;Phrase\u0026#34;, Description: \u0026#34;Phrase for replies on the greet request\u0026#34;, Resource: \u0026amp;settings.Resource{ Type: settings.Resource_TYPE_SYSTEM, }, Value: \u0026amp;settings.Setting_StringValue{ StringValue: \u0026amp;settings.String{ Required: true, Default: \u0026#34;Hello\u0026#34;, MaxLength: 15, }, }, }, }, }, The request holds only one field, which is a SettingsBundle. It consists of an Identifier, a DisplayName and a list of Settings.\n The Extension and the ID of the bundle are required and have to be alphanumeric (- and _ are allowed as well). The ID has to stay stable - if you change it, existing settings will not be migrated to the new identifier. The DisplayName is required and may contain any UTF8 character. It will be shown in the settings user frontend in a generated form, so please try to be descriptive. You can change the DisplayName at any time. Settings is the list of settings you want to make available with this settings bundle. In this example, there is only one setting defined - a string setting for the phrase our greeter uses in the response. You can explore more types of settings in the settings package. All of them come with their own characteristics and validations. For the phrase setting we decided to set it to Required, so that it can\u0026rsquo;t be empty, and to set a MaxLength of 15 characters, so that the phrase is not too long. The ID of the setting is again particularly important, as this is used for referencing the setting in other requests. It has to fulfill the same rules as the other ID attributes. Please also take the time to set a Description, in order to provide accessibility in the generated forms as good as possible.  Send bundle request to oCIS settings    This request message can be sent to the BundleService of oCIS settings like this:\nsettings := settings.NewBundleService(\u0026#34;com.owncloud.api.settings\u0026#34;, mclient.DefaultClient) response, err := bundleService.SaveBundle(context.Background(), request) We run this request on every start of the Hello extension so that the settings service always has the most recent version of the settings bundle.\nCreate a permission settings request    In order to grant admins access to the setting we need to create a AddSettingToBundleRequest.\npermissionRequests := []*settings.AddSettingToBundleRequest{ { BundleId: ssvc.BundleUUIDRoleAdmin, Setting: \u0026amp;settings.Setting{ Id: \u0026#34;d5f42c4b-e1b6-4b59-8eca-fc4b9e9f2320\u0026#34;, Resource: \u0026amp;settings.Resource{ Type: settings.Resource_TYPE_SETTING, Id: settingIDGreeterPhrase, }, Name: \u0026#34;phrase-admin-read\u0026#34;, Value: \u0026amp;settings.Setting_PermissionValue{ PermissionValue: \u0026amp;settings.Permission{ Operation: settings.Permission_OPERATION_READWRITE, Constraint: settings.Permission_CONSTRAINT_OWN, }, }, }, }, } Send permission settings request    The AddSettingToBundleRequest then needs to be send to the settings service:\nresponse, err := bundleService.AddSettingToBundle(context.Background(), permissionRequests[i]) Use settings value    We registered the greeter phrase setting for a reason: We want to allow authenticated administrator users to customize how users are greeted by the Hello extension. In order to do this, we need to ask oCIS settings on every request, what the greeter phrase of the authenticated user is.\nAccount UUID    The settings request has one important prerequisite: As our service is stateless, we need to know the account UUID of the authenticated user the incoming POST request to our greeter service is coming from. As that POST request is coming through oCIS proxy, there is an HTTP header x-access-token that holds a JWT with the account UUID in it. We just have to dismantle the JWT to get the UUID. There is a middleware for that in ocis-pkg. You can look up the server configuration for that middleware in pkg/server/http/server.go. In essence, it dismantles the x-access-token, extracts the account UUID and makes it available in the context.\nIt can be subsequently retrieved from the context like this:\naccountID, ok := metadata.Get(ctx, middleware.AccountID) Create request    With the account UUID we can build an Identifier for the request to oCIS settings as follows:\nrq := settings.GetValueByUniqueIdentifiersRequest{ AccountUuid: accountID, SettingId: settingIDGreeterPhrase, } response, err := s.vsClient.GetValueByUniqueIdentifiers(context.Background(), \u0026amp;rq) In order to get the setting we need to know which user (AccountUuid) is requesting the settings value and which setting he is requesting (SettingId).\nSend request    This request message can be sent to the settings extension like this:\nvalueService := settings.NewValueService(\u0026#34;com.owncloud.api.settings\u0026#34;, mclient.DefaultClient) response, err := valueService.GetSettingsValue(ctx, request) The request gives us the default or customized greeting phrase, depending on wether it has already been changed by an administrator.\nConclusion    You have learned how to register settings bundles, how to get the account UUID of the authenticated user and how to query the settings service for settings values.\n"},{"id":108,"href":"/extensions/ocis_hello/testing/","title":"Testing","parent":"Hello (example extension)","content":"This repository provides a general guideline for creating tests for an oCIS extension. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.\nUnit tests    Unit tests generally live inside *_test.go files in the /pkg directory. One such example in this extension is in /pkg/service/v0/service_test.go. Similarly the unit test for the protobuf generated code can also be written just like in /pkg/proto/hello.pb_test.go.\nIntegration tests    There are mainly 2 types of integration tests, namely HTTP tests, and GRPC tests. These tests mostly live in /pkg/proto directory where all the protobuf definitions are specified. The examples for the HTTP integration tests are in /pkg/proto/hello.pb.web_test.go whereas the GRPC tests are in /pkg/proto/hello.pb.micro_test.go.\nEnd-to-End tests    For extensions with an UI, we can also write end-to-end tests using the Nightwatch test framework. These tests live in /ui/tests directory. We can reuse already existing Gherkin steps from the ownCloud Web tests here.\nRunning the tests    Unit and integration tests    The unit and integration tests are run using the simple go test command. If you wish to run all the tests with the coverage you can just use make command.\nmake test You can also run a specific file with the go test command\ngo test \u0026lt;path to package or file\u0026gt; End-to-End tests    Running end-to-end tests is a bit more complicated than unit and integration tests. First of all we will need a complete oCIS setup with the Hello extension running. Please refer to foo\nThen we need to set up the test infrastructure following the instructions form here\nNow we can run the tests. The tests will take several configuration variables which can be found here. Without configuration, most of the defaults will work. We just need make sure to set these values through env variable.\nexport WEB_PATH=\u0026lt;path to ownCloud Web directory\u0026gt; export OCIS_SKELETON_DIR=\u0026lt;path to the skeleton directory\u0026gt; export WEB_UI_CONFIG=\u0026lt;path to the config.json file used by web\u0026gt; While running oCIS we should always use a configuration file for ownCloud Web because our tests will read this file and sometimes even change it which cannot be done if you use environment variables or the default values.\nWith all this in place we can just run the tests with a simple make command. First go to the Hello repository\ncd \u0026lt;path to hello\u0026gt; Then run\nmake test-acceptance-webui To run just one feature you can run\nmake test-acceptance-webui \u0026lt;path-to-feature file\u0026gt;:\u0026lt;line-number\u0026gt; "},{"id":109,"href":"/extensions/settings/values/","title":"Settings Values","parent":"Settings","content":"A Settings Value is the value an authenticated user has chosen for a specific setting, defined in a settings bundle. For choosing settings values as a user the sole entry point is the ocis-web extension provided by this service.\nIdentifying settings values    A settings value is uniquely identified by four attributes. Three of them are coming from the definition of the setting within it\u0026rsquo;s settings bundle (see Settings Bundles for an example). The fourth identifies the user.\n extension: Key of the extension that registered the settings bundle, bundleKey: Key of the settings bundle, settingKey: Key of the setting as defined within the bundle, accountUuid: The UUID of the authenticated user who has saved the setting.  When requests are going through ocis-proxy, the accountUuid attribute can be set to the static keyword me instead of using a real UUID. ocis-proxy will take care of minting the UUID of the authenticated user into a JWT, providing it in the HTTP header as x-access-token. That UUID is then used in this service, to replace me with the actual UUID of the authenticated user.  Example of stored settings values    { \u0026#34;values\u0026#34;: { \u0026#34;language\u0026#34;: { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;settingKey\u0026#34;: \u0026#34;language\u0026#34;, \u0026#34;accountUuid\u0026#34;: \u0026#34;5681371f-4a6e-43bc-8bb5-9c9237fa9c58\u0026#34; }, \u0026#34;listValue\u0026#34;: { \u0026#34;values\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;de\u0026#34; } ] } }, \u0026#34;timezone\u0026#34;: { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;settingKey\u0026#34;: \u0026#34;timezone\u0026#34;, \u0026#34;accountUuid\u0026#34;: \u0026#34;5681371f-4a6e-43bc-8bb5-9c9237fa9c58\u0026#34; }, \u0026#34;listValue\u0026#34;: { \u0026#34;values\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34; } ] } } } } gRPC endpoints    The obvious way of modifying settings is the ocis-web extension, as described earlier. However, services can use the respective gRPC endpoints of the ValueService to query and modify settings values as well. The gRPC endpoints require the same identifier attributes as described above, so for making a request to the ValueService you will have to make sure that the accountUuid of the authenticated user is available in your service at the time of the request.\n"},{"id":110,"href":"/clients/web/theming/","title":"Theming","parent":"ownCloud Web","content":"    Introduction Ways of providing a theme Configuring a theme The \u0026ldquo;general\u0026rdquo; options The \u0026ldquo;logo\u0026rdquo; options The \u0026ldquo;loadingPage\u0026rdquo; options Design Tokens  Extendability Breakpoints Colors Font sizes Sizes Spacing   Example theme     Introduction    By providing your own theme, you can customize the user experience for your own ownCloud installation. This is being achieved by providing a json file that contains text snippets (like brand name and slogan), paths to images (e.g. logos or favicon) and design tokens for various color, sizing and spacing parameters.\nThis page documents the setup and configuration options, and provides an empty template for you to get started.\nWays of providing a theme    Generally, your theming configuration lives inside a .json file, e.g. theme.json. To load this file, it needs to be correctly referenced inside your config/config.json (example configurations can be found on GitHub).\nTo reference your theme, you have two options:\n Using a URL, e.g. \u0026quot;theme\u0026quot;: \u0026quot;https://externalurl.example.com/theme-name/theme.json\u0026quot;,. To avoid CORS issues, please make sure that you host the URL on the same URL as your ownCloud web hosting. For development and testing purposes, you can store your theme.json inside packages/web-runtime/themes/{theme-name}/ and reference it in the config.json. However, this isn\u0026rsquo;t recommended for production use since your changes may get lost when updating oCIS or the web app in OC10.  Hint: If no theme is provided or the loading of your custom theme fails, the standard ownCloud theme will be loaded as a fallback. However, this doesn\u0026rsquo;t stop you from correctly loading a theme that is wrongly formatted, so please read the instructions below carefully.\nConfiguring a theme    Inside your theme.json, you can provide multiple themes as first-level objects. Currently, only the one called \u0026quot;default\u0026quot; gets applied when the frontend application is started. In the future, we\u0026rsquo;ll provide functionality to dynamically switch between those themes.\nYou can use the snippet below as a base for writing your own theme by replacing the strings and image file paths accordingly. Also, make sure to delete the comments from the file.\n{ \u0026#34;default\u0026#34;: { \u0026#34;general\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;ownCloud\u0026#34;, \u0026#34;slogan\u0026#34;: \u0026#34;ownCloud – A safe home for all your data\u0026#34; }, \u0026#34;logo\u0026#34;: { \u0026#34;sidebar\u0026#34;: \u0026#34;https://externalurl.example.com/url/for/remote/theme/assets/logo.svg\u0026#34;, \u0026#34;favicon\u0026#34;: \u0026#34;https://externalurl.example.com/url/for/remote/theme/assets/favicon.jpg\u0026#34;, \u0026#34;login\u0026#34;: \u0026#34;relative/path/for/local/theme/logo.svg\u0026#34; }, \u0026#34;loginPage\u0026#34;: { \u0026#34;autoRedirect\u0026#34;: true, \u0026#34;backgroundImg\u0026#34;: \u0026#34;relative/path/for/local/theme/background.jpg\u0026#34; }, \u0026#34;designTokens\u0026#34;: {} }, \u0026#34;alternative\u0026#34;: {}, \u0026#34;dark\u0026#34;: {} } See below for the meaning of all the first-level objects inside a single theme and recommendations on how to make best use of them:\nThe \u0026ldquo;general\u0026rdquo; options    Here, you can specify a \u0026quot;name\u0026quot; and a \u0026quot;slogan\u0026quot; string. The name gets used in the HTML page \u0026lt;title\u0026gt;, and both of them are shown on various screens (e.g. login, loading, error and public share pages).\nThe \u0026ldquo;logo\u0026rdquo; options    Here, you can specify the images to be used in the \u0026quot;sidebar\u0026quot;, for the \u0026quot;favicon\u0026quot; and on the \u0026quot;login\u0026quot; page. Various formats are supported and it\u0026rsquo;s up to you to decide which one fits best to your use case.\nThe \u0026ldquo;loadingPage\u0026rdquo; options    Using the \u0026quot;autoRedirect\u0026quot; boolean, you can specify whether the user is shown a login page before possible getting redirected to your LDAP/OIDC/OAuth provider. If it is set to true, you can set the background image for said login page by providing an image file in the \u0026quot;backgroundImg\u0026quot; option.\nDesign Tokens    To further customize your ownCloud instance, you can provide your own styles. To give you an idea of how a working design system looks like, feel free to head over to the ownCloud design tokens for inspiration.\nHint: All the variables are initialized using the ownCloud design tokens and then overwritten by your theme variables. Therefore, you don\u0026rsquo;t have to provide all the variables and can use the default ownCloud colors as a fallback.\nIn general, the theme loader looks for a designTokens key inside your theme configuration. Inside the designTokens, it expects to find a colorPalette, fontSizes and spacing collection. The structure is outlined below:\n{ \u0026#34;default\u0026#34;: { \u0026#34;general\u0026#34;: {}, \u0026#34;designTokens\u0026#34;: { \u0026#34;breakpoints\u0026#34;: {}, \u0026#34;colorPalette\u0026#34;: {}, \u0026#34;fontSizes\u0026#34;: {}, \u0026#34;sizes\u0026#34;: {}, \u0026#34;spacing\u0026#34;: {} } } } Please follow this structure to make sure your theming configuration can be loaded correctly.\nExtendability    If you define different key-value pairs inside any of the objects in \u0026quot;designTokens\u0026quot;, they will get loaded and initialized as CSS custom properties but don\u0026rsquo;t take any effect in the user interface. This gives you an opportunity to, for example, customize extensions from within the theme in the web runtime (and not the extension itself).\nBreakpoints    If you\u0026rsquo;d like to set different breakpoints than the default ones in the ownCloud design system, you can set them using theming variables.\nBreakpoint variables get prepended with --oc-breakpoint-, so e.g. \u0026ldquo;large-default\u0026rdquo; creates the custom CSS property --oc-breakpoint-large-default.\n{ \u0026#34;breakpoints\u0026#34;: { \u0026#34;xsmall-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xlarge\u0026#34;: \u0026#34;\u0026#34; } } Colors    For the color values, you can use any valid CSS color format, e.g. hex (#fff), rgb (rgb(255,255,255)) or color names (white).\nColor variables get prepended with --oc-color-, so e.g. \u0026ldquo;background-default\u0026rdquo; creates the custom CSS property --oc-color-background-default.\nAgain, you can use the ownCloud design tokens as a reference implementation.\n{ \u0026#34;colorPalette\u0026#34;: { \u0026#34;background-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;background-highlight\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;background-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;border\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-bg\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-border\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-text-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-text-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-brand-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-brand-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-inverse\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-muted\u0026#34;: \u0026#34;\u0026#34; } } Font sizes    You can change the default, large and medium font sizes according to your needs. If you need more customization options regarding font sizes, please open an issue on GitHub with a detailed description.\nFont size variables get prepended with --oc-font-size-, so e.g. \u0026ldquo;default\u0026rdquo; creates the custom CSS property --oc-font-size-default.\n{ \u0026#34;fontSizes\u0026#34;: { \u0026#34;default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium\u0026#34;: \u0026#34;\u0026#34; } } Sizes    Use sizing variables to change various UI elements, such as icon and logo appearance, table row or checkbox sizes, according to your needs. If you need more customization options regarding sizes, please open an issue on GitHub with a detailed description.\nSize variables get prepended with --oc-size-, so e.g. \u0026ldquo;icon-default\u0026rdquo; creates the custom CSS property --oc-size-icon-default.\n{ \u0026#34;sizes\u0026#34;: { \u0026#34;form-check-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height-small\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height-table-row\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;icon-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;max-height-logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;max-width-logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;width-medium\u0026#34;: \u0026#34;\u0026#34; } } Spacing    Use the six spacing options (xsmall | small | medium | large | xlarge | xxlarge) to create a more (or less) condensed version of the user interface. If you need more customization options regarding sizes, please open an issue on GitHub with a detailed description.\nSpacing variables get prepended with --oc-space-, so e.g. \u0026ldquo;xlarge\u0026rdquo; creates the custom CSS property --oc-space-xlarge.\n{ \u0026#34;spacing\u0026#34;: { \u0026#34;xsmall\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xlarge\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xxlarge\u0026#34;: \u0026#34;\u0026#34; } } Example theme    An empty template for your custom theme is provided below, and you can use the instructions above to set it up according to your needs. Please note that since changing themes at runtime is not yet supported it only consists of a default theme.\n{ \u0026#34;default\u0026#34;: { \u0026#34;general\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;slogan\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;logo\u0026#34;: { \u0026#34;sidebar\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;favicon\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;login\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;notFound\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;loginPage\u0026#34;: { \u0026#34;autoRedirect\u0026#34;: true, \u0026#34;backgroundImg\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;designTokens\u0026#34;: { \u0026#34;breakpoints\u0026#34;: { \u0026#34;xsmall-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large-max\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xlarge\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;colorPalette\u0026#34;: { \u0026#34;background-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;background-highlight\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;background-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;border\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-bg\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-border\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-text-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;input-text-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-brand-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-brand-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-danger-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-inverse-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-passive-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-primary-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-success-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-hover\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;swatch-warning-muted\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-inverse\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;text-muted\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;fontSizes\u0026#34;: { \u0026#34;default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;sizes\u0026#34;: { \u0026#34;form-check-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height-small\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;height-table-row\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;icon-default\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;max-height-logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;max-width-logo\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;width-medium\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;spacing\u0026#34;: { \u0026#34;xsmall\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;small\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;medium\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;large\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xlarge\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xxlarge\u0026#34;: \u0026#34;\u0026#34; } } } } "},{"id":111,"href":"/ocis/development/tracing/","title":"Tracing","parent":"Development","content":"  By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:\n Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 14250:14250 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.  You can enable and configure tracing on each service individually. For example, enable tracing in Reva when starting the oCIS single binary like this: REVA_TRACING_ENABLED=true \\ REVA_TRACING_ENDPOINT=localhost:6831 \\ REVA_TRACING_COLLECTOR=http://localhost:14268/api/traces \\ ./bin/ocis server  Enabling and configuring tracing on oCIS itself will forward the configuration to all services: OCIS_TRACING_ENABLED=true \\ OCIS_TRACING_ENDPOINT=localhost:6831 \\ OCIS_TRACING_COLLECTOR=http://localhost:14268/api/traces \\ ./bin/ocis server If you want to set individual tracing configuration for each service, make sure to set OCIS_TRACING_ENABLED=false.\n   Make the actual request that you want to trace. Open up the Jaeger UI to analyze request traces.  For more information on Jaeger, please refer to their Documentation.\n"},{"id":112,"href":"/clients/web/deployments/","title":"Deployments","parent":"ownCloud Web","content":"Showcases of different scenarios of deploying ownCloud Web.\n"},{"id":113,"href":"/clients/web/testing/","title":"Running acceptance tests","parent":"ownCloud Web","content":"    Introduction  Unit \u0026amp; Integration Tests Acceptance Tests  Prerequisites Prepare \u0026amp; start web Start Docker Run acceptance tests Watch the test run         Introduction    In order to allow us to make changes quickly, often and with a high level of confidence, we heavily rely on tests within the web repository.\nAll the steps below require you to have the web repo cloned locally and dependencies installed. This can be achieved by running\n$ git clone https://github.com/owncloud/web.git $ cd web $ yarn Unit \u0026amp; Integration Tests    We have a steadily growing coverage of both unit and integration tests. You can run them locally via\n$ yarn test:unit $ yarn test:integration You can also specify which tests to run by giving a path param, like so: yarn test:unit packages/\u0026lt;app-name\u0026gt;/tests/unit/path/to/test.spec.js.\nAcceptance Tests    At ownCloud, we have decided to adopt Docker as the main environment for developing our application. This also applies for running our acceptance tests. To run the tests without Docker on your local machine, please refer to the manual testing guide\nPrerequisites    To run acceptance tests with Docker, please make sure you have the following tools installed:\n docker docker-compose yarn node  Please also make sure to point http://host.docker.internal/ to 127.0.0.1 by adding it to your hosts.\nPrepare \u0026amp; start web    Bundle the web frontend, which then gets mounted into the respective backends. It also gets recompiled on changes.\n$ yarn build:w Start Docker    Using compose, you can start the required Docker containers by running\n$ docker compose up oc10 ocis vnc selenium and make sure there are no conflicting ports and everything runs smoothly. You can check if everything has worked by opening https://host.docker.internal:9200 (oCIS) and http://host.docker.internal:8080 (OC10) and logging in using the demo user (admin/admin).\nIf you\u0026rsquo;re using a M1 Mac, you need to use seleniarm/standalone-chromium:4.0.0-beta-1-20210215for now. To do so, export SELENIUM_IMAGE=seleniarm/standalone-chromium:4.0.0-beta-1-20210215.\nRun acceptance tests    Depending on the backend you\u0026rsquo;re running the tests on, you can either run\n$ yarn test:acceptance:oc10 tests/acceptance/features/path/to/test for ownCloud 10.X or\n$ yarn test:acceptance:ocis tests/acceptance/features/path/to/test for oCIS acceptance tests.\nWatch the test run    To watch the tests while running, open http://host.docker.internal:6080/ in the browser to access your VNC client.\n"},{"id":114,"href":"/extensions/storage/releasing/","title":"Releasing","parent":"Storage","content":"    Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.\nPreparation     Before releasing, make sure that reva has been updated to the desired version  Release     Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. Prefix the tag with the submodule storage/v. git tag -s storage/vx.x.x -m \u0026#34;release vx.x.x\u0026#34; git push origin storage/vx.x.x Wait for CI and check that the GitHub release was published.  Congratulations, you just released the storage submodule!\n"},{"id":115,"href":"/clients/web/testing-manual/","title":"Running acceptance tests - manual","parent":"ownCloud Web","content":"    Setup Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   Setup backend  ownCloud 10 oCIS   Setup ownCloud Web Run tests  with oC10 backend with oCIS backend Visual Regression Testing  Running the visual regression tests Updating the snapshots     Available settings to be set by environment variables Tips  too many open files   Acceptance Tests in CI  1. web Repo 2. oCIS Repo       Setup Selenium    There are multiple ways to run Selenium:\n Setup using Docker Setup using Docker Desktop for Mac Setup using a standalone Selenium server  Setup using Docker      Set the environment variables SELENIUM_HOST as localhost and SERVER_HOST in the format http://\u0026lt;ip_addr\u0026gt;:9100.\n  If you are a Linux user, run docker run --rm -d --network=\u0026quot;host\u0026quot; -v /dev/shm:/dev/shm -v ${REMOTE_UPLOAD_DIR:-$PWD/tests/acceptance/filesForUpload}:${LOCAL_UPLOAD_DIR:-/uploads}:ro --name web-tests-selenium selenium/standalone-chrome-debug\n  If you are a Mac user, run docker run --rm -d -p ${SELENIUM_PORT:-4444}:4444 -p 5900:5900 -v /dev/shm:/dev/shm -v ${REMOTE_UPLOAD_DIR:-$PWD/tests/acceptance/filesForUpload}:${LOCAL_UPLOAD_DIR:-/uploads}:ro --name web-tests-selenium selenium/standalone-chrome-debug\n This command creates a docker container which uses port forwarding instead of host networking which is not supported on Mac  If you are running selenium with these docker commands, you can run these commands from the web folder, then you wont need to set REMOTE_UPLOAD_DIR.\n  Setup using Docker Desktop for Mac    In order to run acceptance tests with selenium running in Docker Desktop for Mac while having ownCloud Server and Web running as services on the host machine, localhost will not work as URL. Use the Docker host ip 172.17.0.1 or its alias host.docker.internal instead. This requires adjusting all relevant config files to use host.docker.internal instead of localhost (config.json in Web and config/config.php in oC10) and changing the web OIDC-callback url. Set the SERVER_HOST and BACKEND_HOST environment variables accordingly. In order to use the same url for development on the host machine, define it as an alias to 127.0.0.1 in /etc/hosts. After all these changes Web will be accessible at http://host.docker.internal:9100 for both development and acceptance tests.\nSetup using standalone Selenium server    When running a standalone Selenium server, make sure to set the environment variable SELENIUM_HOST, SELENIUM_PORT and LOCAL_UPLOAD_DIR accordingly.\nSetup backend    ownCloud 10     set up the ownCloud 10 backend clone and install the testing app into ownCloud  oCIS    In order to run the acceptance tests you need to run oCIS using the oCIS storage driver. Also, you need to enable basic auth on the server with these environment variables.\nPROXY_ENABLE_BASIC_AUTH=true STORAGE_HOME_DRIVER=owncloud STORAGE_USERS_DRIVER=owncloud\n set up the oCIS backend  if you are a Mac user, you need to start the server with additional environment variables: STORAGE_HOME_DATA_SERVER_URL='http://host.docker.internal:9155/data' STORAGE_DATAGATEWAY_PUBLIC_URL='https://host.docker.internal:9200/data' STORAGE_USERS_DATA_SERVER_URL='http://host.docker.internal:9158/data' STORAGE_FRONTEND_PUBLIC_URL='https://host.docker.internal:9200' PROXY_ENABLE_BASIC_AUTH=true PROXY_OIDC_ISSUER='https://host.docker.internal:9200' IDP_INSECURE='true' IDP_IDENTIFIER_REGISTRATION_CONF='\u0026lt;web-path\u0026gt;/tests/acceptance/mac-identifier-registration.yml' IDP_ISS='https://host.docker.internal:9200' IDP_TLS='true' (\u0026lt;web-path\u0026gt; needs to be replaced with the your local clone of ownCloud Web)    Setup ownCloud Web     build Web start the Web server if you are running web against the oCIS backend, clone the testing app git clone git@github.com:owncloud/testing.git tests/testing-app  Run tests      set SERVER_HOST to point at the URL where the Web web pages are served, for example \u0026ldquo;http://localhost:9100\u0026rdquo;\n  set BACKEND_HOST to point to the URL of the backend, for example \u0026ldquo;http://localhost/owncloud/\u0026rdquo;\n  to be able to run federation tests, additional setup is needed:\n Install and set up a second ownCloud server-instance that is accessible by a different URL. That second server-instance must have its own database and data directory. clone and install the testing app into the second ownCloud server-instance from http://github.com/owncloud/testing . when running the acceptance tests use REMOTE_BACKEND_HOST environment variable to define its address, for example, REMOTE_BACKEND_HOST=http://\u0026lt;ip_address_of_second_ownCloud_server-instance\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-files-to-test\u0026gt;    set the SELENIUM_HOST environment variable to your host that runs selenium, mostly localhost\n  set the SELENIUM_PORT environment variable to your selenium port, mostly 4444\n  set the TESTING_DATA_DIR when running the tests on oCIS pointing to the testing data that includes data like skeleton directories. The testing directory is available here. This is handled automatically by the testrunner while running the tests in oc10.\n  The feature files are located in the \u0026ldquo;tests/acceptance/features\u0026rdquo; subdirectories.\nsee available settings for further setup if needed\nwith oC10 backend     run yarn test:acceptance:oc10 \u0026lt;feature-files-to-test\u0026gt;  with oCIS backend     run yarn test:acceptance:ocis \u0026lt;feature-files-to-test\u0026gt; If you are a mac user, run STORAGE_HOME_DATA_SERVER_URL='http://host.docker.internal:9155/data' STORAGE_DATAGATEWAY_PUBLIC_URL='https://host.docker.internal:9200/data' STORAGE_USERS_DATA_SERVER_URL='http://host.docker.internal:9158/data' STORAGE_FRONTEND_PUBLIC_URL='https://host.docker.internal:9200' PROXY_ENABLE_BASIC_AUTH=true PROXY_OIDC_ISSUER='https://host.docker.internal:9200' IDP_INSECURE='true' IDP_IDENTIFIER_REGISTRATION_CONF='./tests/acceptance/mac-identifier-registration.yml' IDP_ISS='https://host.docker.internal:9200' IDP_TLS='true' yarn test:acceptance:ocis \u0026lt;feature-files-to-test\u0026gt;  Visual Regression Testing    The test suite consists of snapshots of UI components which can be compared for visual regression testing when running the acceptance tests. These comparisons are done in the existing scenarios. You can check the existing snapshots of the components in the directory /tests/vrt/baseline.\nRunning the visual regression tests    When you run the acceptance tests as usual, all the visual regression comparisons are skipped. To run the acceptance test suite with the visual comparison enabled you need to set the env variable, VISUAL_TEST to true\neg.\nVISUAL_TEST=true SERVER_HOST=http://\u0026lt;server_host\u0026gt; BACKEND_HOST=http://\u0026lt;backend_host\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-file-to-test\u0026gt; Updating the snapshots    If there is some change in the components, and you want to update the snapshots of the components you can run the tests with UPDATE_VRT_SCREENSHOTS set to true. When this env variable is set, the testrunner will ignore if the visual comparison fails and updates the baseline images with the latest images if the comparison fails.\neg.\nVISUAL_TEST=true UPDATE_VRT_SCREENSHOTS=true SERVER_HOST=http://\u0026lt;server_host\u0026gt; BACKEND_HOST=http://\u0026lt;backend_host\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-file-to-test\u0026gt; note Visual regression testing may not be completely reliable every time as small changes such as window size and screen resolution may affect the result. For better results it is recommended that you run the tests using the selenium/standalone-chrome-debug image of selenium and window size of 1280x1024\nsee available settings for further setup if needed\nAvailable settings to be set by environment variables    These values can be set using the environment variables to configure yarn test:acceptance:oc10 and yarn test:acceptance:ocis to match your local test environment.\n   setting meaning default     SERVER_HOST web URL http://localhost:9100   BACKEND_HOST ownCloud server URL (or reva service url for running with oCIS) http://localhost:8080   BACKEND_USERNAME ownCloud administrator username admin   BACKEND_PASSWORD ownCloud administrator password admin   SELENIUM_HOST selenium server host, if not set yarn will start selenium automaticallyif running the selenium docker container as mentioned above set to localhost    SELENIUM_PORT port of selenium server 4444   SCREEN_RESOLUTION width and height in px to set the browser resolution to e.g. 375x812 empty = fullscreen   REMOTE_UPLOAD_DIR path to filesForUpload directory, used when uploading files through api ./tests/acceptance/filesForUpload   LOCAL_UPLOAD_DIR filesForUpload directory available for selenium for direct uploadsIf using selenium-docker and example above, set it as /uploads.If running local selenium, set value same as REMOTE_UPLOAD_DIR (please, remember to use absolute path) /uploads   REMOTE_BACKEND_HOST ownCloud remote server URL http://localhost:8080   RUN_ON_OCIS Running the tests using the oCIS backend false   OCIS_REVA_DATA_ROOT Data directory of oCIS /var/tmp/reva   TESTING_DATA_DIR Testing data directory for new users -   WEB_UI_CONFIG Path for the web config file (usually in the dist folder) -   VISUAL_TEST Run the visual regression comparison while running the acceptance tests -   UPDATE_VRT_SCREENSHOTS Update the baseline snapshots with the latest images for visual regression tests -    Tips    too many open files    If tests were running fine and then suddenly start to fail your system might run into open file limits. In that case you will see messages in the oCIS log output that look like this:\n2020-05-12 11:33:43.974552 I | http: Accept error: accept tcp [::]:9200: accept4: too many open files; retrying in 1s\nIn that case increase the open file limits, how to do that would be beyond the scope of this documentation.\nAcceptance Tests in CI    In the CI we run the UI tests using different backends on different repos. We use commit IDs to indicate the version of the backend or testrunner we want to use. These commit IDs should be regularly updated in the .drone.star file to keep the CI up to date. We run web UI tests in the following repos in the CI.\n1. web Repo    In the owncloud/web repo, we run the tests using both the oc10 backend and the oCIS backend. For the oc10 backend, we use the owncloudci/core docker image which runs the latest daily-master-qa version of owncloud.\nFor the oCIS backend, we use the Commit ID from the owncloud/ocis repo to indicate which version of backend to use. This can be specified in the .drone.env file.\n# The version of oCIS to use in pipelines that test against oCIS OCIS_COMMITID=352034d9eba8be8c4bc4b80421f3c0093e7d472c OCIS_BRANCH=master If the version you want to run is on a different branch from master, you also need to change the branch name.\nIn order to check if new tests are compatible with oCIS, after changing the commit id and the branch name, we can create a draft PR in owncloud/web which triggers the CI, and we can see the result there.\n2. oCIS Repo    We follow the same approach in the owncloud/ocis repo too. In order to run the UI tests in CI we use commit IDs from web which can be changed in the .drone.env file.\n# The test runner source for UI tests WEB_COMMITID=3cab4e32bca513f14f59127a0387b44a409763a3 WEB_BRANCH=master This is the commit ID of web indicating the version of testrunner we want to use. If the version is on a branch other than master, we will also need to change the branch name.\n"},{"id":116,"href":"/extensions/accounts/releasing/","title":"Releasing","parent":"Accounts","content":"    Requirements Releasing  Package Hierarchy       Requirements    You need a working installation of the Go programming language installed to build the assets for a working release.\nReleasing    After adding changes to the accounts package within oCIS and testing them locally, you want to update the compiled assets to the oCIS binary.\nTo achieve this, you have to run a Go command and add the results to your PR. The preferred way to do this is to run make generate in the root of the repository and then commit the resulting changes to your branch/PR.\nPackage Hierarchy     ocis  ocis-accounts    "},{"id":117,"href":"/extensions/settings/releasing/","title":"Releasing","parent":"Settings","content":"    Requirements Releasing  Package Hierarchy       Requirements    You need a working installation of the Go programming language installed to build the assets for a working release.\nReleasing    After adding changes to the settings package within oCIS and testing them locally, you want to update the compiled assets to the oCIS binary.\nTo achieve this, you have to run a Go command and add the results to your PR. The preferred way to do this is to run make generate in the root of the repository and then commit the resulting changes to your branch/PR.\nPackage Hierarchy     ocis  ocis-settings    "},{"id":118,"href":"/extensions/settings/glossary/","title":"Glossary","parent":"Settings","content":"In the context of this extension and oCIS in general, we are using the following terminology.\nConfiguration     System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings     Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences     User settings Subset of \u0026ldquo;Settings\u0026rdquo; e.g. preferred language of a user  Settings Bundle     Collection of related settings Registered by an oCIS extension  Settings Value     Manifestation of a setting for a specific user E.g. used for customization (at runtime) in ocis-web ocis-web-settings extension for modifying settings values is provided by this service Can be queried and modified by other oCIS extensions  "},{"id":119,"href":"/ocis/development/build-docs/","title":"Documentation","parent":"Development","content":"    Build the documentation Add changes to the documentation     Build the documentation    For building the documentation you need to have Make and Go 1.14 or higher installed.  Just run make -C docs docs-serve from within the root level of the oCIS git repository. This will make documentation available on localhost:1313 and also do a hot reload if you change something in the (non autogenerated) documentation files.\nAdd changes to the documentation    Please keep this documentation in sync with the oCIS source code.\nChanges on the documentation are automatically applied to this site when merged to the master branch.\n"},{"id":120,"href":"/ocis/deployment/preparing_server/","title":"Preparing a server","parent":"Deployment","content":"    Example for Hetzner Cloud     Example for Hetzner Cloud      create server on Hetzner Cloud. Set labels \u0026ldquo;owner\u0026rdquo; and \u0026ldquo;for\u0026rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing\n  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare\n  Access server via ssh as root\n  Create a new user\n$ adduser --disabled-password --gecos \u0026quot;\u0026quot; admin\n  Add user to sudo group\n$ usermod -aG sudo admin\n  Install docker\napt update apt install docker.io   Add user to docker group\nusermod -aG docker admin\n  Install docker-compose via\ncurl -L \u0026quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\u0026quot; -o /usr/local/bin/docker-compose\n(docker compose version 1.27.4 as of today)\n  Make docker-compose executable\nchmod +x /usr/local/bin/docker-compose\n  Add users pub key to\nmkdir /home/admin/.ssh echo \u0026#34;\u0026lt;pubkey\u0026gt;\u0026#34; \u0026gt;\u0026gt; /home/admin/.ssh/authorized_keys` chown admin:admin -R /home/admin/.ssh   Secure ssh daemon by editing /etc/ssh/sshd_config\nPermitRootLogin no ChallengeResponseAuthentication no PasswordAuthentication no UsePAM no   restart sshd server to apply settings systemctl restart sshd\n  Login as the user you created\n  "},{"id":121,"href":"/ocis/development/continuous-integration/","title":"Continuous Integration","parent":"Development","content":"    Concepts Things done in CI Flags in commit message and PR title  Knowledge base       oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.\nConcepts    The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration. We enforce Starlark format guidelines with Bazel Buildifier. You can format the .drone.star file by running make ci-format.\nUpon running the pipeline, your branch gets merged to the master branch. This ensures that we always test your changeset if as it was applied to the master of oCIS. Please note that this does not apply to the pipeline definition (.drone.star).\nThings done in CI     static code analysis linting running UI tests running ownCloud 10 test suite against oCIS build and release docker images build and release binaries build and release documentation  Flags in commit message and PR title    You may add flags to your commit message or PR title in order to speed up pipeline runs and take load from the CI runners.\n  [CI SKIP]: no CI is run on the commit or PR\n  [full-ci]: deactivates the fail early mechanism and runs all available test (as default only smoke tests are run)\n  [docs-only]: please add this flag, if you only changed documentation. This will only trigger documentation related CI steps.\n  [tests-only]: please add this flag, if you only changed tests or test-related tooling. You do not need to add a changelog for tests-only changes.\n  Knowledge base      My pipeline fails because some CI related files or commands are missing.\nPlease make sure to rebase your branch onto the latest master of oCIS. It could be that the pipeline definition (.drone.star) was changed on the master branch. This is the only file, that will not be auto merged to master upon pipeline run. So things could be out of sync.\n  How can I see the YAML drone pipeline definition?\nIn order to see the Yaml pipeline definition you can use the drone-cli to convert the Starlark file.\ndrone starlark If you experience a \u0026quot;build\u0026quot; struct has no .title attribute you need a newer version of drone-cli.\nYou currently need to build it yourself from this source code. If you are not using master as source, please ensure that this PR is included.\n   "},{"id":122,"href":"/ocis/license/","title":"License","parent":"oCIS - ownCloud Infinite Scale","content":"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"},{"id":123,"href":"/extensions/","title":"Extensions","parent":"ownCloud","content":""},{"id":124,"href":"/","title":"ownCloud","parent":"","content":"    Developer Documentation We love open source Join the oCIS Community     Developer Documentation    Welcome to our developer documentation. Here you can find developer documentation on:\n oCIS server oCIS extensions Clients like:  ownCloud Web - the new web frontend for oCIS and ownCloud ownCloud Android app ownCloud iOS app ownCloud Desktop Syncing Client   Integrations  We love open source    The oCIS server is Apache v2 licensed. The lower storage layer of oCIS is defined by the CS3 APIs and implemented in the REVA project. Our goal is to develop the CS3 APIs to an open standard and collaborate on the open source REVA reference implementation for CS3 APIs.\nYou can also find all client sources on GitHub.\nJoin the oCIS Community    The server repository on GitHub is a good entry point to the oCIS project. In addition to that there are also ownCloud projects for clients for iOS, Android, the major Desktop platforms and ownCloud Web.\nTo chat about development, join our public chat\nIf you want to help and improve ownCloud or oCIS, start coding or open issues on GitHub in the related repository.\nWe are very happy to hear your feedback and ideas!\n"},{"id":125,"href":"/extensions/ocis_hello/","title":"Hello (example extension)","parent":"Extensions","content":"When getting started with the oCIS development developers need to learn about the building blocks of oCIS extensions. Without guidance or orientation of the why and what of an extension they may start feeling lost. The ocis-hello repository serves as a blueprint for oCIS extensions. It allows developers to get started with oCIS extension development by looking at the code, configuration and documentation.\n  graph TD subgraph ow[ocis-web] owh[ocis-web-hello] end owh ---|\"greet()\"| ows[ocis-hello-server]  ocis-hello provides a simple hello world example with\n a protobuf based greeter API a grpc service implementing the API a vue.js frontend using the API configuration options for admins  It can be integrated into ownCloud Web as documented in the extensions docs.\n"},{"id":126,"href":"/clients/","title":"Clients","parent":"ownCloud","content":""},{"id":127,"href":"/ocis/release_notes/","title":"Release Notes","parent":"oCIS - ownCloud Infinite Scale","content":"ownCloud Infinite Scale 1.10.0 Technology Preview    Version 1.10.0 brings new features, usability improvements and bug fixes. ownCloud Web 4.0.0 now supports ONLYOFFICE document editors and can search/filter files and folders. Furthermore it brings a new context menu for file actions that can be accessed via right click and comes with a big bunch of other notable improvements and fixes.\nThe most prominent changes in ownCloud Infinite Scale 1.10.0 and ownCloud Web 4.0.0 comprise:\n ownCloud Web now supports ONLYOFFICE document editors when used with ownCloud Classic Server. See the documentation for more information on requirements and configuration. ownCloud Web now supports global search and filtering for the current folder via the search bar. Both will work when ownCloud Web is used with ownCloud Classic. The Infinite Scale capabilities are currently limited to filtering the current folder. #5415 A context menu for a file/folder which contains related actions has been introduced to ownCloud Web (in addition to the actions in the right sidebar). #5160 The context menu for a file/folder in ownCloud Web can be opened via right click and using the \u0026ldquo;\u0026hellip;\u0026rdquo; menu. #5102 As a first step of a larger redesign of the sharing dialog in ownCloud Web, the autocomplete and share recipient selection have been redesigned. #5554 The right sidebar navigation in ownCloud Web has been redesigned. Moving away from structuring all functionality on a single view using accordions, each section now has their own, dedicated view. #5549 The maximum number of sharing autocomplete suggestions in ownCloud Web can now be configured. See the documentation for more information. #5506 ownCloud Web works now with ownCloud Classic when OpenID Connect authentication is used. #5536 ownCloud Web now respects the server-side capability for user avatars. #5178 The login page has been optimized in regards of accessibility. #5376 The Infinite Scale backend is being further hardened by fixing known issues, improving error handling and stabilizing existing features.  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.9.0 Technology Preview    Version 1.9.0 is a feature and maintenance release. More features have been added and the platform was matured further. ownCloud Web 3.4.1 brings usability improvements and new features. The right sidebar now shows details about the selected resource and offers previews for images. View options for the file list and a feedback button have been added.\nThe most prominent changes in ownCloud Infinite Scale 1.9.0 and ownCloud Web 3.4.1 comprise:\n The right sidebar in ownCloud Web now shows details about the selected file/folder (e.g., size, owner, sharing status, modification time). #5161 The right sidebar in ownCloud Web now shows previews for images. #5501 View options for the file list have been introduced in ownCloud Web. Currently this allows to change the number of files/folders per page and to show/hide hidden files. [#5408]https://github.com/owncloud/web/pull/5408 #5470 A feedback button has been added to the top bar. It guides the user to an ownCloud Web feedback survey. If undesired, this feature can be disabled in the ownCloud Web configuration. #5468 Received shares can now be accepted/declined as batches in the \u0026ldquo;Shared with me\u0026rdquo; view. #5374 The oCIS backend now supports to enable extensions by name. #2229 Storage drivers can be set to read only. #2230 Micro service init has been improved for faster startup. #1705  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.8.0 Technology Preview    Version 1.8.0 is a maintenance and bug fix release. ownCloud Web 3.3.0 has received further performance and major accessibility improvements.\nThe most prominent changes in ownCloud Infinite Scale 1.8.0 and ownCloud Web 3.3.0 comprise:\n ownCloud Web is now fully translatable on Transifex #5042 ownCloud Web now supports keyboard navigation #4937 #5013 #5027 #5147 ownCloud Web now supports screenreaders #5182 #5166 #5058 #5046 #5010 ownCloud Web has received many performance improvements (image cache, fixes to avoid duplicate resource loading, asynchronous image loading) #5194 The file lists in ownCloud Web are now paginated to control loading times #5224 #5309 ownCloud Web now supports TypeScript #5194  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.7.0 Technology Preview    Version 1.7.0 is a maintenance and bug fix release. ownCloud Web 3.2.0 has received further performance improvements and minor usability tweaks.\nThe most prominent changes in ownCloud Infinite Scale 1.7.0 and ownCloud Web 3.2.0 comprise:\n The S3 storage driver can now be used for testing using the configuration values in the documentation #1886 A confirmation dialog for public link deletion has been added #5125 To improve performance, the file types which are being rendered as previews can now be specified using an allow list in config.json #5159 A warning has been added when a user tries to leave the page while an operation is in progress (e.g., an upload) #2590  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.6.0 Technology Preview    To get the full potential out of the microservice architecture, version 1.6.0 introduces a dynamic service registry to ownCloud Infinite Scale. The dynamic service registry facilitates the configuration and contributes to the scalability of the platform. ownCloud Web 3.1.0 has received further improvements for accessibility like keyboard navigation and it comes with performance improvements by loading certain elements asynchronously.\nThe most prominent changes in ownCloud Infinite Scale 1.6.0 and ownCloud Web 3.1.0 comprise:\n Introducing a dynamic service registry: The dynamic service registry takes care of dynamically assigning network addresses between the oCIS services and enables the services to find and work with each other automatically. It replaces the previous hardcoded service configuration which simplifies the initial setup and makes distributed, scale-out environments a lot easier to handle. #1509 User avatars are now fetched asynchronously, enabling a non-blocking loading of the file list and improving user experience #1295 Further accessibility and keyboard navigation improvements have been added #1979 #1991 #4942 #4965 #4991 The OCS user deprovisioning endpoint has been added, enabling a full user deprovisioning including storage. #1962 Text files (.txt) now have previews (thumbnails) #1988 The translations in the Settings and Accounts extensions have been improved #2003  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  Changed oCIS JSON share driver storage format    Related: #1655\nThe storage format of the oCIS JSON share driver has changed. You will be affected if you plan to update from a previous version of oCIS to oCIS 1.6.0, you have shared files or folders with users or groups and you are using the oCIS JSON share driver, which is currently the default share driver.\nImplications:\n manual action required  Our recommended update strategy to oCIS 1.6.0 is:\n let users note all their shares with users and groups they set up in oCIS stop oCIS move / delete the JSON share driver storage file /var/tmp/ocis/storage/shares.json update to oCIS 1.6.0 let users recreate their shares  Fixed / changed oCIS metadata storage driver filesystem path    Related: #1956\nThe filesystem path of the oCIS metadata storage driver has changed (been fixed). You will be affected if you plan to update from a previous version of oCIS to oCIS 1.6.0 and are using the oCIS storage driver for metadata storage.\nImplications:\n manual action required  Our recommended update strategy to oCIS 1.6.0 is:\n let users backup all their data stored in oCIS stop oCIS prune all oCIS data in /var/tmp/ocis update to oCIS 1.6.0 recreate user accounts (can be skipped if an external IDP is used) let users upload all their data again let users recreate their shares  If you want to use oCIS 1.6.0 without following our recommended update strategy, you can also keep the pre 1.6.0 behaviour by setting this environment variable: export STORAGE_METADATA_ROOT=/var/tmp/ocis/storage/users This may lead to faulty behaviour since both the metadata and user storage driver will be storing their data in the same filesystem path.\nownCloud Infinite Scale 1.5.0 Technology Preview    Version 1.5.0 is a maintenance release for the Infinite Scale backend with a number of bug fixes and smaller improvements. For ownCloud Web it brings further accessibility improvements and a whole bunch of new features. The web interface can now be branded and there is a new, dedicated view in the left sidebar to list all link shares of a user.\nThe most prominent changes in ownCloud Infinite Scale 1.5.0 and ownCloud Web 3.0.0 comprise:\n Config file based theming for ownCloud Web (see https://owncloud.dev/clients/web/theming/ for more information) #4822 A dedicated view for \u0026ldquo;Shared by link\u0026rdquo; has been added #4881 The file list table has been replaced and is now more performant and accessible #4627 Many further accessibility improvements have been added, e.g., around the app switcher, sidebar, sharing list and focus management User storage quotas will now be enforced #1557 The \u0026ldquo;owncloud\u0026rdquo; storage driver now supports file integrity checking with checksums #1629  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.4.0 Technology Preview    Version 1.4.0 brings new features, bug fixes and further improvements. The accessibility of ownCloud Web has greatly improved, paving the way for WCAG 2.1 compliance. The Infinite Scale platform has received major improvements regarding memory consumption. The user storage quota feature has been implemented and folder sizes are now properly calculated. It is now possible to write log messages to log files and to specify configuration values using a config file.\nThe most prominent changes in ownCloud Infinite Scale 1.4.0 and ownCloud Web 2.1.0 comprise:\n ownCloud Web is now able to use pre-signed url downloads for password protected shares #38376 Reduced the memory consumption of the runtime drastically (by a factor of 24) #1762 Initial quota support to impose storage space restrictions for users (query / set) #1405 Folder sizes are now calculated correctly (tree size accounting) #1405 Added the possibility to write the log to a file with the option to write separated log files by service #1816 Added the possibility to specify configuration values for the entire platform in a single config file #1762 Added GIF and JPEG file types for thumbnail generation (allows to display thumbnails and use the media viewer for GIF/JPEG images) #1791 Fixes for the trash bin feature #1552  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  Changed oCIS storage driver file layout    Related: #1452\nDespite a breaking change in the oCIS storage driver file layout, data is not automatically migrated. You will be affected if you plan to update from a previous version of oCIS to oCIS 1.4.0 and are using the oCIS storage driver, which is currently the default storage driver.\nImplications:\n manual action required  Our recommended update strategy to oCIS 1.4.0 is:\n let users backup all their data stored in oCIS stop oCIS prune all oCIS data in /var/tmp/ocis update to oCIS 1.4.0 recreate user accounts (can be skipped if an external IDP is used) let users upload all their data again let users recreate their shares  If you already updated to oCIS 1.4.0 without our recommended update strategy you will see no data in oCIS anymore, even after a downgrade to your previous version of oCIS. But be assured that your data is still there.\nYou have to follow these steps to be able to access your data again in oCIS:\n stop oCIS navigate to /var/tmp/ocis/storage/users/nodes/root/ in this directory you will find directories with UUID as names. These are the home folders of the oCIS users. Find the ones with content your oCIS users uploaded to oCIS. create an temporary directory eg. /tmp/dereferenced-ocis-storage copy the data from oCIS to the temporary directory while dereferencing symlinks. On Linux you can do this by running cp --recursive --dereference /var/tmp/ocis/storage/users/nodes/root/ /tmp/dereferenced-ocis-storage you now have a backup of all users data in /tmp/dereferenced-ocis-storage and can follow our recommended update strategy above  ownCloud Infinite Scale 1.3.0 Technology Preview    Version 1.3.0 is a regular maintenance and bugfix release. It provides the latest improvements to users and administrators.\nChanges in Reva    Reva is one of the fundamental components of oCIS. It has these significant changes:\n Align href URL encoding with oc10 #1425 Fix public link webdav permissions #1461 Purge non-empty dirs from trash-bin #1429 Checksum support #1400 Set quota when creating home directory in EOS #1477 Add functionality to share resources with groups #1453 Add s3ng storage driver, storing blobs in a s3-compatible blobstore #1428  Changes in oCIS    These are the major changes in oCIS:\n Update ownCloud Web to v2.0.2: #1776 Enhancement - Update go-micro to v3.5.1-0.20210217182006-0f0ace1a44a9: #1670 Enhancement - Update reva to v1.6.1-0.20210223065028-53f39499762e: #1683 Enhancement - Add initial nats and kubernetes registry support: #1697  More details about this release can be found in the full ownCloud Infinite Scale changelog and ownCloud Web changelog.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.2.0 Technology Preview    Version 1.2.0 brings more functionality and stability to ownCloud Infinite Scale. ownCloud Web now loads a lot faster and is prepared for the introduction of accessibility features. An initial implementation for S3 storage support is available and file integrity checking has been introduced.\nThe most prominent changes in ownCloud Infinite Scale 1.2.0 and ownCloud Web 2.0.0 comprise:\n The initial loading time for ownCloud Web has been reduced by handling dependencies more efficiently (the bundle size of ownCloud Web has been drastically reduced) #4584 Preparations for accessibility features have been implemented to work towards WCAG 2.1 compliance #4594 Initial S3 storage support is available #1429 File integrity checking has been introduced: When uploading files, Infinite Scale now makes sure that the file integrity is protected between server and clients by comparing checksums #1400 Public link passwords are now stored as hashes to improve security #1462  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes    We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  Fix IDP service user    Related: #1390, #1569\nAfter upgrading oCIS from a previous version to oCIS 1.2.0 you will not be able to login in ownCloud Web\nImplications:\n manual action required  Migration steps:\n Stop oCIS Open following file /var/tmp/ocis/storage/metadata/nodes/root/accounts/820ba2a1-3f54-4538-80a4-2d73007e30bf Change password to $2y$12$ywfGLDPsSlBTVZU0g.2GZOPO8Wap3rVOpm8e3192VlytNdGWH7x72 Change onPremisesSamAccountName to idp Change preferredName to idp Save the changed file Start oCIS You now are able to lock back in again.  Please have a look at how to secure an oCIS instance since you seem to run it with default secrets.\nReset shares    Related: #1626\nAfter upgrading oCIS from a previous version to oCIS 1.2.0 you will will not be able to use previous shares or create new shares.\nImplications:\n manual action required loss of shares (manual resharing is needed, files will not be lost)  Migration steps:\n Stop oCIS Delete following file /var/tmp/ocis/storage/shares.json Start oCIS Recreate shares manually  ownCloud Infinite Scale 1.1.0 Technology Preview    Version 1.1.0 is a hardening and patch release. It ships with the latest version of ownCloud Web and brings a couple of minor improvements. The minor version increase is needed due to non-backwards compatible changes in configuration. The documentation has been updated to reflect the changes. Please note that this version is still a Technology Preview and not suited for production use.\nThe most prominent changes in ownCloud Infinite Scale 1.1.0 and ownCloud Web 1.0.1 comprise:\n Performance and stability improvements for installations with multiple concurrent users Simplified configuration by introducing the new environment variable OCIS_URL Beta release of ownCloud performance scripts Update ownCloud web to v1.0.1 Update reva to v1.5.1  You can also read the full ownCloud Infinite Scale changelog for further details on what has changed.\nownCloud Infinite Scale 1.0.0 Technology Preview    We are pleased to announce the availability of ownCloud Infinite Scale 1.0.0 Technology Preview which is released as the first public version of the new Infinite Scale platform.\nMicroservice architecture    ownCloud Infinite Scale is following the microservices architectural pattern. It is implemented as a set of microservices which are independent of each other. They are coupled with well-defined APIs. This architecture fosters a lot of benefits that we were aiming for with the new design for oCIS:\n Every service is independent, comparably small and brings it\u0026rsquo;s own webserver, backend/APIs and frontend components Each service runs as a separate service on the system, increasing security and stability Scalability: High performance demands can be fulfilled by scaling and distributing of services Testability: Each service can be tested on its own due to well-defined APIs and functionality Protocol-driven development using protobuf High-performance communication between services through gRPC Multi-platform support powered by Golang - only minimal dependency on platform packages Cloud-native deployment, update, monitoring, logging, tracing and orchestration strategies  Key figures     The all-new ownCloud Web frontend is shipped as part of the platform OpenID Connect is the future-proof technology choice for authentication An Identity Provider is bundled to ease deployment and operations. It can be replaced with an external OpenID IdP, if desired Automatically built and fully maintained Docker containers are available Flexible configuration through environment variables, config files or command-line flags Database-less architecture - metadata and data are kept together in the storage as a single source of truth Native storage capabilities are used where like native versioning and trashbin Public APIs like WebDAV and OCS have been kept compatible with ownCloud 10 A secure and flexible framework to create extensions  Supported platforms     Linux-amd64 Darwin-amd64 Experimental: Windows, ARM (e.g., Raspberry Pi, Termux on Android)  Client support    All official ownCloud Clients support the Infinite Scale server with the following versions:\n Desktop \u0026gt;= 2.7 Android \u0026gt;= 2.15 iOS \u0026gt;= 1.2  Architecture components    ownCloud Infinite Scale is built as a modular framework in which components can be scaled individually. It consists of\n a user management service a settings service a frontend service a storage backend service a built-in IdP an application gateway/proxy  These components can be deployed in a multi-tier deployment architecture. See the documentation for an overview of the services.\nOperation modes    Standalone mode (with oCIS storage driver)    In standalone mode oCIS uses its built-in orchestrator to start all necessary services. This allows you to run oCIS on a single node without any outside dependencies like docker-compose, kubernetes or even a webserver. It will start an OpenID IdP and create a self-signed certificate. You can start right away by navigating to https://localhost:9200.\nSingle services scaleout    oCIS allows you to scale individual services using well-known orchestration frameworks like docker-compose, dockerSwarm and kubernetes.\nBridge mode with ownCloud 10 backend    For the product transition phase, ownCloud Infinite Scale comes with an operation mode (\u0026ldquo;bridge mode\u0026rdquo;) that allows a hybrid deployment, between both server generations to operate the new web frontend with ownCloud 10 and Infinite Scale in parallel. This setup allows the ownCloud Web frontend to operate with both server generations and provides the foundation to migrate users gradually to the new backend.\nRequirements for the bridge mode\n ownCloud Server \u0026gt;= 10.6 Open ID Connect is used for user authentication The Graph API app is installed on ownCloud Server The latest client versions are rolled-out to users (required for OpenID Connect support). See the documentation for more information.  See the documentation on how to deploy Infinite Scale in bridge mode.\nTechnology Preview\nownCloud Infinite Scale is currently in Technology Preview. The bridge mode should only be used in non-production environments.\n What to expect?    This is the first promoted public release of ownCloud Infinite Scale, released as \u0026ldquo;Technical Preview\u0026rdquo;. Infinite Scale is not yet ready for production installations. Technical audiences will be able to get a good understanding of the potential of ownCloud\u0026rsquo;s new platform.\nVersion 1.0.0 comes with the base functionality for sync and share with a much higher performance-, stability- and security-level compared to all available platforms. Based on ten years of experience in enterprise sync and share and a long standing collaboration with the biggest global science organizations this new platform will exceed what content collaboration is today.\nHow to get started?    One of the most important objectives for oCIS was to ease the setup of a working instance dramatically. Since oCIS is built with Google\u0026rsquo;s powerful Go language it supports the single-file-deployment: Installing oCIS 1.0.0 is as easy as downloading a single file, applying execution permission to it and get started. No more fiddling around with complicated LAMP stacks.\nDeployment Options    Given the architecture of oCIS, there are various deployment options based on the users requirements. In our experience setting up the LAMP stack for ownCloud 10 was difficult for many users. Therefore a big emphasis was put on easy yet functional deployment strategies.\nSingle binary  Delivery as single binary    The single binary is the best option to test the new ownCloud Infinite Scale 1.0.0 Technical Preview release on a local machine. Follow these instructions to get the platform running in the most simple way:\n  Download the binary\nLinux curl https://download.owncloud.com/ocis/ocis/1.0.0/ocis-1.0.0-linux-amd64 -o ocis\nMacOS curl https://download.owncloud.com/ocis/ocis/1.0.0/ocis-1.0.0-darwin-amd64 -o ocis\n  Make it executable\nchmod +x ocis\n  Run it\n./ocis server\n  Navigate to https://localhost:9200 and log in to ownCloud Web (admin:admin)\n  Production environments will need a more sophisticated setup, see https://owncloud.dev/ocis/deployment/ for more information.\n Docker  Containerized Setup    For more sophisticated setups we recommend using one of our docker setup examples. See the documentation for a setup with Traefik as a reverse proxy which also includes automated SSL certificate provisioning using Letsencrypt tools.   ownCloud Web Features     Framework  Framework     User avatars (compatible with oC 10 API) Alerts for information/errors Notifications (bell icon, compatible with oC 10 API) Extension points Available extensions  Media Viewer (images and videos) Draw.io     Files  Files     Listing and browsing the hierarchy Sorting by columns (name/size/updated) Breadcrumb Thumbnail previews for images (compatible with oC 10 API and Thumbnails service API) Upload (file/folder), using the TUS protocol for reliable uploads Download (file) Rename Copy Move Delete Indicators for resources shared with people (including subfiles and subfolders) Indicators for resources shared by link (including subfiles and subfolders) Quick actions  Add people Create public link on-the-fly and copy it to the clipboard   Favorites (view + add/remove) Shared with me (view) Shared with others (view) Deleted files Versions (list/restore/download/delete) File/folder search   Sharing  Sharing with People (user/group shares)     Adding people to a resource  Adding multiple people at once (users and groups) Autocomplete search to find users Roles: Viewer / Editor (folder) / Advanced permissions (granular permissions) Expiration date   Listing people who have access to a resource  People can be listed when a resource is directly shared and when it\u0026rsquo;s indirectly shared via a parent folder When listing people of an indirectly shared resource, there is a \u0026ldquo;via\u0026rdquo; indicator that guides to the directly shared parent Every person can recognize the owner of a resource Every person can recognize their role The owner of a resource can recognize persons that added other people (reshare indicator) Editing persons Removing persons     Links  Sharing with Links     Private links (copy) Public links  Adding public links on single files and folders  Roles: Viewer / Editor (folder) / Contributor (folder) / Uploader (folder) Password-protection Expiration date   Listing public links  Public links can be listed when a resource is directly shared and when it\u0026rsquo;s indirectly shared via a parent folder When listing public links of an indirectly shared resource, there is a \u0026ldquo;via\u0026rdquo; indicator that guides to the directly shared parent Copying existing public links Editing existing public links Removing existing public links   Viewing public links     User Profile  User Profile     Display basic profile information (user name, display name, e-mail, group memberships) \u0026ldquo;Edit\u0026rdquo; button guides to ownCloud 10 user settings (when used with oC 10)   User Settings  Basic user settings     Language of the web interface    oCIS Backend Features     Storage  Storage    The default oCIS storage driver deconstructs a filesystem to be able to efficiently look up files by fileid as well as path. It stores all folders and files by a uuid and persists share and other metadata using extended attributes. This allows using the linux VFS cache using stat syscalls instead of a database or key/value store. The driver implements trash, versions and sharing. It not only serves as the current default storage driver, but also as a blueprint for future storage driver implementations.  IDM  User and group management     Functionality available via API and frontend (\u0026ldquo;Accounts\u0026rdquo; extension) User listing (API/FE) User creation (API/FE) User deletion (API/FE) User activation/blocking (API/FE) Role assignment for users (API/FE) User editing (API) Multi-select in the frontend (delete \u0026amp; block/activate) Group creation (API) Add/remove users to/from groups (API) Group deletion (API) Create/read/update/delete users and groups (CLI)   Settings  Settings    The settings service provides APIs for other services for registering a set of settings as Bundle. It also provides a pluggable extension for ownCloud Web which provides dynamically built web forms, so that users can customize their own settings. Some well known settings are directly used by ownCloud Web for adapted user experience, e.g. the UI language. Services can query the users' chosen settings for customized backend and frontend operations as needed.\nRoles \u0026amp; Permissions System    Infinite Scale follows a role-based access control model. Based on permissions for actions which are provided by the system and by extensions, roles can be composed. Ultimately, these roles can be assigned to users to define what users are permitted to do. This model allows a segregation of duties for administration and allows granular control of how different types of users (e.g., Guests) can use the platform.\n Currently available permissions: Manage accounts (gives access to the internal user management), manage roles (allows assigning roles to users) The current roles are exemplary default roles which are used for demonstration purposes  \u0026ldquo;Admin\u0026rdquo;: Has the permissions to \u0026ldquo;manage accounts\u0026rdquo; and to \u0026ldquo;manage roles\u0026rdquo; \u0026ldquo;User\u0026rdquo;: Does not have any dedicated permission \u0026ldquo;Guest\u0026rdquo;: Does not have any dedicated permission   Currently a user can only have one role Users with the role \u0026ldquo;Admin\u0026rdquo; can assign/unassign roles to/from other users (as part of the permission to \u0026ldquo;manage roles\u0026rdquo;)   APIs  APIs     WebDAV OCS    Known issues     There are feature differences depending on the operation mode, e.g., no user management with ownCloud Web and oC 10 backend Public links do not yet respect the given role (a recipient has full permissions no matter which role has been set) Resharing does not yet work as expected  Share recipients can create public links with higher permissions than they originally had Share recipients can add other people but they will not be able to access the data   Sharing indicators in the file list will only be shown after opening the right sidebar for a resource Users can\u0026rsquo;t change their password yet Folder sizes will not be calculated Cleanups are not yet available (e.g., shares of a deleted user will not be removed) Sharing from the desktop client does not work yet There are no notifications yet There can be issues with access tokens not being refreshed correctly, leading to interruptions, e.g., during uploads Deleting non-empty folders from the trash bin does not work Emptying the whole trash bin does not work  For feedback and bug reports, please use the public issue tracker.\n"},{"id":128,"href":"/ocis/release_roadmap/","title":"Release Roadmap","parent":"oCIS - ownCloud Infinite Scale","content":"You may have asked yourself why there are major version 1 tags in our GitHub repository but the Readme still states ownCloud Infinite Scale is currently in a technical preview state. It will be subject to a lot of changes and is not yet ready for general production deployments.. How can that be if its a major version 1?\nOur initial and also our current plan is to stick to SemVer as versioning scheme. But sometimes there are other factors which cross your plans. Therefore we started releasing oCIS with version 1.0.0 Tech Preview.\nownCloud Infinite Scale 1.x technology preview releases    All oCIS releases within major version 1 will be handled as technology previews. There will be no supported releases in terms of us guaranteeing production readiness. We will do releases every 3 weeks, and they will sometimes only include bugfixes, but also introduce new features or optimizations.\nWe will be fixing bugs if you report them and truly appreciate every report and contribution. Depending on the individual case, we will publish bugfix releases or add the fix to the next minor release.\nWe are going to stick to major version 1 until we feel confident about running oCIS in production environments. As a consequence of this we cannot raise the major version, like SemVer requires it, even if we need to introduce breaking changes. We will do our best to avoid breaking changes. If there is no way to circumvent this, we will add an automatic migration or at least point out manual migration steps, since we as oCIS developers are already using oCIS on a personal basis. The best place to see if a breaking change happens is our changelog which is available for every release. If things are not working out for you please contact us immediately. We want to know about this and solve it for you.\nIt isn\u0026rsquo;t our intention to scare you with our addendum \u0026ldquo;Tech Preview\u0026rdquo;. We want you to have a clear picture of what you can expect from oCIS. You could take it as a disclaimer or even compare it to running an Linux kernel in alpha stage. It can be very pleasing to be on the latest codebase but you could also find yourself with a lot of problems arising because of that.\nYou clearly can expect a totally new experience of file-sync and share with oCIS and we want you to use it now - but with understanding and caution.\nownCloud Infinite Scale 2.x general availability releases    Starting with oCIS 2.0.0 release we will strictly stick to SemVer, just as we do right now for ownCloud Server. The general availability release will also mean that we can recommend oCIS warmly to everyone. Use it to store your precious family pictures or you confidential company data!\n"},{"id":129,"href":"/integration/","title":"Integrations","parent":"ownCloud","content":""},{"id":130,"href":"/ocis/getting-started/demo-users/","title":"Demo Users","parent":"Getting Started","content":"As long as oCIS is released as technology preview it will come with default demo users. These enable you to do quick testing and developing.\nFollowing users are available in the demo set:\n   username password email role groups     admin admin admin@example.org admin users   einstein relativity einstein@example.org user users, philosophy-haters, physics-lovers, sailing-lovers, violin-haters   marie radioactivity marie@example.org user users, physics-lovers, polonium-lovers, radium-lovers   moss vista moss@example.org admin users   richard superfluidity richard@example.org user users, philosophy-haters, physics-lovers, quantum-lovers    You may also want to run oCIS with only your custom users by deleting the demo users.\n"},{"id":131,"href":"/ocis/getting-started/","title":"Getting Started","parent":"oCIS - ownCloud Infinite Scale","content":"    oCIS online demo Run oCIS  Binaries Docker   Usage  Login to ownCloud Web Basic Management Commands       oCIS online demo    We have an oCIS demo instance running on ocis.owncloud.com where you can get a first impression of it.\nWe also have some more variations of oCIS running and continuously deployed to reflect different scenarios in that oCIS might be used.\nRun oCIS    We are distributing oCIS as binaries and Docker images.\nThe examples in this document assume that oCIS is accessed from the same host as it is running on (localhost). If you would like to access oCIS remotely please refer to the Basic Remote Setup section. Especially to the notes about setting the PROXY_HTTP_ADDR and OCIS_URL enviroment variables.  You can find more deployment examples in the deployment section.\nBinaries    You can find the latest official release of oCIS at our download mirror or on GitHub. The latest build from the master branch can be found at our download mirrors testing section.\nTo run oCIS as binary you need to download it first and then run the following commands. For this example, assuming version 1.10.0 of oCIS running on a Linux AMD64 host:\n# download curl https://download.owncloud.com/ocis/ocis/1.10.0/ocis-1.10.0-linux-amd64 --output ocis # make binary executable chmod +x ocis # run ./ocis server The default primary storage location is /var/tmp/ocis. You can change that value by configuration.\noCIS by default relies on Multicast DNS (mDNS), usually via avahi-daemon. If your system has a firewall, make sure mDNS is allowed in your active zone.  Docker    Docker images for oCIS are available on Docker Hub.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis docker run --rm -ti -p 9200:9200 owncloud/ocis Usage    Login to ownCloud Web    Open https://localhost:9200 and login using one of the demo accounts.\nBasic Management Commands    The oCIS single binary contains multiple extensions and the ocis command helps you to manage them. You already used ocis server to run all available extensions in the Run oCIS section. We now will show you some more management commands, which you may also explore by typing ocis --help or going to the docs.\nTo start oCIS server:\nocis server The list command prints all running oCIS extensions. ocis list\nTo stop a particular extension: ocis kill web\nTo start a particular extension: ocis run web\nThe version command prints the version of your installed oCIS. ocis --version\nThe health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis health --help "},{"id":132,"href":"/categories/","title":"Categories","parent":"ownCloud","content":""},{"id":133,"href":"/tags/","title":"Tags","parent":"ownCloud","content":""}]