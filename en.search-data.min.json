[{"id":0,"href":"/clients/web/","title":"ownCloud Web","parent":"Clients","content":"This is the next generation ownCloud frontend.\n"},{"id":1,"href":"/ocis/","title":"oCIS - ownCloud Infinite Scale","parent":"ownCloud","content":" ownCloud Infinite Scale Welcome to oCIS, the modern file-sync and share platform, which is based on our knowledge and experience with the PHP based ownCloud server.\noCIS microservice runtime The oCIS runtime allows us to dynamically manage services running in a single process. We use suture to create a supervisor tree that starts each service in a dedicated goroutine. By default oCIS will start all built-in oCIS extensions in a single process. Individual services can be moved to other nodes to scale-out and meet specific performance requirements. A go-micro based registry allows services in multiple nodes to form a distributed microservice architecture.\noCIS extensions Every oCIS extension uses ocis-pkg, which implements the go-micro interfaces for servers to register and clients to lookup nodes with a service registry. We are following the 12 Factor methodology with oCIS. The uniformity of services also allows us to use the same command, logging and configuration mechanism. Configurations are forwarded from the oCIS runtime to the individual extensions.\ngo-micro While the go-micro framework provides abstractions as well as implementations for the different components in a microservice architecture, it uses a more developer focused runtime philosophy: It is used to download services from a repo, compile them on the fly and start them as individual processes. For oCIS we decided to use a more admin friendly runtime: You can download a single binary and start the contained oCIS extensions with a single bin/ocis server. This also makes packaging easier.\nWe use ocis-pkg to configure the default implementations for the go-micro grpc server, client and mdns registry, swapping them out as needed, eg. to use the kubernetes registry plugin.\nREVA A lot of embedded services in oCIS are built upon the REVA runtime. We decided to bundle some of the CS3 services to logically group them. A home storage provider, which is dealing with metadata, and the corresponding data provider, which is dealing with up and download, are one example. The frontend with the oc flavoured webdav, ocs handlers and a datagateway are another.\nProtocol driven development Interacting with oCIS involves a multitude af APIs. The server and all clients rely on OpenID Connect for authentication. The embedded konnectd can be replaced with any other OpenID Connect Identity Provider. Clients use the WebDAV based oc sync protocol to manage files and folders, ocs to manage shares and TUS to upload files in a resumable way. On the server side REVA is the reference implementation of the CS3 apis which is defined using protobuf. By embedding glauth, oCIS provides a read-only LDAP interface to make accounts, including guests available to firewalls and other systems. In the future, we are looking into the Microsoft Graph API, which is based on odata, as a well defined REST/JSON dialect for the existing endpoints.\nAcceptance test suite We run a huge test suite, which originated in ownCloud 10 and continues to grow. A detailed description can be found in the developer docs for testing.\nArchitecture Overview Running bin/ocis server will start the below services, all of which can be scaled and deployed on a single node or in a cloud native environment, as needed.\nStorageStorageocisocisexample extensionexample extensionhellohellobackendbackendstaticweb uistaticweb uiidentity managementidentity managementaccountsaccountsglauth (ldap)glauth (ldap)proxy\n\npart\nreverse proxy \npart\napi gatewayproxy...Persistency LayerPersistency LayerStatelessStatelessAPI Gateway / BFFAPI Gateway / BFFEdge / StaticEdge / St...storage-usersstorage-usersuserprovider\n(ldap)userprovider...storage-usersstorage-usersstorageproviderstorageproviderdataproviderdataproviderstorage-authbearerstorage-authbearerauthprovider\n(oidc)authprovider...storage-gatewaystorage-gatewaygatewaygatewayauthregistryauthregistrystorageregistrystorageregistryweb\n(aka phoenix)web...storage-authbasicstorage-authbasicauthprovider\n(basic)authprovider...settingssettingsstorestoreConsumersConsumersload balancerload balancerCDNCDNstorage-frontendstorage-frontendocsocsocdavocdavocmocmdatagatewaydatagatewaygraphgraphgraph-explorergraph-explorerocsocswebdavwebdavonlyofficeonlyofficeregistry\nmdns / etcdregistry...StatefulStatefulJSON\nfilesJSON...bleve\nindexbleve...ocis\ndriverocis...ocis\ndriverocis...single\nJSON\nfilesingle...single\nJSON\nfilesingle...DNSDNSthumbnailsthumbnailsstorage-publiclinkstorage-publiclinkpublicstorageproviderpublicstorageproviderauthprovider\n(publicshares)authprovider...idpidpkonnectdkonnectdlogin uilogin uistorage-metastorage-metastorageproviderstorageproviderdataproviderdataproviderstorage-homestorage-homestorageproviderstorageproviderdataproviderdataproviderstorage-sharingstorage-sharingusershareproviderusershareproviderpublicshareproviderpublicshareproviderocisocisrevarevakonnectdkonnectdstoragestorageglauthglauthglauthglauthprovided byprovided byViewer does not support full SVG 1.1 "},{"id":2,"href":"/integration/file_picker/","title":"File Picker","parent":"Integrations","content":"Easily integrate ownCloud into your own product.\n"},{"id":3,"href":"/clients/web/deployments/oc10-app/","title":"Deploy as an app in ownCloud 10","parent":"Deployments","content":"    Prerequisites Deploying ownCloud Web Configure oauth2 Configure ownCloud 10 Configure ownCloud Web Accessing ownCloud Web     The ownCloud Web is being deployed as an app to ownCloud marketplace to enable easy early integration into existing ownCloud 10 instances. After completing this setup, ownCloud Web will be available on https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web.\nPrerequisites  Running ownCloud 10 server with version 10.6 Installed oauth2 app Command line access to your server  Deploying ownCloud Web Download the ownCloud Web app from the marketplace and enable it:\nocc market:install web Configure oauth2 Within the Admin page of ownCloud 10, head into User Authentication and add a new client with arbitrary name (e.g. ownCloud Web) and redirection URL https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web/oidc-callback.html.\n  Configure ownCloud 10 To display ownCloud Web in the app switcher and to redirect all private and public links to the new WebUI, add the following config into config/config.php:\n\u0026#39;web.baseUrl\u0026#39; =\u0026gt; \u0026#39;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/web\u0026#39;, Configure ownCloud Web There are a few config values which need to be set in order for ownCloud Web to work correctly. Please copy the example config below into config/config.json and adjust it for your environment:\n{ \u0026#34;server\u0026#34; : \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;auth\u0026#34;: { \u0026#34;clientId\u0026#34;: \u0026#34;\u0026lt;client-id-from-oauth2\u0026gt;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/oauth2/api/v1/token\u0026#34;, \u0026#34;authUrl\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/oauth2/authorize\u0026#34; }, \u0026#34;apps\u0026#34; : [ \u0026#34;files\u0026#34; ], \u0026#34;applications\u0026#34; : [ { \u0026#34;title\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;Classic Design\u0026#34;, \u0026#34;de\u0026#34;: \u0026#34;Dateien\u0026#34;, \u0026#34;fr\u0026#34;: \u0026#34;Fichiers\u0026#34;, \u0026#34;zh_CN\u0026#34;: \u0026#34;文件\u0026#34; }, \u0026#34;icon\u0026#34;: \u0026#34;switch_ui\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://\u0026lt;your-owncloud-server\u0026gt;/index.php/apps/files\u0026#34; }, { \u0026#34;icon\u0026#34;: \u0026#34;application\u0026#34;, \u0026#34;menu\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;_self\u0026#34;, \u0026#34;title\u0026#34;: { \u0026#34;de\u0026#34;: \u0026#34;Einstellungen\u0026#34;, \u0026#34;en\u0026#34;: \u0026#34;Settings\u0026#34; }, \u0026#34;url\u0026#34;: \u0026#34;https://\u0026lt;your-owncloud-server\u0026gt;/index.php/settings/personal\u0026#34; } ] }    config parameter explanation     server ownCloud 10 server address   theme Theme to be used in ownCloud Web pointing to a json file inside of themes folder   auth.clientId Client ID received when adding ownCloud Web in the User Authentication section in Admin   apps List of internal extensions to be loaded   applications Additional apps and links to be displayed in the application switcher or in the user menu   applications[0].title Visible title in the application switcher or user menu, localizable   applications[1].menu Use user to move the menu item into the user menu. Defaults to app switcher    It is important that you don\u0026rsquo;t edit or place the config.json within the app folder. If you do, the integrity check of the app will fail and raise warnings.  Accessing ownCloud Web After following all the steps, you should see a new entry in the application switcher called New Design which points to the ownCloud web.\n  "},{"id":4,"href":"/ocis/configuration/","title":"Configuration","parent":"oCIS - ownCloud Infinite Scale","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  ocis list ocis kill ocis health ocis server ocis run List of available Extension subcommands  ocis storage-metadata ocis thumbnails ocis webdav ocis idp ocis proxy ocis storage-groupprovider ocis storage-home ocis store ocis storage-frontend ocis version ocis web ocis ocs ocis accounts ocis glauth ocis storage-auth-bearer ocis storage-sharing ocis storage-users ocis settings ocis storage-auth-basic ocis storage-public-link ocis storage-userprovider ocis onlyoffice ocis storage-gateway         Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. proxy configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command ownCloud Infinite Scale Stack\nUsage: ocis [global options] command [command options] [arguments...]\n -config-file | $OCIS_CONFIG_FILE Load config file from a non standard location.. -ocis-log-level | $OCIS_LOG_LEVEL Set logging level. Default: info. -ocis-log-pretty | $OCIS_LOG_PRETTY Enable pretty logging. Default: false. -ocis-log-color | $OCIS_LOG_COLOR Enable colored logging. Default: true. -ocis-log-file | $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $OCIS_TRACING_ENABLED Enable sending traces. -tracing-type | $OCIS_TRACING_TYPE Tracing backend type. Default: jaeger. -tracing-endpoint | $OCIS_TRACING_ENDPOINT Endpoint for the agent. -tracing-collector | $OCIS_TRACING_COLLECTOR Endpoint for the collector. -tracing-service | $OCIS_TRACING_SERVICE Service name for tracing. Default: ocis. -jwt-secret | $OCIS_JWT_SECRET Used to dismantle the access token, should equal reva\u0026rsquo;s jwt-secret. Default: Pive-Fumkiu4. -runtime-port | $OCIS_RUNTIME_PORT Configures which port the runtime starts. Default: 9250. -runtime-host | $OCIS_RUNTIME_HOST Configures the host where the runtime process is running. Default: localhost.  Sub Commands ocis list Lists running ocis extensions\nUsage: ocis list [command options] [arguments...]\nocis kill Kill an extension by name\nUsage: ocis kill [command options] [arguments...]\nocis health Check health status\nUsage: ocis health [command options] [arguments...]\n -debug-addr | $OCIS_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9010.  ocis server Start fullstack server\nUsage: ocis server [command options] [arguments...]\n -debug-addr | $OCIS_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9010. -debug-token | $OCIS_DEBUG_TOKEN Token to grant metrics access. -debug-pprof | $OCIS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $OCIS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $OCIS_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9000. -http-root | $OCIS_HTTP_ROOT Root path of http server. Default: /. -grpc-addr | $OCIS_GRPC_ADDR Address to bind grpc server. Default: 0.0.0.0:9001.  ocis run Runs an extension\nUsage: ocis run [command options] [arguments...]\nList of available Extension subcommands There are more subcommands to start the individual extensions. Please check the documentation about their usage and options in the dedicated section of the documentation.\nocis storage-metadata Start storage and data service for metadata\nocis thumbnails Start thumbnails server\nocis webdav Start webdav server\nocis idp Start idp server\nocis proxy Start proxy server\nocis storage-groupprovider Start storage groupprovider service\nocis storage-home Start storage and data provider for /home mount\nocis store Start a go-micro store\nocis storage-frontend Start storage frontend\nocis version Lists running services with version\nocis web Start web server\nocis ocs Start ocs server\nocis accounts Start accounts server\nocis glauth Start glauth server\nocis storage-auth-bearer Start storage auth-bearer service\nocis storage-sharing Start storage sharing service\nocis storage-users Start storage and data provider for /users mount\nocis settings Start settings server\nocis storage-auth-basic Start storage auth-basic service\nocis storage-public-link Start storage public link storage\nocis storage-userprovider Start storage userprovider service\nocis onlyoffice Start onlyoffice server\nocis storage-gateway Start storage gateway\n"},{"id":5,"href":"/integration/file_picker/getting-started/","title":"Getting Started","parent":"File Picker","content":"    Components of the File picker  File picker Location picker       ownCloud File picker is a web component which can be integrated into existing web applications. It connects to an ownCloud server and enables a user to select resources which are then provided in a response of a fired event. Visit installation to see how to integrate the File picker into your product.\nComponents of the File picker The file picker can be used in two different variations: File picker and location picker.\nFile picker The file picker enables users to select multiple resources and is intended to bring resources from within ownCloud into your web applications.\nLocation picker The location picker allows only one folder to be selected and its main purpose is to enable users to save files into the connected ownCloud instance.\n"},{"id":6,"href":"/integration/file_picker/installation/","title":"Installation","parent":"File Picker","content":"    Setup authorization Install File picker package Integrate in HTML page with vanilla JavaScript Integrate in Vue web application Set correct variation Pass bearer token     Setup authorization The config for authorization is provided via a json file. Location of the file can be provided via a prop called configLocation. This requires full URL address (e.g. https://\u0026lt;your-server\u0026gt;/\u0026lt;path-to-the-config\u0026gt;). If the prop is not defined, the location will fallback to https://\u0026lt;your-server\u0026gt;/file-picker-config.json. The config can point to both oauth2 and OIDC. You can take a look at the following example to see how OIDC can be defined:\n{ \u0026#34;server\u0026#34;: \u0026#34;\u0026lt;owncloud-server\u0026gt;\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;\u0026lt;your-server\u0026gt;\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;\u0026lt;client-id\u0026gt;\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, } Install File picker package To integrate File picker into your own product, you can install it via one of the following commands:\nnpm install @ownclouders/file-picker --save # OR yarn add @ownclouders/file-picker Integrate in HTML page with vanilla JavaScript When including File picker in an HTML page, it is important to include Vue.js as well. In this case, we will import it via unpkg. Without this, the component won\u0026rsquo;t work. Vue needs to be included also if you\u0026rsquo;re importing the File picker into a web application built with other framework than Vue (e.g. React, Angular).\nFor the purpose of this example, we will assume that you do not move installed packages and include the folder \u0026ldquo;node_modules\u0026rdquo; with installed packages in the same location as your index.html file on your server.\n... \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;File picker example\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/vue\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;./node_modules/file-picker/dist/file-picker.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... \u0026lt;file-picker id=\u0026#34;file-picker\u0026#34; variation=\u0026#34;resource\u0026#34;\u0026gt;\u0026lt;/file-picker\u0026gt; Integrate in Vue web application There is a caveat when using the File picker inside an existing Vue application. Since the web component will be imported before Vue, we need to define it as a global variable on our own. This requires us to separate the import of Vue into a bootstrap file.\nvue.js:\nimport Vue from \u0026#39;vue\u0026#39; window.Vue = Vue main.js:\nimport Vue from \u0026#39;./vue\u0026#39; new Vue(...) When importing the component, we need to reach it under the .default key.\n\u0026lt;template\u0026gt; \u0026lt;file-picker variation=\u0026#34;location\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default: { components: { FilePicker: require(\u0026#39;@owncloud/file-picker\u0026#39;).default } } \u0026lt;/script\u0026gt; Set correct variation As described in Getting Started, File picker comes in two variations. To define which one should be used, you need to pass it to the component via its variation property. Valid values are:\n resource - File picker location - Location picker  Pass bearer token In case you already have a bearer token and want to skip the whole authorization process inside of the File picker, you can pass it to the component via prop called bearerToken.\n"},{"id":7,"href":"/integration/file_picker/accessing-resources/","title":"Accessing Resources","parent":"File Picker","content":"    Access resources     File picker is returning selected resources via event called selectResources. To access them, you need to set an event listener where you\u0026rsquo;ll be able to get them as part of the response of the callback function.\nAccess resources \u0026lt;file-picker id=\u0026#34;file-picker\u0026#34; variation=\u0026#34;resource\u0026#34;\u0026gt;\u0026lt;/file-picker\u0026gt; \u0026lt;script\u0026gt; const item = document.getElementById(\u0026#39;file-picker\u0026#39;) let resources = [] item.addEventListener(\u0026#39;selectResources\u0026#39;, event =\u0026gt; { resources = event.detail[0] }) \u0026lt;/script\u0026gt; "},{"id":8,"href":"/ocis/deployment/continuous_deployment/","title":"Continuous Deployment","parent":"Deployment","content":"  oCIS with Traefik  Latest Released   oCIS with Keycloak  Latest Released   oCIS with CS3 users  Latest Released     We are continuously deploying the following deployment examples. Every example is deployed in two flavors:\n Latest: reflects the current master branch state of oCIS and will be updated with every commit to master Released: reflects the newest release state (currently latest release of version 1) and will be updated with every release  The configuration for the continuous deployment can be found in the oCIS repository.\noCIS with Traefik Credentials:\n oCIS: see default demo users  Latest  oCIS: ocis.ocis-traefik.latest.owncloud.works  Released  oCIS: ocis.ocis-traefik.released.owncloud.works  oCIS with Keycloak Credentials:\n oCIS: see default demo users Keycloak:  username: admin password: admin    Latest  oCIS: ocis.ocis-keycloak.latest.owncloud.works Keycloak: keycloak.ocis-keycloak.latest.owncloud.works  Released  oCIS: ocis.ocis-keycloak.released.owncloud.works Keycloak: keycloak.ocis-keycloak.released.owncloud.works  oCIS with CS3 users Credentials:\n oCIS: see default demo users LDAP admin:  username: cn=admin,dc=owncloud,dc=com password: admin    Latest  oCIS: ocis.ocis-cs3-users.latest.owncloud.works LDAP admin: ldap.ocis-cs3-users.latest.owncloud.works  Released  oCIS: ocis.ocis-cs3-users.released.owncloud.works LDAP admin: ldap.ocis-cs3-users.released.owncloud.works  "},{"id":9,"href":"/ocis/development/","title":"Development","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":10,"href":"/ocis/deployment/monitoring-tracing/","title":"Monitoring \u0026 Tracing","parent":"Deployment","content":"  Overview about the proposed solution  Monitoring \u0026amp; tracing clients Monitoring \u0026amp; tracing server     Monitoring and tracing gives developers and admin insights into a complex system, in this case oCIS.\nIf you are a developer and want to trace during developing you should have a look at example server setup.\nThis documentation describes how to set up a long running monitoring \u0026amp; tracing infrastructure for one or multiple oCIS servers or deployments. After reading this guide, you also should know everything needed to integrate oCIS into your existing monitoring and tracing infrastructure.\nOverview about the proposed solution    Prometheus     Prometheus     Jaeger Query     Jaeger Query     Jaeger Collector     Jaeger Collector     ElasticSearch     ElasticSearch     Grafana     Grafana     oCIS     oCIS     Telegraf     Telegraf     Prometheus output     Prometheus output     Prometheus input     Prometheus input     Host \u0026amp; Docker metrics     Host \u0026amp; Docker metrics     Jaeger Agent     Jaeger Agent     server for monitoring \u0026amp; tracing infrastructure     server for monitoring \u0026amp; tracing infrastru...     server(s) for oCIS with monitoring \u0026amp; tracing clients     server(s) for oCIS with monitoring \u0026amp; tracing c...     Visualization and querying of  metrics and traces     Visualization and querying o...      Viewer does not support full SVG 1.1     Monitoring \u0026amp; tracing clients We assume that you already have oCIS deployed on one or multiple servers by using our deployment examples (see rectangle on the left). On these servers our monitoring \u0026amp; tracing clients, namely Telegraf and Jaeger agent, need to be added.\nTelegraf will collect host metrics (CPU, RAM, network, processes, \u0026hellip;) and docker metrics (per container CPU, RAM, network, \u0026hellip;). Telegraf is also configured to scrape metrics from Prometheus metric endpoints which oCIS exposes, this is done by the Prometheus input plugin . The metrics from oCIS and all other metrics gathered will be exposed with the Prometheus output plugin and can therefore be scraped by our monitoring \u0026amp; tracing server.\nJaeger agent is is being configured as target for traces in oCIS. It then will receive traces from all oCIS extensions, add some process tags to them and forward them to our Jaeger collector on our monitoring \u0026amp; tracing server.\nFor more information and how to deploy it, see monitoring \u0026amp; tracing client.\nMonitoring \u0026amp; tracing server The monitoring \u0026amp; tracing server is considered as shared infrastructure and is normally used for different services. This means that oCIS is not the only software whose metrics and traces are available on the monitoring server. It is also possible that data of multiple oCIS instances are available on the monitoring server.\nMetrics are scraped, stored and can be queried with Prometheus. For the visualization of these metrics Grafana is used. Because Prometheus is scraping the metrics from the oCIS server (pull model instead of a push model), the Prometheus server must have access to the exposed endpoint of the Telegraf Prometheus output plugin.\nJaeger collector receives traces sent by the Jaeger agent on the oCIS servers and persists them in ElasticSearch. From there the user can query and visualize the traces in Jaeger query or in Grafana. Because Jaeger agent is actively sending traces to the monitoring \u0026amp; tracing server, the server must be reachable from the oCIS server.\nFor more information and how to deploy it, see monitoring \u0026amp; tracing server.\n"},{"id":11,"href":"/clients/web/getting-started/","title":"Getting Started","parent":"ownCloud Web","content":"    Installation  Docker Source code   Configuration    Options     Setting up backend and running Running     Installation Docker TBD\nSource code The source code is hosted at https://github.com/owncloud/web. Please refer to the build documentation for Web.\nConfiguration Depending on the backend you are using, there are sample config files provided in the config folder of the ownCloud Web git repository. See below for available backends. Also, find some of the configuration details below.\nOptions  options.hideSearchBar Lets you hide the search bar at the top of the screen for all users. options.homeFolder You can specify a folder that is used when the user navigates home. Navigating home gets triggered by clicking on the All files menu item. The user will not be jailed in that directory. It simply serves as a default location. You can either provide a static location, or you can use variables of the user object to come up with a user specific home path. This uses twig template variable style and allows you to pick a value or a substring of a value of the authenticated user. Examples are /Shares, /{{.Id}} and /{{substr 0 3 .Id}}/{{.Id}. options.disablePreviews Set this option to true to disable previews in all the different file listing views. The only list view that is not affected by this is the trash bin, as that doesn\u0026rsquo;t allow showing previews at all.  Setting up backend and running Web can run against either ownCloud 10 as backend or OCIS. Depending which one you chose, please check the matching section:\n Setting up with ownCloud as backend Setting up with OCIS as backend  Running  Running with ownCloud as backend Running with OCIS as backend  "},{"id":12,"href":"/extensions/ocis_hello/getting-started/","title":"Getting Started","parent":"Hello","content":"    Installation  Docker Binaries   Configuration  Envrionment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nEnvrionment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  HELLO_CONFIG_FILE Path to config file, empty default value HELLO_LOG_LEVEL Set logging level, defaults to info HELLO_LOG_COLOR Enable colored logging, defaults to true HELLO_LOG_PRETTY Enable pretty logging, defaults to true  Server  HELLO_TRACING_ENABLED Enable sending traces, defaults to false HELLO_TRACING_TYPE Tracing backend type, defaults to jaeger HELLO_TRACING_ENDPOINT Endpoint for the agent, empty default value HELLO_TRACING_COLLECTOR Endpoint for the collector, empty default value HELLO_TRACING_SERVICE Service name for tracing, defaults to hello HELLO_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9109 HELLO_DEBUG_TOKEN Token to grant metrics access, empty default value HELLO_DEBUG_PPROF Enable pprof debugging, defaults to false HELLO_DEBUG_ZPAGES Enable zpages debugging, defaults to false HELLO_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9105 HELLO_HTTP_ROOT Root path of http server, defaults to / HELLO_GRPC_ADDR Address to bind grpc server, defaults to 0.0.0.0:9106 HELLO_ASSET_PATH Path to custom assets, empty default value  Health  HELLO_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9109  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file Path to config file, empty default value \u0026ndash;log-level Set logging level, defaults to info \u0026ndash;log-color Enable colored logging, defaults to true \u0026ndash;log-pretty Enable pretty logging, defaults to true  Server  \u0026ndash;tracing-enabled Enable sending traces, defaults to false \u0026ndash;tracing-type Tracing backend type, defaults to jaeger \u0026ndash;tracing-endpoint Endpoint for the agent, empty default value \u0026ndash;tracing-collector Endpoint for the collector, empty default value \u0026ndash;tracing-service Service name for tracing, defaults to hello \u0026ndash;debug-addr Address to bind debug server, defaults to 0.0.0.0:9109 \u0026ndash;debug-token Token to grant metrics access, empty default value \u0026ndash;debug-pprof Enable pprof debugging, defaults to false \u0026ndash;debug-zpages Enable zpages debugging, defaults to false \u0026ndash;http-addr Address to bind http server, defaults to 0.0.0.0:9105 \u0026ndash;http-root Root path of http server, defaults to / \u0026ndash;grpc-addr Address to bind grpc server, defaults to 0.0.0.0:9106 \u0026ndash;asset-path Path to custom assets, empty default value  Health  \u0026ndash;debug-addr Address to debug endpoint, defaults to 0.0.0.0:9109  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/hello.yml, ${HOME}/.ocis/hello.yml or $(pwd)/config/hello.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formated help output if you execute the binary via ocis-hello --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-hello server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-hello health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable HELLO_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9109/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "},{"id":13,"href":"/extensions/onlyoffice/","title":"OnlyOffice","parent":"Extensions","content":"This service enables users open documents, spreadsheets and presentations in the OnlyOffice app installed in ownCloud 10.\n"},{"id":14,"href":"/ocis/adr/","title":"Architecture Decisions","parent":"oCIS - ownCloud Infinite Scale","content":"oCIS is documenting architecture decisions using Markdown Architectural Decision Records (MADR), following Documenting Architecture Decisions by Michael Nygard.\n To manage the records we use butonic/adr-tools, a fork of the original npryce/adr-tools, based on a pull request that should have added MADR support. It also supports a YAML header that is used by our Hugo based doc generation\n"},{"id":15,"href":"/ocis/development/getting-started/","title":"Getting Started","parent":"Development","content":"    Requirements Repository structure Starting points  Developing oCIS Developing extensions       Requirements We want contribution to oCIS and the creation of extensions to be as easy as possible. So we are trying to reflect this in the tooling. It should be kept simple and quick to be set up.\nBesides standard development tools like git and a text editor, you need the following software for development:\n Go \u0026gt;= v1.15 (install instructions) Yarn (install instructions) docker (install instructions) docker-compose (install instructions)  If you find tools needed besides the mentioned above, please feel free to open an issue or open a PR.\nRepository structure oCIS consists of multiple micro services, also called extensions. We started by having standalone repositories for each of them, but quickly noticed that this adds a time consuming overhead for developers. So we ended up with a monorepo housing all the extensions in one repository.\nEach extension lives in a subfolder (eg. accounts or settings) within this respository as an independent Go module, following the golang-standard project-layout. They have common Makefile targets and can be used to change, build and run individual extensions.\nThe ocis folder contains our go-micro and suture based runtime. It is used to import all extensions and implements commands to manage them, similar to a small orchestrator. With the resulting oCIS binary you can start single extensions or even all extensions at the same time.\nThe docs folder contains the source for the oCIS documentation.\nThe deployments folder contains documented deployment configurations and templates. On a single node, running a single ocis runtime is a resource efficient way to deploy ocis. For multiple nodes docker compose or helm charts for kubernetes examples can be found here.\nThe scripts folder contains scripts to perform various build, install, analysis, etc operations.\nStarting points Depending on what you want to develop there are different starting points. These will be described below.\nDeveloping oCIS If you want to contribute to oCIS:\n see contribution guidelines make sure the tooling is set up by building oCIS and building the docs create or pick an open issue to develop on and mention in the issue that you are working on it open a PR and get things done  Developing extensions If you want to develop an extension, start here: Extensions\n"},{"id":16,"href":"/ocis/deployment/basic-remote-setup/","title":"Basic Remote Setup","parent":"Deployment","content":"    Start the oCIS fullstack server from binary  Using automatically generated certificates Using already present certificates   Start the oCIS fullstack server with Docker Compose     The default configuration of the oCIS binary and the owncloud/ocis docker image assume, that you access oCIS on localhost. This enables you to do quick testing and development without any configuration.\nIf you need to access oCIS running in a docker container, on a VM or a remote machine via an other hostname than localhost, you need to configure this hostname in oCIS. The same applies if you are not using hostnames but instead an IP (eg. 192.168.178.25).\nStart the oCIS fullstack server from binary Upon first start of the oCIS fullstack server with ./bin/ocis server it will generate a file identifier-registration.yml in the config folder in your current working directory. This file is used to configure the built-in identity provider and therefore contains the OpenID Connect issuer and also information about relying parties, for example ownCloud Web and our desktop and mobile applications.\nThe identifier-registration.yml file will only be generated if it does not exist yet. If you want to change certain environment variables like OCIS_URL, please delete this file first before doing so. Otherwise your changes will not be applied correctly and you will run into errors.  oCIS is currently in a Tech Preview state and is shipped with demo users. In order to secure your oCIS instances please follow following guide: secure an oCIS instance  For the following examples you need to have the oCIS binary in your current working directory, we assume it is named ocis and it needs to be marked as executable. See Getting Started for where to get the binary from.\nUsing automatically generated certificates In order to run oCIS with automatically generated and self signed certificates please execute following command. You need to replace your-host with an IP or hostname.\nPROXY_HTTP_ADDR=0.0.0.0:9200 \\ OCIS_URL=https://your-host:9200 \\ ./ocis server Using already present certificates If you have your own certificates already in place, you may want to make oCIS use them:\nPROXY_HTTP_ADDR=0.0.0.0:9200 \\ OCIS_URL=https://your-host:9200 \\ PROXY_TRANSPORT_TLS_KEY=./certs/your-host.key \\ PROXY_TRANSPORT_TLS_CERT=./certs/your-host.crt \\ ./ocis server For more configuration options check the configuration section in oCIS and the oCIS extensions.\nStart the oCIS fullstack server with Docker Compose Please have a look at our other deployment examples.\n"},{"id":17,"href":"/extensions/thumbnails/configuration/","title":"Configuration","parent":"Thumbnails","content":"    Configuration  Configuration using config files Environment variables Commandline flags thumbnails health thumbnails ocis-thumbnails thumbnails server thumbnails version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nthumbnails health Check health status\nUsage: thumbnails health [command options] [arguments...]\n -debug-addr | $THUMBNAILS_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9189\u0026quot;).  thumbnails ocis-thumbnails Example usage\nUsage: thumbnails ocis-thumbnails [command options] [arguments...]\nthumbnails server Start integrated server\nUsage: thumbnails server [command options] [arguments...]\n -log-file | $THUMBNAILS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $THUMBNAILS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $THUMBNAILS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $THUMBNAILS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $THUMBNAILS_CONFIG_FILE Path to config file. -tracing-enabled | $THUMBNAILS_TRACING_ENABLED Enable sending traces. -tracing-type | $THUMBNAILS_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $THUMBNAILS_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $THUMBNAILS_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $THUMBNAILS_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;thumbnails\u0026quot;). -debug-addr | $THUMBNAILS_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9189\u0026quot;). -debug-token | $THUMBNAILS_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $THUMBNAILS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $THUMBNAILS_DEBUG_ZPAGES Enable zpages debugging. -grpc-name | $THUMBNAILS_GRPC_NAME Name of the service. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;thumbnails\u0026quot;). -grpc-addr | $THUMBNAILS_GRPC_ADDR Address to bind grpc server. Default: flags.OverrideDefaultString(cfg.Server.Address, \u0026quot;0.0.0.0:9185\u0026quot;). -grpc-namespace | $THUMBNAILS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.Server.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -filesystemstorage-root | $THUMBNAILS_FILESYSTEMSTORAGE_ROOT Root path of the filesystem storage directory. Default: flags.OverrideDefaultString(cfg.Thumbnail.FileSystemStorage.RootDirectory, filepath.Join(os.TempDir(), \u0026quot;ocis-thumbnails/\u0026quot;)). -webdavsource-baseurl | $THUMBNAILS_WEBDAVSOURCE_BASEURL Base url for a webdav api. Default: flags.OverrideDefaultString(cfg.Thumbnail.WebDavSource.BaseURL, \u0026quot;https://localhost:9200/remote.php/webdav/\u0026quot;). -webdavsource-insecure | $THUMBNAILS_WEBDAVSOURCE_INSECURE Whether to skip certificate checks. Default: flags.OverrideDefaultBool(cfg.Thumbnail.WebDavSource.Insecure, true).  thumbnails version Print the versions of the running instances\nUsage: thumbnails version [command options] [arguments...]\n -grpc-name | $THUMBNAILS_GRPC_NAME Name of the service. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;thumbnails\u0026quot;). -grpc-namespace | $THUMBNAILS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.Server.Namespace, \u0026quot;com.owncloud.api\u0026quot;).  "},{"id":18,"href":"/extensions/web/configuration/","title":"Configuration","parent":"ownCloud Web","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  web server web health       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-web reads web.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Serve ownCloud Web for oCIS\nUsage: web [global options] command [command options] [arguments...]\nSub Commands web server Start integrated server\nUsage: web server [command options] [arguments...]\nweb health Check health status\nUsage: web health [command options] [arguments...]\n -debug-addr | $WEB_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9104\u0026quot;).  "},{"id":19,"href":"/extensions/webdav/configuration/","title":"Configuration","parent":"WebDaV","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  webdav server webdav version webdav health       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Serve WebDAV API for oCIS\nUsage: webdav [global options] command [command options] [arguments...]\nSub Commands webdav server Start integrated server\nUsage: webdav server [command options] [arguments...]\n -log-file | $WEBDAV_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $WEBDAV_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $WEBDAV_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $WEBDAV_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $WEBDAV_CONFIG_FILE Path to config file. -tracing-enabled | $WEBDAV_TRACING_ENABLED Enable sending traces. -tracing-type | $WEBDAV_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $WEBDAV_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $WEBDAV_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $WEBDAV_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;webdav\u0026quot;). -debug-addr | $WEBDAV_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9119\u0026quot;). -debug-token | $WEBDAV_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $WEBDAV_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $WEBDAV_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $WEBDAV_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9115\u0026quot;). -http-namespace | $WEBDAV_HTTP_NAMESPACE Set the base namespace for service discovery. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -service-name | $WEBDAV_SERVICE_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;webdav\u0026quot;). -http-root | $WEBDAV_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/\u0026quot;).  webdav version Print the versions of the running instances\nUsage: webdav version [command options] [arguments...]\n -http-namespace | $WEBDAV_HTTP_NAMESPACE Set the base namespace for service discovery. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -service-name | $WEBDAV_SERVICE_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;webdav\u0026quot;).  webdav health Check health status\nUsage: webdav health [command options] [arguments...]\n -debug-addr | $WEBDAV_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9119\u0026quot;).  "},{"id":20,"href":"/extensions/ocs/configuration/","title":"Configuration","parent":"Ocs","content":"    Configuration  Configuration using config files Environment variables Commandline flags ocs health ocs ocis-ocs ocs server ocs version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-ocs reads ocs.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nocs health Check health status\nUsage: ocs health [command options] [arguments...]\n -debug-addr | $OCS_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9114\u0026quot;).  ocs ocis-ocs Serve OCS API for oCIS\nUsage: ocs ocis-ocs [command options] [arguments...]\nocs server Start integrated server\nUsage: ocs server [command options] [arguments...]\n -log-file | $OCS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -log-level | $OCS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $OCS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $OCS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging. -config-file | $OCS_CONFIG_FILE Path to config file. -tracing-enabled | $OCS_TRACING_ENABLED Enable sending traces. Default: flags.OverrideDefaultBool(cfg.Tracing.Enabled, false). -tracing-type | $OCS_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $OCS_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $OCS_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $OCS_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;ocs\u0026quot;). -debug-addr | $OCS_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9114\u0026quot;). -debug-token | $OCS_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $OCS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $OCS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $OCS_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9110\u0026quot;). -http-namespace | $OCS_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -name | $OCS_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;ocs\u0026quot;). -http-root | $OCS_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/ocs\u0026quot;). -jwt-secret | $OCS_JWT_SECRET , $OCIS_JWT_SECRET Used to dismantle the access token, should equal reva\u0026rsquo;s jwt-secret. Default: flags.OverrideDefaultString(cfg.TokenManager.JWTSecret, \u0026quot;Pive-Fumkiu4\u0026quot;).  ocs version Print the versions of the running instances\nUsage: ocs version [command options] [arguments...]\n -http-namespace | $OCS_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -name | $OCS_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;ocs\u0026quot;).  "},{"id":21,"href":"/extensions/onlyoffice/configuration/","title":"Configuration","parent":"OnlyOffice","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  onlyoffice health onlyoffice server       Configuration oCIS Single Binary is not responsible for configuring extensions. Instead, each extension could either be configured by environment variables, cli flags or config files.\nEach extension has its dedicated documentation page (e.g. https://owncloud.github.io/extensions/onlyoffice/configuration) which lists all possible configurations. Config files and environment variables are picked up if you use the ./bin/ocis server command within the oCIS single binary. Command line flags must be set explicitly on the extensions subcommands.\nConfiguration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: onlyoffice reads onlyoffice.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command OnlyOffice oCIS extension\nUsage: onlyoffice [global options] command [command options] [arguments...]\n -config-file | $ONLYOFFICE_CONFIG_FILE Path to config file. -log-level | $ONLYOFFICE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $ONLYOFFICE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $ONLYOFFICE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands onlyoffice health Check health status\nUsage: onlyoffice health [command options] [arguments...]\n -debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9224\u0026quot;).  onlyoffice server Start integrated server\nUsage: onlyoffice server [command options] [arguments...]\n -log-file | $ONLYOFFICE_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $ONLYOFFICE_TRACING_ENABLED Enable sending traces. -tracing-type | $ONLYOFFICE_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $ONLYOFFICE_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;onlyoffice\u0026quot;). -debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9224\u0026quot;). -debug-token | $ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $ONLYOFFICE_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $ONLYOFFICE_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9220\u0026quot;). -http-namespace | $ONLYOFFICE_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.HTTP.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -http-root | $ONLYOFFICE_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/\u0026quot;). -asset-path | $ONLYOFFICE_ASSET_PATH Path to custom assets. Default: flags.OverrideDefaultString(cfg.Asset.Path, \u0026quot;\u0026quot;).  "},{"id":22,"href":"/extensions/proxy/configuration/","title":"Configuration","parent":"Proxy","content":"    Configuration  Configuration using config files Environment variables Commandline flags proxy health proxy ocis-proxy proxy server proxy version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nproxy health Check health status\nUsage: proxy health [command options] [arguments...]\n \u0026ndash;debug-addr | $PROXY_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9109\u0026quot;).  proxy ocis-proxy proxy for oCIS\nUsage: proxy ocis-proxy [command options] [arguments...]\n \u0026ndash;log-level | $PROXY_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. \u0026ndash;log-pretty | $PROXY_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. \u0026ndash;log-color | $PROXY_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  proxy server Start integrated server\nUsage: proxy server [command options] [arguments...]\nproxy version Print the versions of the running instances\nUsage: proxy version [command options] [arguments...]\n \u0026ndash;service-namespace | $PROXY_SERVICE_NAMESPACE Set the base namespace for the service namespace. Default: flags.OverrideDefaultString(cfg.OIDC.Issuer, \u0026quot;com.owncloud.web\u0026quot;). \u0026ndash;service-name | $PROXY_SERVICE_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;proxy\u0026quot;).  "},{"id":23,"href":"/extensions/settings/configuration/","title":"Configuration","parent":"Settings","content":"    Configuration  Configuration using config files Environment variables Commandline flags settings health settings ocis-settings settings server settings version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nsettings health Check health status\nUsage: settings health [command options] [arguments...]\n -debug-addr | $SETTINGS_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9194\u0026quot;).  settings ocis-settings Provide settings and permissions for oCIS\nUsage: settings ocis-settings [command options] [arguments...]\n -log-level | $SETTINGS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $SETTINGS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $SETTINGS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  settings server Start integrated server\nUsage: settings server [command options] [arguments...]\n -config-file | $SETTINGS_CONFIG_FILE Path to config file. -tracing-enabled | $SETTINGS_TRACING_ENABLED Enable sending traces. -tracing-type | $SETTINGS_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $SETTINGS_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $SETTINGS_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $SETTINGS_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;settings\u0026quot;). -debug-addr | $SETTINGS_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9194\u0026quot;). -debug-token | $SETTINGS_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $SETTINGS_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $SETTINGS_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $SETTINGS_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9190\u0026quot;). -http-namespace | $SETTINGS_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.HTTP.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -http-root | $SETTINGS_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/\u0026quot;). -grpc-addr | $SETTINGS_GRPC_ADDR Address to bind grpc server. Default: flags.OverrideDefaultString(cfg.GRPC.Addr, \u0026quot;0.0.0.0:9191\u0026quot;). -asset-path | $SETTINGS_ASSET_PATH Path to custom assets. Default: flags.OverrideDefaultString(cfg.Asset.Path, \u0026quot;\u0026quot;). -grpc-namespace | $SETTINGS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $SETTINGS_NAME service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;settings\u0026quot;). -data-path | $SETTINGS_DATA_PATH Mount path for the storage. Default: flags.OverrideDefaultString(cfg.Service.DataPath, \u0026quot;/var/tmp/ocis/settings\u0026quot;). -jwt-secret | $SETTINGS_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: flags.OverrideDefaultString(cfg.TokenManager.JWTSecret, \u0026quot;Pive-Fumkiu4\u0026quot;).  settings version Print the versions of the running instances\nUsage: settings version [command options] [arguments...]\n -grpc-namespace | $SETTINGS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $SETTINGS_NAME service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;settings\u0026quot;).  "},{"id":24,"href":"/extensions/storage/configuration/","title":"Configuration","parent":"Storage","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  storage sharing storage storage-home storage storage-users storage groups storage health storage storage-public-link storage frontend storage storage-metadata storage users storage auth-bearer storage gateway storage storage storage auth-basic   Config for the different Storage Drivers  Local Driver Eos Driver owCloud Driver Ocis Driver       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Storage service for oCIS\nUsage: storage [global options] command [command options] [arguments...]\n -config-file | $STORAGE_CONFIG_FILE Path to config file. -log-level | $STORAGE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORAGE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORAGE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands storage sharing Start sharing service\nUsage: storage sharing [command options] [arguments...]\n -debug-addr | $STORAGE_SHARING_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.DebugAddr, \u0026quot;0.0.0.0:9151\u0026quot;). -network | $STORAGE_SHARING_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_SHARING_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.GRPCAddr, \u0026quot;0.0.0.0:9150\u0026quot;). -user-driver | $STORAGE_SHARING_USER_DRIVER driver to use for the UserShareProvider. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.UserDriver, \u0026quot;json\u0026quot;). -user-json-file | $STORAGE_SHARING_USER_JSON_FILE file used to persist shares for the UserShareProvider. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.UserJSONFile, \u0026quot;/var/tmp/ocis/storage/shares.json\u0026quot;). -public-driver | $STORAGE_SHARING_PUBLIC_DRIVER driver to use for the PublicShareProvider. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.PublicDriver, \u0026quot;json\u0026quot;). -public-json-file | $STORAGE_SHARING_PUBLIC_JSON_FILE file used to persist shares for the PublicShareProvider. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.PublicJSONFile, \u0026quot;/var/tmp/ocis/storage/publicshares.json\u0026quot;).  storage storage-home Start storage-home service\nUsage: storage storage-home [command options] [arguments...]\n -debug-addr | $STORAGE_HOME_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.DebugAddr, \u0026quot;0.0.0.0:9156\u0026quot;). -grpc-network | $STORAGE_HOME_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.GRPCNetwork, \u0026quot;tcp\u0026quot;). -grpc-addr | $STORAGE_HOME_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.GRPCAddr, \u0026quot;0.0.0.0:9154\u0026quot;). -http-network | $STORAGE_HOME_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.HTTPNetwork, \u0026quot;tcp\u0026quot;). -http-addr | $STORAGE_HOME_HTTP_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.HTTPAddr, \u0026quot;0.0.0.0:9155\u0026quot;). -driver | $STORAGE_HOME_DRIVER storage driver for home mount: eg. local, eos, owncloud, ocis or s3. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.Driver, \u0026quot;ocis\u0026quot;). -mount-path | $STORAGE_HOME_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.MountPath, \u0026quot;/home\u0026quot;). -mount-id | $STORAGE_HOME_MOUNT_ID mount id. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.MountID, \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;). -expose-data-server | $STORAGE_HOME_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: flags.OverrideDefaultBool(cfg.Reva.StorageHome.ExposeDataServer, false). -data-server-url | $STORAGE_HOME_DATA_SERVER_URL data server url. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.DataServerURL, \u0026quot;http://localhost:9155/data\u0026quot;). -http-prefix | $STORAGE_HOME_HTTP_PREFIX prefix for the http endpoint, without leading slash. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.HTTPPrefix, \u0026quot;data\u0026quot;). -tmp-folder | $STORAGE_HOME_TMP_FOLDER path to tmp folder. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.TempFolder, \u0026quot;/var/tmp/ocis/tmp/home\u0026quot;). -enable-home | $STORAGE_HOME_ENABLE_HOME enable the creation of home directories. Default: flags.OverrideDefaultBool(cfg.Reva.Storages.Home.EnableHome, true). -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;). -users-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Users.Endpoint, \u0026quot;localhost:9144\u0026quot;).  storage storage-users Start storage-users service\nUsage: storage storage-users [command options] [arguments...]\n -debug-addr | $STORAGE_USERS_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.DebugAddr, \u0026quot;0.0.0.0:9159\u0026quot;). -grpc-network | $STORAGE_USERS_GRPC_NETWORK Network to use for the users storage, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.GRPCNetwork, \u0026quot;tcp\u0026quot;). -grpc-addr | $STORAGE_USERS_GRPC_ADDR GRPC Address to bind users storage. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.GRPCAddr, \u0026quot;0.0.0.0:9157\u0026quot;). -http-network | $STORAGE_USERS_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.HTTPNetwork, \u0026quot;tcp\u0026quot;). -http-addr | $STORAGE_USERS_HTTP_ADDR HTTP Address to bind users storage. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.HTTPAddr, \u0026quot;0.0.0.0:9158\u0026quot;). -driver | $STORAGE_USERS_DRIVER storage driver for users mount: eg. local, eos, owncloud, ocis or s3. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.Driver, \u0026quot;ocis\u0026quot;). -mount-path | $STORAGE_USERS_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.MountPath, \u0026quot;/users\u0026quot;). -mount-id | $STORAGE_USERS_MOUNT_ID mount id. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.MountID, \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;). -expose-data-server | $STORAGE_USERS_EXPOSE_DATA_SERVER exposes a dedicated data server. Default: flags.OverrideDefaultBool(cfg.Reva.StorageUsers.ExposeDataServer, false). -data-server-url | $STORAGE_USERS_DATA_SERVER_URL data server url. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.DataServerURL, \u0026quot;http://localhost:9158/data\u0026quot;). -http-prefix | $STORAGE_USERS_HTTP_PREFIX prefix for the http endpoint, without leading slash. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.HTTPPrefix, \u0026quot;data\u0026quot;). -tmp-folder | $STORAGE_USERS_TMP_FOLDER path to tmp folder. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.TempFolder, \u0026quot;/var/tmp/ocis/tmp/users\u0026quot;). -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;). -users-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Users.Endpoint, \u0026quot;localhost:9144\u0026quot;).  storage groups Start groups service\nUsage: storage groups [command options] [arguments...]\n -debug-addr | $STORAGE_GROUPPROVIDER_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.Groups.DebugAddr, \u0026quot;0.0.0.0:9161\u0026quot;). -network | $STORAGE_GROUPPROVIDER_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Groups.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_GROUPPROVIDER_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.Groups.GRPCAddr, \u0026quot;0.0.0.0:9160\u0026quot;). -endpoint | $STORAGE_GROUPPROVIDER_ENDPOINT URL to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Groups.Endpoint, \u0026quot;localhost:9160\u0026quot;). -driver | $STORAGE_GROUPPROVIDER_DRIVER group driver: \u0026lsquo;json\u0026rsquo;, \u0026lsquo;ldap\u0026rsquo;, or \u0026lsquo;rest\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Groups.Driver, \u0026quot;ldap\u0026quot;). -json-config | $STORAGE_GROUPPROVIDER_JSON Path to groups.json file. Default: flags.OverrideDefaultString(cfg.Reva.Groups.JSON, \u0026quot;\u0026quot;).  storage health Check health status\nUsage: storage health [command options] [arguments...]\n -debug-addr | $STORAGE_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9109\u0026quot;).  storage storage-public-link Start storage-public-link service\nUsage: storage storage-public-link [command options] [arguments...]\n -debug-addr | $STORAGE_PUBLIC_LINK_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.DebugAddr, \u0026quot;0.0.0.0:9179\u0026quot;). -network | $STORAGE_PUBLIC_LINK_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_PUBLIC_LINK_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.GRPCAddr, \u0026quot;0.0.0.0:9178\u0026quot;). -mount-path | $STORAGE_PUBLIC_LINK_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.MountPath, \u0026quot;/public\u0026quot;). -gateway-endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;).  storage frontend Start frontend service\nUsage: storage frontend [command options] [arguments...]\n -debug-addr | $STORAGE_FRONTEND_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.DebugAddr, \u0026quot;0.0.0.0:9141\u0026quot;). -transfer-secret | $STORAGE_TRANSFER_SECRET Transfer secret for datagateway. Default: flags.OverrideDefaultString(cfg.Reva.TransferSecret, \u0026quot;replace-me-with-a-transfer-secret\u0026quot;). -webdav-namespace | $STORAGE_WEBDAV_NAMESPACE Namespace prefix for the /webdav endpoint. Default: flags.OverrideDefaultString(cfg.Reva.OCDav.WebdavNamespace, \u0026quot;/home/\u0026quot;). -dav-files-namespace | $STORAGE_DAV_FILES_NAMESPACE Namespace prefix for the webdav /dav/files endpoint. Default: flags.OverrideDefaultString(cfg.Reva.OCDav.DavFilesNamespace, \u0026quot;/users/\u0026quot;). -network | $STORAGE_FRONTEND_HTTP_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.HTTPNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_FRONTEND_HTTP_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.HTTPAddr, \u0026quot;0.0.0.0:9140\u0026quot;). -public-url | $STORAGE_FRONTEND_PUBLIC_URL , $OCIS_URL URL to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.PublicURL, \u0026quot;https://localhost:9200\u0026quot;). -datagateway-prefix | $STORAGE_FRONTEND_DATAGATEWAY_PREFIX datagateway prefix. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.DatagatewayPrefix, \u0026quot;data\u0026quot;). -ocdav-prefix | $STORAGE_FRONTEND_OCDAV_PREFIX owncloud webdav endpoint prefix. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.OCDavPrefix, \u0026quot;\u0026quot;). -ocs-prefix | $STORAGE_FRONTEND_OCS_PREFIX open collaboration services endpoint prefix. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.OCSPrefix, \u0026quot;ocs\u0026quot;). -ocs-share-prefix | $STORAGE_FRONTEND_OCS_Share_PREFIX the prefix prepended to the path of shared files. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.OCSSharePrefix, \u0026quot;/Shares\u0026quot;). -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;). -default-upload-protocol | $STORAGE_FRONTEND_DEFAULT_UPLOAD_PROTOCOL Default upload chunking protocol to be used out of tus/v1/ng. Default: flags.OverrideDefaultString(cfg.Reva.DefaultUploadProtocol, \u0026quot;tus\u0026quot;). -upload-http-method-override | $STORAGE_FRONTEND_UPLOAD_HTTP_METHOD_OVERRIDE Specify an HTTP method (ex: POST) that clients should to use when uploading instead of PATCH. Default: flags.OverrideDefaultString(cfg.Reva.UploadHTTPMethodOverride, \u0026quot;\u0026quot;). -checksum-preferred-upload-type | $STORAGE_FRONTEND_CHECKSUM_PREFERRED_UPLOAD_TYPE Specify the preferred checksum algorithm used for uploads. Default: flags.OverrideDefaultString(cfg.Reva.ChecksumPreferredUploadType, \u0026quot;\u0026quot;).  storage storage-metadata Start storage-metadata service\nUsage: storage storage-metadata [command options] [arguments...]\nstorage users Start users service\nUsage: storage users [command options] [arguments...]\n -debug-addr | $STORAGE_SHARING_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.Users.DebugAddr, \u0026quot;0.0.0.0:9145\u0026quot;). -network | $STORAGE_USERPROVIDER_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Users.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_USERPROVIDER_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.Users.GRPCAddr, \u0026quot;0.0.0.0:9144\u0026quot;). -endpoint | $STORAGE_USERPROVIDER_ENDPOINT URL to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Users.Endpoint, \u0026quot;localhost:9144\u0026quot;). -driver | $STORAGE_USERPROVIDER_DRIVER user driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo;, \u0026lsquo;ldap\u0026rsquo;, or \u0026lsquo;rest\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Users.Driver, \u0026quot;ldap\u0026quot;). -json-config | $STORAGE_USERPROVIDER_JSON Path to users.json file. Default: flags.OverrideDefaultString(cfg.Reva.Users.JSON, \u0026quot;\u0026quot;).  storage auth-bearer Start authprovider for bearer auth\nUsage: storage auth-bearer [command options] [arguments...]\n -debug-addr | $STORAGE_AUTH_BEARER_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.AuthBearer.DebugAddr, \u0026quot;0.0.0.0:9149\u0026quot;). -oidc-issuer | $STORAGE_OIDC_ISSUER , $OCIS_URL OIDC issuer. Default: flags.OverrideDefaultString(cfg.Reva.OIDC.Issuer, \u0026quot;https://localhost:9200\u0026quot;). -oidc-insecure | $STORAGE_OIDC_INSECURE OIDC allow insecure communication. Default: flags.OverrideDefaultBool(cfg.Reva.OIDC.Insecure, true). -oidc-id-claim | $STORAGE_OIDC_ID_CLAIM OIDC id claim. Default: flags.OverrideDefaultString(cfg.Reva.OIDC.IDClaim, \u0026quot;preferred_username\u0026quot;). -oidc-uid-claim | $STORAGE_OIDC_UID_CLAIM OIDC uid claim. Default: flags.OverrideDefaultString(cfg.Reva.OIDC.UIDClaim, \u0026quot;\u0026quot;). -oidc-gid-claim | $STORAGE_OIDC_GID_CLAIM OIDC gid claim. Default: flags.OverrideDefaultString(cfg.Reva.OIDC.GIDClaim, \u0026quot;\u0026quot;). -network | $STORAGE_AUTH_BEARER_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.AuthBearer.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_AUTH_BEARER_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.AuthBearer.GRPCAddr, \u0026quot;0.0.0.0:9148\u0026quot;). -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;).  storage gateway Start gateway\nUsage: storage gateway [command options] [arguments...]\n -debug-addr | $STORAGE_GATEWAY_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.DebugAddr, \u0026quot;0.0.0.0:9143\u0026quot;). -transfer-secret | $STORAGE_TRANSFER_SECRET Transfer secret for datagateway. Default: flags.OverrideDefaultString(cfg.Reva.TransferSecret, \u0026quot;replace-me-with-a-transfer-secret\u0026quot;). -network | $STORAGE_GATEWAY_GRPC_NETWORK Network to use for the storage service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_GATEWAY_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.GRPCAddr, \u0026quot;0.0.0.0:9142\u0026quot;). -endpoint | $STORAGE_GATEWAY_ENDPOINT endpoint to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;). -commit-share-to-storage-grant | $STORAGE_GATEWAY_COMMIT_SHARE_TO_STORAGE_GRANT Commit shares to the share manager. Default: flags.OverrideDefaultBool(cfg.Reva.Gateway.CommitShareToStorageGrant, true). -commit-share-to-storage-ref | $STORAGE_GATEWAY_COMMIT_SHARE_TO_STORAGE_REF Commit shares to the storage. Default: flags.OverrideDefaultBool(cfg.Reva.Gateway.CommitShareToStorageRef, true). -share-folder | $STORAGE_GATEWAY_SHARE_FOLDER mount shares in this folder of the home storage provider. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.ShareFolder, \u0026quot;Shares\u0026quot;). -disable-home-creation-on-login | $STORAGE_GATEWAY_DISABLE_HOME_CREATION_ON_LOGIN Disable creation of home folder on login. -storage-home-mapping | $STORAGE_GATEWAY_HOME_MAPPING mapping template for user home paths to user-specific mount points, e.g. /home/{{substr 0 1 .Username}}. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.HomeMapping, \u0026quot;\u0026quot;). -auth-basic-endpoint | $STORAGE_AUTH_BASIC_ENDPOINT endpoint to use for the basic auth provider. Default: flags.OverrideDefaultString(cfg.Reva.AuthBasic.Endpoint, \u0026quot;localhost:9146\u0026quot;). -auth-bearer-endpoint | $STORAGE_AUTH_BEARER_ENDPOINT endpoint to use for the bearer auth provider. Default: flags.OverrideDefaultString(cfg.Reva.AuthBearer.Endpoint, \u0026quot;localhost:9148\u0026quot;). -storage-registry-driver | $STORAGE_STORAGE_REGISTRY_DRIVER driver of the storage registry. Default: flags.OverrideDefaultString(cfg.Reva.StorageRegistry.Driver, \u0026quot;static\u0026quot;). -storage-home-provider | $STORAGE_REGISTRY_HOME_PROVIDER mount point of the storage provider for user homes in the global namespace. Default: flags.OverrideDefaultString(cfg.Reva.StorageRegistry.HomeProvider, \u0026quot;/home\u0026quot;). -public-url | $STORAGE_FRONTEND_PUBLIC_URL , $OCIS_URL URL to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Frontend.PublicURL, \u0026quot;https://localhost:9200\u0026quot;). -datagateway-url | $STORAGE_DATAGATEWAY_PUBLIC_URL URL to use for the storage datagateway, defaults to \u0026lt;STORAGE_FRONTEND_PUBLIC_URL\u0026gt;/data. Default: flags.OverrideDefaultString(cfg.Reva.DataGateway.PublicURL, \u0026quot;\u0026quot;). -userprovider-endpoint | $STORAGE_USERPROVIDER_ENDPOINT endpoint to use for the userprovider. Default: flags.OverrideDefaultString(cfg.Reva.Users.Endpoint, \u0026quot;localhost:9144\u0026quot;). -groupprovider-endpoint | $STORAGE_GROUPPROVIDER_ENDPOINT endpoint to use for the groupprovider. Default: flags.OverrideDefaultString(cfg.Reva.Groups.Endpoint, \u0026quot;localhost:9160\u0026quot;). -sharing-endpoint | $STORAGE_SHARING_ENDPOINT endpoint to use for the storage service. Default: flags.OverrideDefaultString(cfg.Reva.Sharing.Endpoint, \u0026quot;localhost:9150\u0026quot;). -storage-home-endpoint | $STORAGE_HOME_ENDPOINT endpoint to use for the home storage. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.Endpoint, \u0026quot;localhost:9154\u0026quot;). -storage-home-mount-path | $STORAGE_HOME_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.MountPath, \u0026quot;/home\u0026quot;). -storage-home-mount-id | $STORAGE_HOME_MOUNT_ID mount id. Default: flags.OverrideDefaultString(cfg.Reva.StorageHome.MountID, \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009154\u0026quot;). -storage-users-endpoint | $STORAGE_USERS_ENDPOINT endpoint to use for the users storage. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.Endpoint, \u0026quot;localhost:9157\u0026quot;). -storage-users-mount-path | $STORAGE_USERS_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.MountPath, \u0026quot;/users\u0026quot;). -storage-users-mount-id | $STORAGE_USERS_MOUNT_ID mount id. Default: flags.OverrideDefaultString(cfg.Reva.StorageUsers.MountID, \u0026quot;1284d238-aa92-42ce-bdc4-0b0000009157\u0026quot;). -public-link-endpoint | $STORAGE_PUBLIC_LINK_ENDPOINT endpoint to use for the public links service. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.Endpoint, \u0026quot;localhost:9178\u0026quot;). -storage-public-link-mount-path | $STORAGE_PUBLIC_LINK_MOUNT_PATH mount path. Default: flags.OverrideDefaultString(cfg.Reva.StoragePublicLink.MountPath, \u0026quot;/public\u0026quot;).  storage storage Storage service for oCIS\nUsage: storage storage [command options] [arguments...]\n -config-file | $STORAGE_CONFIG_FILE Path to config file. -log-level | $STORAGE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORAGE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORAGE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  storage auth-basic Start authprovider for basic auth\nUsage: storage auth-basic [command options] [arguments...]\n -debug-addr | $STORAGE_AUTH_BASIC_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Reva.AuthBasic.DebugAddr, \u0026quot;0.0.0.0:9147\u0026quot;). -auth-driver | $STORAGE_AUTH_DRIVER auth driver: \u0026lsquo;demo\u0026rsquo;, \u0026lsquo;json\u0026rsquo; or \u0026lsquo;ldap\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.AuthProvider.Driver, \u0026quot;ldap\u0026quot;). -auth-json | $STORAGE_AUTH_JSON Path to users.json file. Default: flags.OverrideDefaultString(cfg.Reva.AuthProvider.JSON, \u0026quot;\u0026quot;). -network | $STORAGE_AUTH_BASIC_GRPC_NETWORK Network to use for the storage auth-basic service, can be \u0026lsquo;tcp\u0026rsquo;, \u0026lsquo;udp\u0026rsquo; or \u0026lsquo;unix\u0026rsquo;. Default: flags.OverrideDefaultString(cfg.Reva.AuthBasic.GRPCNetwork, \u0026quot;tcp\u0026quot;). -addr | $STORAGE_AUTH_BASIC_GRPC_ADDR Address to bind storage service. Default: flags.OverrideDefaultString(cfg.Reva.AuthBasic.GRPCAddr, \u0026quot;0.0.0.0:9146\u0026quot;). -gateway-url | $STORAGE_GATEWAY_ENDPOINT URL to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Gateway.Endpoint, \u0026quot;localhost:9142\u0026quot;).  Config for the different Storage Drivers You can set different storage drivers for the Storage Providers. Please check the storage provider configuration.\nExample: Set the home and users Storage Provider to ocis\nSTORAGE_HOME_DRIVER=ocis STORAGE_USERS_DRIVER=ocis\nLocal Driver  -storage-local-root | $STORAGE_DRIVER_LOCAL_ROOT the path to the local storage root. Default: flags.OverrideDefaultString(cfg.Reva.Storages.Local.Root, \u0026quot;/var/tmp/ocis/storage/local\u0026quot;).  Eos Driver  -storage-eos-namespace | $STORAGE_DRIVER_EOS_NAMESPACE Namespace for metadata operations. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.Root, \u0026quot;/eos/dockertest/reva\u0026quot;). -storage-eos-shadow-namespace | $STORAGE_DRIVER_EOS_SHADOW_NAMESPACE Shadow namespace where share references are stored. -storage-eos-share-folder | $STORAGE_DRIVER_EOS_SHARE_FOLDER name of the share folder. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.ShareFolder, \u0026quot;/Shares\u0026quot;). -storage-eos-binary | $STORAGE_DRIVER_EOS_BINARY Location of the eos binary. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.EosBinary, \u0026quot;/usr/bin/eos\u0026quot;). -storage-eos-xrdcopy-binary | $STORAGE_DRIVER_EOS_XRDCOPY_BINARY Location of the xrdcopy binary. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.XrdcopyBinary, \u0026quot;/usr/bin/xrdcopy\u0026quot;). -storage-eos-master-url | $STORAGE_DRIVER_EOS_MASTER_URL URL of the Master EOS MGM. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.MasterURL, \u0026quot;root://eos-mgm1.eoscluster.cern.ch:1094\u0026quot;). -storage-eos-slave-url | $STORAGE_DRIVER_EOS_SLAVE_URL URL of the Slave EOS MGM. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.SlaveURL, \u0026quot;root://eos-mgm1.eoscluster.cern.ch:1094\u0026quot;). -storage-eos-cache-directory | $STORAGE_DRIVER_EOS_CACHE_DIRECTORY Location on the local fs where to store reads. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.CacheDirectory, os.TempDir()). -storage-eos-enable-logging | $STORAGE_DRIVER_EOS_ENABLE_LOGGING Enables logging of the commands executed. -storage-eos-show-hidden-sysfiles | $STORAGE_DRIVER_EOS_SHOW_HIDDEN_SYSFILES show internal EOS files like .sys.v# and .sys.a# files.. -storage-eos-force-singleuser-mode | $STORAGE_DRIVER_EOS_FORCE_SINGLEUSER_MODE force connections to EOS to use SingleUsername. -storage-eos-use-keytab | $STORAGE_DRIVER_EOS_USE_KEYTAB authenticate requests by using an EOS keytab. -storage-eos-enable-home | $STORAGE_DRIVER_EOS_ENABLE_HOME enable the creation of home directories. -storage-eos-sec-protocol | $STORAGE_DRIVER_EOS_SEC_PROTOCOL the xrootd security protocol to use between the server and EOS. -storage-eos-keytab | $STORAGE_DRIVER_EOS_KEYTAB the location of the keytab to use to authenticate to EOS. -storage-eos-single-username | $STORAGE_DRIVER_EOS_SINGLE_USERNAME the username to use when SingleUserMode is enabled. -storage-eos-layout | $STORAGE_DRIVER_EOS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.UsernameLower}} and {{.Provider}} also supports prefixing dirs: \u0026quot;{{.UsernamePrefixCount.2}}/{{.UsernameLower}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.UserLayout, \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot;). -storage-eos-gatewaysvc | $STORAGE_DRIVER_EOS_GATEWAYSVC URL to use for the storage gateway service. Default: flags.OverrideDefaultString(cfg.Reva.Storages.EOS.GatewaySVC, \u0026quot;localhost:9142\u0026quot;).  owCloud Driver  -storage-owncloud-datadir | $STORAGE_DRIVER_OWNCLOUD_DATADIR the path to the owncloud data directory. Default: flags.OverrideDefaultString(cfg.Reva.Storages.OwnCloud.Root, \u0026quot;/var/tmp/ocis/storage/owncloud\u0026quot;). -storage-owncloud-uploadinfo-dir | $STORAGE_DRIVER_OWNCLOUD_UPLOADINFO_DIR the path to the tus upload info directory. Default: flags.OverrideDefaultString(cfg.Reva.Storages.OwnCloud.UploadInfoDir, \u0026quot;/var/tmp/ocis/storage/uploadinfo\u0026quot;). -storage-owncloud-share-folder | $STORAGE_DRIVER_OWNCLOUD_SHARE_FOLDER name of the shares folder. Default: flags.OverrideDefaultString(cfg.Reva.Storages.OwnCloud.ShareFolder, \u0026quot;/Shares\u0026quot;). -storage-owncloud-scan | $STORAGE_DRIVER_OWNCLOUD_SCAN scan files on startup to add fileids. Default: flags.OverrideDefaultBool(cfg.Reva.Storages.OwnCloud.Scan, true). -storage-owncloud-redis | $STORAGE_DRIVER_OWNCLOUD_REDIS_ADDR the address of the redis server. Default: flags.OverrideDefaultString(cfg.Reva.Storages.OwnCloud.Redis, \u0026quot;:6379\u0026quot;). -storage-owncloud-enable-home | $STORAGE_DRIVER_OWNCLOUD_ENABLE_HOME enable the creation of home storages. Default: flags.OverrideDefaultBool(cfg.Reva.Storages.OwnCloud.EnableHome, false). -storage-owncloud-layout | $STORAGE_DRIVER_OWNCLOUD_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: flags.OverrideDefaultString(cfg.Reva.Storages.OwnCloud.UserLayout, \u0026quot;{{.Id.OpaqueId}}\u0026quot;).  Ocis Driver  -storage-ocis-root | $STORAGE_DRIVER_OCIS_ROOT the path to the local storage root. Default: flags.OverrideDefaultString(cfg.Reva.Storages.Common.Root, \u0026quot;/var/tmp/ocis/storage/users\u0026quot;). -storage-ocis-enable-home | $STORAGE_DRIVER_OCIS_ENABLE_HOME enable the creation of home storages. Default: flags.OverrideDefaultBool(cfg.Reva.Storages.Common.EnableHome, false). -storage-ocis-layout | $STORAGE_DRIVER_OCIS_LAYOUT \u0026quot;layout of the users home dir path on disk, in addition to {{.Username}}, {{.Mail}}, {{.Id.OpaqueId}}, {{.Id.Idp}} also supports prefixing dirs: \u0026quot;{{substr 0 1 .Username}}/{{.Username}}\u0026quot; will turn \u0026quot;Einstein\u0026quot; into \u0026quot;Ei/Einstein\u0026quot; . Default: flags.OverrideDefaultString(cfg.Reva.Storages.Common.UserLayout, \u0026quot;{{.Id.OpaqueId}}\u0026quot;).  "},{"id":25,"href":"/extensions/store/configuration/","title":"Configuration","parent":"Store","content":"    Configuration  Configuration using config files Environment variables Commandline flags store server store version store health store ocis-store       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nstore server Start integrated server\nUsage: store server [command options] [arguments...]\n -log-file | $STORE_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $STORE_TRACING_ENABLED Enable sending traces. -tracing-type | $STORE_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $STORE_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $STORE_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $STORE_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;store\u0026quot;). -debug-addr | $STORE_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9460\u0026quot;). -debug-token | $STORE_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $STORE_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $STORE_DEBUG_ZPAGES Enable zpages debugging. -grpc-namespace | $STORE_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $STORE_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;store\u0026quot;). -data-path | $STORE_DATA_PATH location of the store data path. Default: flags.OverrideDefaultString(cfg.Datapath, \u0026quot;/var/tmp/ocis/store\u0026quot;).  store version Print the versions of the running instances\nUsage: store version [command options] [arguments...]\n -grpc-namespace | $STORE_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $STORE_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;store\u0026quot;).  store health Check health status\nUsage: store health [command options] [arguments...]\n -debug-addr | $STORE_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9460\u0026quot;).  store ocis-store Service to store values for ocis extensions\nUsage: store ocis-store [command options] [arguments...]\n -config-file | $STORE_CONFIG_FILE Path to config file. -log-level | $STORE_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $STORE_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $STORE_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":26,"href":"/extensions/proxy/","title":"Proxy","parent":"Extensions","content":"This service provides a proxy service that routes requests to the correct extensions.\n"},{"id":27,"href":"/extensions/glauth/configuration/","title":"Configuration","parent":"GLAuth","content":"    Configuration  Configuration using config files Environment variables Commandline flags glauth server glauth health glauth ocis-glauth       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-glauth reads glauth.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nglauth server Start integrated server\nUsage: glauth server [command options] [arguments...]\n -log-file | $GLAUTH_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $GLAUTH_CONFIG_FILE Path to config file. Default: flags.OverrideDefaultString(cfg.File, \u0026quot;\u0026quot;). -tracing-enabled | $GLAUTH_TRACING_ENABLED Enable sending traces. -tracing-type | $GLAUTH_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $GLAUTH_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $GLAUTH_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $GLAUTH_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;glauth\u0026quot;). -debug-addr | $GLAUTH_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9129\u0026quot;). -debug-token | $GLAUTH_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $GLAUTH_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GLAUTH_DEBUG_ZPAGES Enable zpages debugging. -role-bundle-id | $GLAUTH_ROLE_BUNDLE_ID roleid used to make internal grpc requests. Default: flags.OverrideDefaultString(cfg.RoleBundleUUID, \u0026quot;71881883-1768-46bd-a24d-a356a2afdf7f\u0026quot;). -ldap-addr | $GLAUTH_LDAP_ADDR Address to bind ldap server. Default: flags.OverrideDefaultString(cfg.Ldap.Address, \u0026quot;0.0.0.0:9125\u0026quot;). -ldap-enabled | $GLAUTH_LDAP_ENABLED Enable ldap server. Default: flags.OverrideDefaultBool(cfg.Ldap.Enabled, true). -ldaps-addr | $GLAUTH_LDAPS_ADDR Address to bind ldap server. Default: flags.OverrideDefaultString(cfg.Ldaps.Address, \u0026quot;0.0.0.0:9126\u0026quot;). -ldaps-enabled | $GLAUTH_LDAPS_ENABLED Enable ldap server. Default: flags.OverrideDefaultBool(cfg.Ldaps.Enabled, true). -ldaps-cert | $GLAUTH_LDAPS_CERT path to ldaps certificate in PEM format. Default: flags.OverrideDefaultString(cfg.Ldaps.Cert, \u0026quot;./ldap.crt\u0026quot;). -ldaps-key | $GLAUTH_LDAPS_KEY path to ldaps key in PEM format. Default: flags.OverrideDefaultString(cfg.Ldaps.Key, \u0026quot;./ldap.key\u0026quot;). -backend-basedn | $GLAUTH_BACKEND_BASEDN base distinguished name to expose. Default: flags.OverrideDefaultString(cfg.Backend.BaseDN, \u0026quot;dc=example,dc=org\u0026quot;). -backend-name-format | $GLAUTH_BACKEND_NAME_FORMAT name attribute for entries to expose. typically cn or uid. Default: flags.OverrideDefaultString(cfg.Backend.NameFormat, \u0026quot;cn\u0026quot;). -backend-group-format | $GLAUTH_BACKEND_GROUP_FORMAT name attribute for entries to expose. typically ou, cn or dc. Default: flags.OverrideDefaultString(cfg.Backend.GroupFormat, \u0026quot;ou\u0026quot;). -backend-ssh-key-attr | $GLAUTH_BACKEND_SSH_KEY_ATTR ssh key attribute for entries to expose. Default: flags.OverrideDefaultString(cfg.Backend.SSHKeyAttr, \u0026quot;sshPublicKey\u0026quot;). -backend-datastore | $GLAUTH_BACKEND_DATASTORE datastore to use as the backend. one of accounts, ldap or owncloud. Default: flags.OverrideDefaultString(cfg.Backend.Datastore, \u0026quot;accounts\u0026quot;). -backend-insecure | $GLAUTH_BACKEND_INSECURE Allow insecure requests to the datastore. Default: flags.OverrideDefaultBool(cfg.Backend.Insecure, false). -backend-use-graphapi | $GLAUTH_BACKEND_USE_GRAPHAPI use Graph API, only for owncloud datastore. Default: flags.OverrideDefaultBool(cfg.Backend.UseGraphAPI, true). -fallback-basedn | $GLAUTH_FALLBACK_BASEDN base distinguished name to expose. Default: flags.OverrideDefaultString(cfg.Fallback.BaseDN, \u0026quot;dc=example,dc=org\u0026quot;). -fallback-name-format | $GLAUTH_FALLBACK_NAME_FORMAT name attribute for entries to expose. typically cn or uid. Default: flags.OverrideDefaultString(cfg.Fallback.NameFormat, \u0026quot;cn\u0026quot;). -fallback-group-format | $GLAUTH_FALLBACK_GROUP_FORMAT name attribute for entries to expose. typically ou, cn or dc. Default: flags.OverrideDefaultString(cfg.Fallback.GroupFormat, \u0026quot;ou\u0026quot;). -fallback-ssh-key-attr | $GLAUTH_FALLBACK_SSH_KEY_ATTR ssh key attribute for entries to expose. Default: flags.OverrideDefaultString(cfg.Fallback.SSHKeyAttr, \u0026quot;sshPublicKey\u0026quot;). -fallback-datastore | $GLAUTH_FALLBACK_DATASTORE datastore to use as the fallback. one of accounts, ldap or owncloud. Default: flags.OverrideDefaultString(cfg.Fallback.Datastore, \u0026quot;\u0026quot;). -fallback-insecure | $GLAUTH_FALLBACK_INSECURE Allow insecure requests to the datastore. Default: flags.OverrideDefaultBool(cfg.Fallback.Insecure, false). -fallback-use-graphapi | $GLAUTH_FALLBACK_USE_GRAPHAPI use Graph API, only for owncloud datastore. Default: flags.OverrideDefaultBool(cfg.Fallback.UseGraphAPI, true).  glauth health Check health status\nUsage: glauth health [command options] [arguments...]\n -debug-addr | $GLAUTH_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9129\u0026quot;).  glauth ocis-glauth Serve GLAuth API for oCIS\nUsage: glauth ocis-glauth [command options] [arguments...]\n -log-level | $GLAUTH_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GLAUTH_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GLAUTH_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":28,"href":"/extensions/graph-explorer/configuration/","title":"Configuration","parent":"Graph-Explorer","content":"    Configuration  Configuration using config files Environment variables Commandline flags   Root Command Sub Commands  graph-explorer server graph-explorer health       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nRoot Command Serve Graph-Explorer for oCIS\nUsage: graph-explorer [global options] command [command options] [arguments...]\n -log-level | $GRAPH_EXPLORER_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GRAPH_EXPLORER_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GRAPH_EXPLORER_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  Sub Commands graph-explorer server Start integrated server\nUsage: graph-explorer server [command options] [arguments...]\n -log-file | $GRAPH_EXPLORER_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $GRAPH_EXPLORER_TRACING_ENABLED Enable sending traces. -tracing-type | $GRAPH_EXPLORER_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $GRAPH_EXPLORER_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $GRAPH_EXPLORER_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $GRAPH_EXPLORER_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;graph-explorer\u0026quot;). -debug-addr | $GRAPH_EXPLORER_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9136\u0026quot;). -debug-token | $GRAPH_EXPLORER_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $GRAPH_EXPLORER_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GRAPH_EXPLORER_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $GRAPH_EXPLORER_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9135\u0026quot;). -http-root | $GRAPH_EXPLORER_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/graph-explorer\u0026quot;). -http-namespace | $GRAPH_EXPLORER_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.HTTP.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -issuer | $GRAPH_EXPLORER_ISSUER , $OCIS_URL Set the OpenID Connect Provider. Default: flags.OverrideDefaultString(cfg.GraphExplorer.Issuer, \u0026quot;https://localhost:9200\u0026quot;). -client-id | $GRAPH_EXPLORER_CLIENT_ID Set the OpenID Client ID to send to the issuer. Default: flags.OverrideDefaultString(cfg.GraphExplorer.ClientID, \u0026quot;ocis-explorer.js\u0026quot;). -graph-url | $GRAPH_EXPLORER_GRAPH_URL Set the url to the graph api service. Default: flags.OverrideDefaultString(cfg.GraphExplorer.GraphURL, \u0026quot;https://localhost:9200/graph\u0026quot;).  graph-explorer health Check health status\nUsage: graph-explorer health [command options] [arguments...]\n -debug-addr | $GRAPH_EXPLORER_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9136\u0026quot;).  "},{"id":29,"href":"/extensions/graph/configuration/","title":"Configuration","parent":"Graph","content":"    Configuration  Configuration using config files Environment variables Commandline flags graph health graph ocis-graph graph server       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-proxy reads proxy.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\ngraph health Check health status\nUsage: graph health [command options] [arguments...]\n -debug-addr | $GRAPH_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9124\u0026quot;).  graph ocis-graph Serve Graph API for oCIS\nUsage: graph ocis-graph [command options] [arguments...]\n -config-file | $GRAPH_CONFIG_FILE Path to config file. Default: flags.OverrideDefaultString(cfg.File, \u0026quot;\u0026quot;). -log-level | $GRAPH_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $GRAPH_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $GRAPH_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  graph server Start integrated server\nUsage: graph server [command options] [arguments...]\n -log-file | $GRAPH_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $GRAPH_TRACING_ENABLED Enable sending traces. -tracing-type | $GRAPH_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $GRAPH_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $GRAPH_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $GRAPH_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;graph\u0026quot;). -debug-addr | $GRAPH_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9124\u0026quot;). -debug-token | $GRAPH_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $GRAPH_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $GRAPH_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $GRAPH_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9120\u0026quot;). -http-root | $GRAPH_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/graph\u0026quot;). -http-namespace | $GRAPH_HTTP_NAMESPACE Set the base namespace for the http service for service discovery. Default: flags.OverrideDefaultString(cfg.HTTP.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -ldap-network | $GRAPH_LDAP_NETWORK Network protocol to use to connect to the Ldap server. Default: flags.OverrideDefaultString(cfg.Ldap.Network, \u0026quot;tcp\u0026quot;). -ldap-address | $GRAPH_LDAP_ADDRESS Address to connect to the Ldap server. Default: flags.OverrideDefaultString(cfg.Ldap.Address, \u0026quot;0.0.0.0:9125\u0026quot;). -ldap-username | $GRAPH_LDAP_USERNAME User to bind to the Ldap server. Default: flags.OverrideDefaultString(cfg.Ldap.UserName, \u0026quot;cn=admin,dc=example,dc=org\u0026quot;). -ldap-password | $GRAPH_LDAP_PASSWORD Password to bind to the Ldap server. Default: flags.OverrideDefaultString(cfg.Ldap.Password, \u0026quot;admin\u0026quot;). -ldap-basedn-users | $GRAPH_LDAP_BASEDN_USERS BaseDN to look for users. Default: flags.OverrideDefaultString(cfg.Ldap.BaseDNUsers, \u0026quot;ou=users,dc=example,dc=org\u0026quot;). -ldap-basedn-groups | $GRAPH_LDAP_BASEDN_GROUPS BaseDN to look for users. Default: flags.OverrideDefaultString(cfg.Ldap.BaseDNGroups, \u0026quot;ou=groups,dc=example,dc=org\u0026quot;). -oidc-endpoint | $GRAPH_OIDC_ENDPOINT , $OCIS_URL OpenIDConnect endpoint. Default: flags.OverrideDefaultString(cfg.OpenIDConnect.Endpoint, \u0026quot;https://localhost:9200\u0026quot;). -oidc-insecure | $GRAPH_OIDC_INSECURE OpenIDConnect endpoint. -oidc-realm | $GRAPH_OIDC_REALM OpenIDConnect realm. Default: flags.OverrideDefaultString(cfg.OpenIDConnect.Realm, \u0026quot;\u0026quot;). -reva-gateway-addr | $REVA_GATEWAY_ADDR REVA Gateway Endpoint. Default: flags.OverrideDefaultString(cfg.Reva.Address, \u0026quot;127.0.0.1:9142\u0026quot;).  "},{"id":30,"href":"/extensions/idp/configuration/","title":"Configuration","parent":"IDP","content":"    Configuration  Configuration using config files Environment variables Commandline flags idp server idp version idp health idp ocis-idp       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-idp reads idp.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\nidp server Start integrated server\nUsage: idp server [command options] [arguments...]\n -log-file | $IDP_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -config-file | $IDP_CONFIG_FILE Path to config file. Default: flags.OverrideDefaultString(cfg.File, \u0026quot;\u0026quot;). -tracing-enabled | $IDP_TRACING_ENABLED Enable sending traces. -tracing-type | $IDP_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $IDP_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $IDP_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $IDP_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;idp\u0026quot;). -debug-addr | $IDP_DEBUG_ADDR Address to bind debug server. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9134\u0026quot;). -debug-token | $IDP_DEBUG_TOKEN Token to grant metrics access. Default: flags.OverrideDefaultString(cfg.Debug.Token, \u0026quot;\u0026quot;). -debug-pprof | $IDP_DEBUG_PPROF Enable pprof debugging. -debug-zpages | $IDP_DEBUG_ZPAGES Enable zpages debugging. -http-addr | $IDP_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9130\u0026quot;). -http-root | $IDP_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/\u0026quot;). -http-namespace | $IDP_HTTP_NAMESPACE Set the base namespace for service discovery. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -name | $IDP_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;idp\u0026quot;). -identity-manager | $IDP_IDENTITY_MANAGER Identity manager (one of ldap,kc,cookie,dummy). Default: flags.OverrideDefaultString(cfg.IDP.IdentityManager, \u0026quot;ldap\u0026quot;). -ldap-uri | $IDP_LDAP_URI URI of the LDAP server (glauth). Default: flags.OverrideDefaultString(cfg.Ldap.URI, \u0026quot;ldap://localhost:9125\u0026quot;). -ldap-bind-dn | $IDP_LDAP_BIND_DN Bind DN for the LDAP server (glauth). Default: flags.OverrideDefaultString(cfg.Ldap.BindDN, \u0026quot;cn=idp,ou=sysusers,dc=example,dc=org\u0026quot;). -ldap-bind-password | $IDP_LDAP_BIND_PASSWORD Password for the Bind DN of the LDAP server (glauth). Default: flags.OverrideDefaultString(cfg.Ldap.BindPassword, \u0026quot;idp\u0026quot;). -ldap-base-dn | $IDP_LDAP_BASE_DN LDAP base DN of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.BaseDN, \u0026quot;ou=users,dc=example,dc=org\u0026quot;). -ldap-scope | $IDP_LDAP_SCOPE LDAP scope of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.Scope, \u0026quot;sub\u0026quot;). -ldap-login-attribute | $IDP_LDAP_LOGIN_ATTRIBUTE LDAP login attribute of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.LoginAttribute, \u0026quot;cn\u0026quot;). -ldap-email-attribute | $IDP_LDAP_EMAIL_ATTRIBUTE LDAP email attribute of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.EmailAttribute, \u0026quot;mail\u0026quot;). -ldap-name-attribute | $IDP_LDAP_NAME_ATTRIBUTE LDAP name attribute of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.NameAttribute, \u0026quot;sn\u0026quot;). -ldap-uuid-attribute | $IDP_LDAP_UUID_ATTRIBUTE LDAP UUID attribute of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.UUIDAttribute, \u0026quot;uid\u0026quot;). -ldap-uuid-attribute-type | $IDP_LDAP_UUID_ATTRIBUTE_TYPE LDAP UUID attribute type of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.UUIDAttributeType, \u0026quot;text\u0026quot;). -ldap-filter | $IDP_LDAP_FILTER LDAP filter of the oCIS users. Default: flags.OverrideDefaultString(cfg.Ldap.Filter, \u0026quot;(objectClass=posixaccount)\u0026quot;). -transport-tls-cert | $IDP_TRANSPORT_TLS_CERT Certificate file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSCert, \u0026quot;\u0026quot;). -transport-tls-key | $IDP_TRANSPORT_TLS_KEY Secret file for transport encryption. Default: flags.OverrideDefaultString(cfg.HTTP.TLSKey, \u0026quot;\u0026quot;). -iss | $IDP_ISS , $OCIS_URL OIDC issuer URL. Default: flags.OverrideDefaultString(cfg.IDP.Iss, \u0026quot;https://localhost:9200\u0026quot;). -signing-kid | $IDP_SIGNING_KID Value of kid field to use in created tokens (uniquely identifying the signing-private-key). Default: flags.OverrideDefaultString(cfg.IDP.SigningKid, \u0026quot;\u0026quot;). -validation-keys-path | $IDP_VALIDATION_KEYS_PATH Full path to a folder containg PEM encoded private or public key files used for token validaton (file name without extension is used as kid). Default: flags.OverrideDefaultString(cfg.IDP.ValidationKeysPath, \u0026quot;\u0026quot;). -encryption-secret | $IDP_ENCRYPTION_SECRET Full path to a file containing a %d bytes secret key. Default: flags.OverrideDefaultString(cfg.IDP.EncryptionSecretFile, \u0026quot;\u0026quot;). -signing-method | $IDP_SIGNING_METHOD JWT default signing method. Default: flags.OverrideDefaultString(cfg.IDP.SigningMethod, \u0026quot;PS256\u0026quot;). -uri-base-path | $IDP_URI_BASE_PATH Custom base path for URI endpoints. Default: flags.OverrideDefaultString(cfg.IDP.URIBasePath, \u0026quot;\u0026quot;). -sign-in-uri | $IDP_SIGN_IN_URI Custom redirection URI to sign-in form. Default: flags.OverrideDefaultString(cfg.IDP.SignInURI, \u0026quot;\u0026quot;). -signed-out-uri | $IDP_SIGN_OUT_URI Custom redirection URI to signed-out goodbye page. Default: flags.OverrideDefaultString(cfg.IDP.SignedOutURI, \u0026quot;\u0026quot;). -authorization-endpoint-uri | $IDP_ENDPOINT_URI Custom authorization endpoint URI. Default: flags.OverrideDefaultString(cfg.IDP.AuthorizationEndpointURI, \u0026quot;\u0026quot;). -endsession-endpoint-uri | $IDP_ENDSESSION_ENDPOINT_URI Custom endsession endpoint URI. Default: flags.OverrideDefaultString(cfg.IDP.EndsessionEndpointURI, \u0026quot;\u0026quot;). -asset-path | $IDP_ASSET_PATH Path to custom assets. Default: flags.OverrideDefaultString(cfg.Asset.Path, \u0026quot;\u0026quot;). -identifier-client-path | $IDP_IDENTIFIER_CLIENT_PATH Path to the identifier web client base folder. Default: flags.OverrideDefaultString(cfg.IDP.IdentifierClientPath, \u0026quot;/var/tmp/ocis/idp\u0026quot;). -identifier-registration-conf | $IDP_IDENTIFIER_REGISTRATION_CONF Path to a identifier-registration.yaml configuration file. Default: flags.OverrideDefaultString(cfg.IDP.IdentifierRegistrationConf, \u0026quot;./config/identifier-registration.yaml\u0026quot;). -identifier-scopes-conf | $IDP_IDENTIFIER_SCOPES_CONF Path to a scopes.yaml configuration file. Default: flags.OverrideDefaultString(cfg.IDP.IdentifierScopesConf, \u0026quot;\u0026quot;). -insecure | $IDP_INSECURE Disable TLS certificate and hostname validation. -tls | $IDP_TLS Use TLS (disable only if idp is behind a TLS-terminating reverse-proxy).. Default: flags.OverrideDefaultBool(cfg.HTTP.TLS, false). -allow-client-guests | $IDP_ALLOW_CLIENT_GUESTS Allow sign in of client controlled guest users. -allow-dynamic-client-registration | $IDP_ALLOW_DYNAMIC_CLIENT_REGISTRATION Allow dynamic OAuth2 client registration. Default: flags.OverrideDefaultBool(cfg.IDP.AllowDynamicClientRegistration, true). -disable-identifier-webapp | $IDP_DISABLE_IDENTIFIER_WEBAPP Disable built-in identifier-webapp to use a frontend hosted elsewhere.. Default: flags.OverrideDefaultBool(cfg.IDP.IdentifierClientDisabled, true).  idp version Print the versions of the running instances\nUsage: idp version [command options] [arguments...]\n -http-namespace | $IDP_HTTP_NAMESPACE Set the base namespace for service discovery. Default: flags.OverrideDefaultString(cfg.Service.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -name | $IDP_NAME Service name. Default: flags.OverrideDefaultString(cfg.Service.Name, \u0026quot;idp\u0026quot;).  idp health Check health status\nUsage: idp health [command options] [arguments...]\n -debug-addr | $IDP_DEBUG_ADDR Address to debug endpoint. Default: flags.OverrideDefaultString(cfg.Debug.Addr, \u0026quot;0.0.0.0:9134\u0026quot;).  idp ocis-idp Serve IDP API for oCIS\nUsage: idp ocis-idp [command options] [arguments...]\n -log-level | $IDP_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $IDP_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $IDP_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  "},{"id":31,"href":"/extensions/idp/","title":"IDP","parent":"Extensions","content":"This service provides an OpenID Connect provider which is the default way to authenticate in oCIS.\n"},{"id":32,"href":"/extensions/accounts/configuration/","title":"Configuration","parent":"Accounts","content":"    Configuration  Configuration using config files Environment variables Commandline flags accounts add accounts list accounts rebuildIndex accounts remove accounts ocis-accounts accounts server accounts update accounts inspect accounts version       Configuration Configuration using config files Out of the box extensions will attempt to read configuration details from:\n/etc/ocis $HOME/.ocis ./config For this configuration to be picked up, have a look at your extension root command and look for which default config name it has assigned. i.e: ocis-accounts reads accounts.json | yaml | toml ....\nSo far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/ocis.yml, ${HOME}/.ocis/ocis.yml or $(pwd)/config/ocis.yml.\nEnvironment variables If you prefer to configure the service with environment variables you can see the available variables below.\nIf multiple variables are listed for one option, they are in order of precedence. This means the leftmost variable will always win if given.\nCommandline flags If you prefer to configure the service with commandline flags you can see the available variables below. Command line flags are only working when calling the subcommand directly.\naccounts add Create a new account\nUsage: accounts add [command options] [arguments...]\naccounts list List existing accounts\nUsage: accounts list [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $ACCOUNTS_NAME service name. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;accounts\u0026quot;).  accounts rebuildIndex Rebuilds the service\u0026rsquo;s index, i.e. deleting and then re-adding all existing documents\nUsage: accounts rebuildIndex [command options] [arguments...]\naccounts remove Removes an existing account\nUsage: accounts remove [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $ACCOUNTS_NAME service name. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;accounts\u0026quot;).  accounts ocis-accounts Provide accounts and groups for oCIS\nUsage: accounts ocis-accounts [command options] [arguments...]\n -log-level | $ACCOUNTS_LOG_LEVEL , $OCIS_LOG_LEVEL Set logging level. -log-pretty | $ACCOUNTS_LOG_PRETTY , $OCIS_LOG_PRETTY Enable pretty logging. -log-color | $ACCOUNTS_LOG_COLOR , $OCIS_LOG_COLOR Enable colored logging.  accounts server Start ocis accounts service\nUsage: accounts server [command options] [arguments...]\n -log-file | $ACCOUNTS_LOG_FILE , $OCIS_LOG_FILE Enable log to file. -tracing-enabled | $ACCOUNTS_TRACING_ENABLED Enable sending traces. -tracing-type | $ACCOUNTS_TRACING_TYPE Tracing backend type. Default: flags.OverrideDefaultString(cfg.Tracing.Type, \u0026quot;jaeger\u0026quot;). -tracing-endpoint | $ACCOUNTS_TRACING_ENDPOINT Endpoint for the agent. Default: flags.OverrideDefaultString(cfg.Tracing.Endpoint, \u0026quot;\u0026quot;). -tracing-collector | $ACCOUNTS_TRACING_COLLECTOR Endpoint for the collector. Default: flags.OverrideDefaultString(cfg.Tracing.Collector, \u0026quot;\u0026quot;). -tracing-service | $ACCOUNTS_TRACING_SERVICE Service name for tracing. Default: flags.OverrideDefaultString(cfg.Tracing.Service, \u0026quot;accounts\u0026quot;). -http-namespace | $ACCOUNTS_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: flags.OverrideDefaultString(cfg.HTTP.Namespace, \u0026quot;com.owncloud.web\u0026quot;). -http-addr | $ACCOUNTS_HTTP_ADDR Address to bind http server. Default: flags.OverrideDefaultString(cfg.HTTP.Addr, \u0026quot;0.0.0.0:9181\u0026quot;). -http-root | $ACCOUNTS_HTTP_ROOT Root path of http server. Default: flags.OverrideDefaultString(cfg.HTTP.Root, \u0026quot;/\u0026quot;). -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -grpc-addr | $ACCOUNTS_GRPC_ADDR Address to bind grpc server. Default: flags.OverrideDefaultString(cfg.GRPC.Addr, \u0026quot;0.0.0.0:9180\u0026quot;). -name | $ACCOUNTS_NAME service name. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;accounts\u0026quot;). -asset-path | $ACCOUNTS_ASSET_PATH Path to custom assets. Default: flags.OverrideDefaultString(cfg.Asset.Path, \u0026quot;\u0026quot;). -jwt-secret | $ACCOUNTS_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: flags.OverrideDefaultString(cfg.TokenManager.JWTSecret, \u0026quot;Pive-Fumkiu4\u0026quot;). -storage-disk-path | $ACCOUNTS_STORAGE_DISK_PATH Path on the local disk, e.g. /var/tmp/ocis/accounts. Default: flags.OverrideDefaultString(cfg.Repo.Disk.Path, \u0026quot;\u0026quot;). -storage-cs3-provider-addr | $ACCOUNTS_STORAGE_CS3_PROVIDER_ADDR bind address for the metadata storage provider. Default: flags.OverrideDefaultString(cfg.Repo.CS3.ProviderAddr, \u0026quot;localhost:9215\u0026quot;). -storage-cs3-data-url | $ACCOUNTS_STORAGE_CS3_DATA_URL http endpoint of the metadata storage. Default: flags.OverrideDefaultString(cfg.Repo.CS3.DataURL, \u0026quot;http://localhost:9216\u0026quot;). -storage-cs3-data-prefix | $ACCOUNTS_STORAGE_CS3_DATA_PREFIX path prefix for the http endpoint of the metadata storage, without leading slash. Default: flags.OverrideDefaultString(cfg.Repo.CS3.DataPrefix, \u0026quot;data\u0026quot;). -storage-cs3-jwt-secret | $ACCOUNTS_STORAGE_CS3_JWT_SECRET , $OCIS_JWT_SECRET Used to create JWT to talk to reva, should equal reva\u0026rsquo;s jwt-secret. Default: flags.OverrideDefaultString(cfg.Repo.CS3.JWTSecret, \u0026quot;Pive-Fumkiu4\u0026quot;). -service-user-uuid | $ACCOUNTS_SERVICE_USER_UUID uuid of the internal service user (required on EOS). Default: flags.OverrideDefaultString(cfg.ServiceUser.UUID, \u0026quot;95cb8724-03b2-11eb-a0a6-c33ef8ef53ad\u0026quot;). -service-user-username | $ACCOUNTS_SERVICE_USER_USERNAME username of the internal service user (required on EOS). Default: flags.OverrideDefaultString(cfg.ServiceUser.Username, \u0026quot;\u0026quot;).  accounts update Make changes to an existing account\nUsage: accounts update [command options] [arguments...]\naccounts inspect Show detailed data on an existing account\nUsage: accounts inspect [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $ACCOUNTS_NAME service name. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;accounts\u0026quot;).  accounts version Print the versions of the running instances\nUsage: accounts version [command options] [arguments...]\n -grpc-namespace | $ACCOUNTS_GRPC_NAMESPACE Set the base namespace for the grpc namespace. Default: flags.OverrideDefaultString(cfg.GRPC.Namespace, \u0026quot;com.owncloud.api\u0026quot;). -name | $ACCOUNTS_NAME service name. Default: flags.OverrideDefaultString(cfg.Server.Name, \u0026quot;accounts\u0026quot;).  "},{"id":33,"href":"/ocis/deployment/","title":"Deployment","parent":"oCIS - ownCloud Infinite Scale","content":"    Deployments scenarios and examples  Setup oCIS on your server Migrate an existing ownCloud 10   Secure an oCIS instance  Change default secrets Delete demo users       Deployments scenarios and examples This section handles deployments and operations for admins and people who are interested in how versatile oCIS is. If you want to just try oCIS you may also follow Getting started.\nSetup oCIS on your server oCIS deployments are super simple, yet there are many configurations possible for advanced setups.\n Basic oCIS setup - configure domain, certificates and port oCIS setup with Traefik for SSL termination oCIS setup with Keycloak as identity provider  Migrate an existing ownCloud 10 You can run ownCloud 10 and oCIS together. This allows you to use new parts of oCIS already with ownCloud 10 and also to have a smooth transition for users from ownCloud 10 to oCIS.\n ownCloud 10 setup with oCIS serving ownCloud Web and acting as OIDC provider - This allows you to switch between the traditional ownCloud 10 frontend and the new ownCloud Web frontend Run ownCloud 10 and oCIS in parallel - together Migrate users from ownCloud 10 to oCIS  Secure an oCIS instance Change default secrets oCIS uses two system users which are needed for being operational:\n Reva Inter Operability Platform (bc596f3c-c955-4328-80a0-60d018b4ad57) Kopano IDP (820ba2a1-3f54-4538-80a4-2d73007e30bf)  Both have simple default passwords which need to be changed. Currently, changing a password is only possible on the command line. You need to run ocis accounts update --password \u0026lt;new-password\u0026gt; \u0026lt;id\u0026gt; for both users.\nThe new password for the Reva Inter Operability Platform user must be made available to oCIS by using the environment variable STORAGE_LDAP_BIND_PASSWORD. The same applies to the new Kopano IDP user password, which needs do be made available to oCIS in IDP_LDAP_BIND_PASSWORD.\nFurthermore, oCIS uses a shared secret to sign JWT tokens for inter service authorization, which also needs to be changed by the user. You can change it by setting the OCIS_JWT_SECRET environment variable for oCIS to a random string.\nDelete demo users Before deleting the demo users mentioned below, you must create a new account for yourself and assign it to the administrator role.  oCIS ships with a few demo users besides the system users:\n Admin (ddc2004c-0977-11eb-9d3f-a793888cd0f8) Albert Einstein (4c510ada-c86b-4815-8820-42cdf82c3d51) Richard Feynman (932b4540-8d16-481e-8ef4-588e4b6b151c) Maurice Moss (058bff95-6708-4fe5-91e4-9ea3d377588b) Marie Curie (f7fbf8c8-139b-4376-b307-cf0a8c2d0d9c)  You can view them in ownCloud Web if you log in as Admin user or list them by running ocis accounts list. After adding your own user it is safe to delete the demo users in the web UI or with the command ocis accounts remove \u0026lt;id\u0026gt;. Please do not delete the system users (see change default secrets) or oCIS will not function properly anymore.\n"},{"id":34,"href":"/extensions/accounts/","title":"Accounts","parent":"Extensions","content":"Abstract oCIS needs to be able to identify users. Without a non reassignable and persistent account ID share metadata cannot be reliably persisted. accounts allows exchanging oidc claims for a uuid. Using a uuid allows users to change the login, mail or even openid connect provider without breaking any persisted metadata that might have been attached to it.\n persists accounts uses graph api properties ldap can be synced using the onpremise* attributes  Table of Contents    Configuration     GRPC API     "},{"id":35,"href":"/extensions/ocis_hello/building/","title":"Building","parent":"Hello","content":"    Frontend Backend     As this project is built with Go and NodeJS, so you need to install that first. The installation of Go and NodeJS is out of the scope of this document, please follow the official documentation for Go, NodeJS and Yarn, to build this project you have to install Go \u0026gt;= v1.13. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile and respectively our package.json.\nFrontend yarn install yarn build The above commands will install the required build dependencies and build the whole frontend bundle. This bundle will we embeded into the binary later on.\nBackend make generate make build The above commands will embed the frontend bundle into the binary. Finally you should have the binary within the bin/ folder now, give it a try with ./bin/ocis-hello -h to see all available options.\n"},{"id":36,"href":"/clients/web/building/","title":"Building from source","parent":"ownCloud Web","content":"    Building ownCloud Web Updating dependencies Building the documentation  Setting up Viewing the documentation Deploying the documentation       Building ownCloud Web  Run yarn install to install dependencies Run yarn build to build Web and all apps included in the packages folder  Updating dependencies  Run yarn upgrade to update dependencies  Building the documentation Setting up  Install hugo Run make docs  Viewing the documentation To view the rendered docs in the browser run:\ncd hugo hugo -D server Then open \u0026ldquo;http://localhost:1313/\u0026rdquo;\nWhen making changes to the docs, run make docs again and the server will pick up the changes and reload the page automatically\nDeploying the documentation The documentation is automatically deployed from the master branch to https://owncloud.github.io/web/\n"},{"id":37,"href":"/extensions/glauth/configuration-hints/","title":"Configuration Hints","parent":"GLAuth","content":"    Configuration hints     Configuration hints The default setup does not use a fallback backend. It can be enabled by setting the GLAUTH_FALLBACK_DATASTORE environment variable.\nWhen using owncloud make sure to use the full URL to the ownCloud 10 graph api app endpoint, eg.: GLAUTH_FALLBACK_SERVERS=\u0026quot;https://demo.owncloud.com/apps/graphapi/v1.0\u0026quot;\n"},{"id":38,"href":"/extensions/onlyoffice/getting-started/","title":"Getting Started","parent":"OnlyOffice","content":"    Installation  Docker Binaries   Configuration  ownCloud Web configuration Environment variables  Global Server Health   Commandline flags  Global Server Health   Configuration file   Usage  Server Health   Metrics     Installation So far we are offering two different variants for the installation. You can choose between Docker or pre-built binaries which are stored on our download mirrors and GitHub releases. Maybe we will also provide system packages for the major distributions later if we see the need for it.\nDocker TBD\nBinaries TBD\nConfiguration We provide overall three different variants of configuration. The variant based on environment variables and commandline flags are split up into global values and command-specific values.\nownCloud Web configuration When loading the extension in the ownCloud Web, it is necessary to specify to which ownCloud 10 server the extension is supposed to connect to. This can be done via config object when registering the extension in config.json. For more details, you can take a look at the following example:\n\u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;onlyoffice\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;https://localhost:9200/onlyoffice.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;https://oc10.example.org\u0026#34; } } ] Environment variables If you prefer to configure the service with environment variables you can see the available variables below.\nGlobal  ONLYOFFICE_CONFIG_FILE Path to config file, empty default value ONLYOFFICE_LOG_LEVEL Set logging level, defaults to info ONLYOFFICE_LOG_COLOR Enable colored logging, defaults to true ONLYOFFICE_LOG_PRETTY Enable pretty logging, defaults to true  Server  ONLYOFFICE_TRACING_ENABLED Enable sending traces, defaults to false ONLYOFFICE_TRACING_TYPE Tracing backend type, defaults to jaeger ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent, empty default value ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector, empty default value ONLYOFFICE_TRACING_SERVICE Service name for tracing, defaults to onlyoffice ONLYOFFICE_DEBUG_ADDR Address to bind debug server, defaults to 0.0.0.0:9224 ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access, empty default value ONLYOFFICE_DEBUG_PPROF Enable pprof debugging, defaults to false ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging, defaults to false ONLYOFFICE_HTTP_ADDR Address to bind http server, defaults to 0.0.0.0:9220 ONLYOFFICE_HTTP_NAMESPACE The http namespace ONLYOFFICE_HTTP_ROOT Root path of http server, defaults to /  Health  ONLYOFFICE_DEBUG_ADDR Address to debug endpoint, defaults to 0.0.0.0:9224  Commandline flags If you prefer to configure the service with commandline flags you can see the available variables below.\nGlobal  \u0026ndash;config-file | $ONLYOFFICE_CONFIG_FILE Path to config file. \u0026ndash;log-level | $ONLYOFFICE_LOG_LEVEL Set logging level. Default: info. \u0026ndash;log-pretty | $ONLYOFFICE_LOG_PRETTY Enable pretty logging. Default: true. \u0026ndash;log-color | $ONLYOFFICE_LOG_COLOR Enable colored logging. Default: true.  Server  \u0026ndash;tracing-enabled | $ONLYOFFICE_TRACING_ENABLED Enable sending traces. \u0026ndash;tracing-type | $ONLYOFFICE_TRACING_TYPE Tracing backend type. Default: jaeger. \u0026ndash;tracing-endpoint | $ONLYOFFICE_TRACING_ENDPOINT Endpoint for the agent. \u0026ndash;tracing-collector | $ONLYOFFICE_TRACING_COLLECTOR Endpoint for the collector. \u0026ndash;tracing-service | $ONLYOFFICE_TRACING_SERVICE Service name for tracing. Default: onlyoffice. \u0026ndash;debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to bind debug server. Default: 0.0.0.0:9224. \u0026ndash;debug-token | $ONLYOFFICE_DEBUG_TOKEN Token to grant metrics access. \u0026ndash;debug-pprof | $ONLYOFFICE_DEBUG_PPROF Enable pprof debugging. \u0026ndash;debug-zpages | $ONLYOFFICE_DEBUG_ZPAGES Enable zpages debugging. \u0026ndash;http-addr | $ONLYOFFICE_HTTP_ADDR Address to bind http server. Default: 0.0.0.0:9220. \u0026ndash;http-namespace | $ONLYOFFICE_HTTP_NAMESPACE Set the base namespace for the http namespace. Default: com.owncloud.web. \u0026ndash;http-root | $ONLYOFFICE_HTTP_ROOT Root path of http server. Default: /. \u0026ndash;asset-path | $ONLYOFFICE_ASSET_PATH Path to custom assets.  Health  \u0026ndash;debug-addr | $ONLYOFFICE_DEBUG_ADDR Address to debug endpoint. Default: 0.0.0.0:9224.  Configuration file So far we support the file formats JSON and YAML, if you want to get a full example configuration just take a look at our repository, there you can always see the latest configuration format. These example configurations include all available options and the default values. The configuration file will be automatically loaded if it\u0026rsquo;s placed at /etc/ocis/onlyoffice.yml, ${HOME}/.ocis/onlyoffice.yml or $(pwd)/config/onlyoffice.yml.\nUsage The program provides a few sub-commands on execution. The available configuration methods have already been mentioned above. Generally you can always see a formatted help output if you execute the binary via ocis-onlyoffice --help.\nServer The server command is used to start the http and debug server on two addresses within a single process. The http server is serving the general webservice while the debug server is used for health check, readiness check and to server the metrics mentioned below. For further help please execute:\nocis-onlyoffice server --help Health The health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis-onlyoffice health --help Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which got to be configured through one of the flag --debug-token or the environment variable ONLYOFFICE_DEBUG_TOKEN mentioned above. By default the metrics endpoint is bound to http://0.0.0.0:9224/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "},{"id":39,"href":"/extensions/glauth/","title":"GLAuth","parent":"Extensions","content":"This service provides a glauth based LDAP proxy for oCIS which can be used by clients or other extensions. It allows applications relying on LDAP to access the accounts stored in the oCIS accounts service. It can be used to make firewalls or identity providers aware of all users, including guest accounts.\nWe are using it to make eos aware of all accounts so the native ACLs can be used to persist share information in the storage.\n"},{"id":40,"href":"/extensions/graph/","title":"Graph","parent":"Extensions","content":"This service provides a simple graph world API which can be used by clients or other extensions.\n"},{"id":41,"href":"/extensions/graph-explorer/","title":"Graph-Explorer","parent":"Extensions","content":"This service embeds Graph-Explorer to provide a UI for ownCloud Infinite Scale.\n"},{"id":42,"href":"/extensions/ocs/","title":"Ocs","parent":"Extensions","content":"This service provides the OCS API which is required by some ownCloud clients.\n"},{"id":43,"href":"/extensions/web/","title":"ownCloud Web","parent":"Extensions","content":"This service embeds ownCloud Web to provide a UI for ownCloud Infinite Scale.\n"},{"id":44,"href":"/extensions/settings/","title":"Settings","parent":"Extensions","content":"Abstract When using oCIS, the requirement to store settings arises. This extension provides functionality for other extensions to register new settings within oCIS. It is responsible for storing the respective settings values as well.\nFor ease of use, this extension provides an ocis-web extension which allows users to change their settings values. Please refer to the ocis-web extension docs for running ocis-web extensions.\n  document.addEventListener(\"DOMContentLoaded\", function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  graph TD subgraph ow[ocis-web] ows[ocis-web-settings] owc[ocis-web-core] end ows ---|\"listSettingsBundles(),\nsaveSettingsValue(value)\"| os[ocis-settings] owc ---|\"listSettingsValues()\"| sdk[oC SDK] sdk --- sdks{ocis-settings\navailable?} sdks ---|\"yes\"| os sdks ---|\"no\"| defaults[Use set of\ndefault values] oa[oCIS extensions\ne.g. ocis-accounts] ---|\"saveSettingsBundle(bundle)\"| os  The diagram shows how the settings service integrates into oCIS:\nSettings management:\n oCIS extensions can register settings bundles with the ocis-settings service. The settings frontend can be plugged into ocis-web, showing forms for changing settings values as a user. The forms are generated from the registered settings bundles.  Settings usage:\n Extensions can query ocis-settings for settings values of a user. The ownCloud SDK, used as a data abstraction layer for ocis-web, will query ocis-settings for settings values of a user, if it\u0026rsquo;s available. The SDK uses sensible defaults when ocis-settings is not part of the setup.  For compatibility with ownCloud 10, a migration of ownCloud 10 settings into the storage of ocis-settings will be available.\n"},{"id":45,"href":"/extensions/storage/","title":"Storage","parent":"Extensions","content":"This service provides an oCIS extension that wraps reva and adds an opinionated configuration to it.\nIt uses the port range 9140-9179 to preconfigure several services.\n   port service     9109 health?   9140 frontend   9141 frontend debug   9142 gateway   9143 gateway debug   9144 users   9145 users debug   9146 authbasic   9147 authbasic debug   9148 authbearer   9149 authbearer debug   9150 sharing   9151 sharing debug   9152 storage root   9153 storage root debug   9154 storage home   9155 storage home debug   9156 storage home data   9157 storage home data debug   9158 storage eos   9159 storage eos debug   9160 storage eos data   9161 storage eos data debug   9162 storage oc   9163 storage oc debug   9164 storage oc data   9165 storage oc data debug   9166-9177 reserved for s3, wnd, custom + data providers   9178 storage public link   9179 storage public link data    "},{"id":46,"href":"/extensions/store/","title":"Store","parent":"Extensions","content":"This service provides \u0026hellip;\n"},{"id":47,"href":"/extensions/thumbnails/","title":"Thumbnails","parent":"Extensions","content":"This service provides an ocis extensions which generates thumbnails for image files.\n"},{"id":48,"href":"/extensions/webdav/","title":"WebDaV","parent":"Extensions","content":"This service provides the WebDAV API which is required by some ownCloud clients.\n"},{"id":49,"href":"/ocis/deployment/ocis_keycloak/","title":"oCIS with Keycloak","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS and Keycloak running behind Traefik as reverse proxy Keycloak acting as the IDP for oCIS Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists 4 containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.\nKeykloak add two containers: Keycloak itself and a PostgreSQL as database. Keycloak will be configured as oCIS\u0026rsquo; IDP instead of the internal IDP Konnectd\nThe other container is oCIS itself running all extensions in one container. In this example oCIS uses oCIS storage driver\nServer Deployment Requirements  Linux server with docker and docker-compose installed Three domains set up and pointing to your server  ocis.* for serving oCIS keycloak.* for serving Keycloak traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik   Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_keycloak\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # ownCloud Web openid connect client id. Defaults to \u0026#34;ocis-web\u0026#34; OCIS_OIDC_CLIENT_ID= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= ### Keycloak ### # Domain of Keycloak, where you can find the management and authentication frontend. Defaults to \u0026#34;keycloak.owncloud.test\u0026#34; KEYCLOAK_DOMAIN= # Realm which to be used with oCIS. Defaults to \u0026#34;oCIS\u0026#34; KEYCLOAK_REALM= # Admin user login name. Defaults to \u0026#34;admin\u0026#34; KEYCLOAK_ADMIN_USER= # Admin user login password. Defaults to \u0026#34;admin\u0026#34; KEYCLOAK_ADMIN_PASSWORD= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default oCIS will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nIf you want to change the OIDC client id of th ownCloud Web frontend, you can do this by setting the name to OCIS_OIDC_CLIENT_ID=.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nSet your domain for the Keycloak administration panel and authentication endpoints to KEYCLOAK_DOMAIN= eg. KEYCLOAK_DOMAIN=keycloak.owncloud.test.\nChanging the used Keycloak realm can be done by setting KEYCLOAK_REALM=. This defaults to the oCIS realm KEYCLOAK_REALM=oCIS. The oCIS realm will be automatically imported on startup and includes our demo users.\nYou probably should secure your Keycloak admin account by setting KEYCLOAK_ADMIN_USER= and KEYCLOAK_ADMIN_PASSWORD= to values other than admin.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS, Keycloak and Traefik dashboard on your configured domains\n  Local setup For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test 127.0.0.1 keycloak.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://keycloak.owncloud.test in your browser and accept the invalid certificate warning.\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You now can login to oCIS with the demo users.\n"},{"id":50,"href":"/ocis/deployment/ocis_traefik/","title":"oCIS with Traefik","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     Overview  oCIS running behind Traefik as reverse proxy Traefik generating self signed certificates for local setup or obtaining valid SSL certificates for a server setup  Find this example on GitHub\nThe docker stack consists of two containers. One of them is Traefik, a proxy which is terminating ssl and forwards the requests to oCIS in the internal docker network.\nThe other one is oCIS itself running all extensions in one container. In this example oCIS uses its internal IDP Konnectd and the oCIS storage driver\nServer Deployment Requirements  Linux server with docker and docker-compose installed Two domains set up and pointing to your server  ocis.* for serving oCIS traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik   Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_traefik\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= # IDP LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;idp\u0026#34;. IDP_LDAP_BIND_PASSWORD= # Storage LDAP bind password. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;reva\u0026#34;. STORAGE_LDAP_BIND_PASSWORD= # JWT secret which is used for the storage provider. Must be changed in order to have a secure oCIS. Defaults to \u0026#34;Pive-Fumkiu4\u0026#34; OCIS_JWT_SECRET= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default ocis will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nYou also must override three default secrets in IDP_LDAP_BIND_PASSWORD, STORAGE_LDAP_BIND_PASSWORD and OCIS_JWT_SECRET in order to secure your oCIS instance. Choose some random strings eg. from the output of openssl rand -base64 32. For more information see secure an oCIS instance.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and Traefik dashboard on your configured domains\n  Local setup For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 traefik.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://ocis.owncloud.test in your browser and accept the invalid certificate warning. You now can login to oCIS with the default users, which also can be found here: Getting started\n"},{"id":51,"href":"/ocis/deployment/owncloud10_with_oc_web/","title":"ownCloud 10 with ownCloud Web","parent":"Deployment","content":"    Overview Server Deployment  Requirements Install oCIS and Traefik   Local setup     This deployment scenario shows how to use ownCloud Web as frontend for an existing ownCloud 10 production installation. It enables ownCloud 10 users to log in and work with their files using the new ownCloud Web. While the scenario includes an ownCloud 10 instance, it only exists to show the necessary configuration for your already existing ownCloud 10 installation.\nOverview  oCIS setup serving ownCloud Web oCIS acting as OIDC IDP on the ownCloud 10 user database ownCloud 10 setup connected to oCIS DNS is resolving one domain for ocis and one for oc10 Valid ssl certificates for the domains for ssl termination  Find this example on GitHub\nIn this setup it\u0026rsquo;s mandatory that the users in ownCloud 10 are assigned to at least one group.  In this setup relies on graph-api app to be installed in ownCloud 10. This app is included by default beginning with ownCloud 10.6. If you are on a lower version, please install it manually.  Server Deployment Requirements  Linux server with docker and docker-compose installed Three domains set up and pointing to your server  ocis.* for serving oCIS oc10.* for serving traefik.* for serving the Traefik dashboard    See also example server setup\nInstall oCIS and Traefik   Clone oCIS repository\ngit clone https://github.com/owncloud/ocis.git\n  Go to the deployment example\ncd ocis/deployment/examples/ocis_oc10_backend\n  Open the .env file in a text editor The file by default looks like this:\n# If you\u0026#39;re on a internet facing server please comment out following line. # It skips certificate validation for various parts of oCIS and is needed if you use self signed certificates. INSECURE=true ### Traefik settings ### # Serve Treafik dashboard. Defaults to \u0026#34;false\u0026#34;. TRAEFIK_DASHBOARD= # Domain of Traefik, where you can find the dashboard. Defaults to \u0026#34;traefik.owncloud.test\u0026#34; TRAEFIK_DOMAIN= # Basic authentication for the dashboard. Defaults to user \u0026#34;admin\u0026#34; and password \u0026#34;admin\u0026#34; TRAEFIK_BASIC_AUTH_USERS= # Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server TRAEFIK_ACME_MAIL= ### oCIS settings ### # oCIS version. Defaults to \u0026#34;latest\u0026#34; OCIS_DOCKER_TAG= # Domain of oCIS, where you can find the frontend. Defaults to \u0026#34;ocis.owncloud.test\u0026#34; OCIS_DOMAIN= ### oC10 ### # Domain of ownCloud 10, where you can find the frontend. Defaults to \u0026#34;oc10.owncloud.test\u0026#34; #OC10_DOMAIN= You are installing oCIS on a server and Traefik will obtain valid certificates for you so please remove INSECURE=true or set it to false.\nIf you want to use the Traefik dashboard, set TRAEFIK_DASHBOARD to true (default is false and therefore not active). If you activate it, you must set a domain for the Traefik dashboard in TRAEFIK_DOMAIN= eg. TRAEFIK_DOMAIN=traefik.owncloud.test.\nThe Traefik dashboard is secured by basic auth. Default credentials are the user admin with the password admin. To set your own credentials, generate a htpasswd (eg. by using an online tool or a cli tool).\nTraefik will issue certificates with LetsEncrypt and therefore you must set an email address in TRAEFIK_ACME_MAIL=.\nBy default ocis will be started in the latest version. If you want to start a specific version of oCIS set the version to OCIS_DOCKER_TAG=. Available versions can be found on Docker Hub.\nSet your domain for the oCIS frontend in OCIS_DOMAIN=, eg. OCIS_DOMAIN=ocis.owncloud.test.\nSet your domain for the ownCloud 10 frontend in OC10_DOMAIN= eg. OC10_DOMAIN=oc10.owncloud.test.\nNow you have configured everything and can save the file.\n  Start the docker stack\ndocker-compose up -d\n  You now can visit oCIS and Traefik dashboard on your configured domains\n  Local setup For a more simple local ocis setup see Getting started\nThis docker stack can also be run locally. One downside is that Traefik can not obtain valid SSL certificates and therefore will create self signed ones. This means that your browser will show scary warnings. Another downside is that you can not point DNS entries to your localhost. So you have to add static host entries to your computer.\nOn Linux and macOS you can add them to your /etc/hosts files like this:\n127.0.0.1 ocis.owncloud.test 127.0.0.1 oc10.owncloud.test 127.0.0.1 traefik.owncloud.test After that you\u0026rsquo;re ready to start the application stack:\ndocker-compose up -d\nOpen https://oc10.owncloud.test in your browser and accept the invalid certificate warning. You now can login with the ownCloud 10 default user \u0026ldquo;admin\u0026rdquo; and password \u0026ldquo;admin\u0026rdquo;. As you might have noticed, you did not see the login prompt of ownCloud 10. This was the login prompt of oCIS. When you go to application you can both in ownCloud Web and ownCloud 10 see a switch to switch vice versa.\n"},{"id":52,"href":"/clients/web/releasing/","title":"Releasing","parent":"ownCloud Web","content":"    Releasing ownCloud Web  Package Hierarchy  Releasing Web Frontend Next steps         Releasing ownCloud Web The ownCloud Web is shipped as an ocis Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.\nThis repository contains the assets and these must be released first before being bundled into ocis-web.\nPackage Hierarchy  ocis  ocis-web  ocis-pkg web      Releasing Web Frontend  Create a branch release-$version in https://github.com/owncloud/web. Create a folder in changelog for the release version and date mkdir $major.$minor.$patchVersion_YYYY-MM-DD. Move all changelog items from the changelog/unreleased/ folder to the $major.$minor.$patchVersion_YYYY-MM-DD folder. Update the version in appinfo/info.xml Commit your changes. After merging, wait for the CI to run on the merge commit. Go to the Releases section and click \u0026ldquo;Draft a new Release\u0026rdquo;. Use v$major.$minor.$patch as a tag (the v prefix is important) and publish it. The tag and the Release artifacts will be created automatically.  Next steps The next steps are usually to update the Web assets in the ocis-web repository. Therefore we have prepared a separate ocis-web release guide.\n"},{"id":53,"href":"/ocis/flow-docs/","title":"Flow documentation","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":54,"href":"/ocis/deployment/bridge/","title":"Bridge","parent":"Deployment","content":"    Current status How to do it  Install the owncloud 10 graphapi app Enable the graphapi app Start ocis-glauth  Grab it! Run it! Check it is up and running   Start ocis-web  Get it! Run it!   Start ocis-idp  Get it! Set environment variables   Configure clients  Run it! Check it is up and running   Patch owncloud Install the owncloud 10 openidconnect app   Next steps     We are planning to build a bridge from ownCloud 10 to ocis. The idea is to have a reverse proxy infront of ownCloud 10 that will forward requests to ownCloud 10 or ocis-reva, depending on the migration status of the logged in user.\nThis document is a work in progress of the current setup.\nCurrent status Using ocis and the ownCloud 10 openidconnect and graphapi plugins it is possible today to introduce openid connect based authentication to existing instances. That is a prerequisite for migrating to ocis.\nHow to do it Install the owncloud 10 graphapi app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/graphapi.git $ cd graphapi $ composer install Enable the graphapi app occ a:e graphapi No configuration necessary. You can test with curl:\n$ curl https://cloud.example.com/index.php/apps/graphapi/v1.0/users -u admin | jq Enter host password for user \u0026#39;admin\u0026#39;: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 694 100 694 0 0 4283 0 --:--:-- --:--:-- --:--:-- 4283 { \u0026#34;value\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;mail\u0026#34;: null }, { \u0026#34;id\u0026#34;: \u0026#34;demo\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Demo\u0026#34;, \u0026#34;mail\u0026#34;: null }, ... ], \u0026#34;@odata.nextLink\u0026#34;: \u0026#34;https://oc.butonic.de/apps/graphapi/v1.0/users?$top=10\u0026amp;$skip=10\u0026#34; }  Note: The MS graph api actually asks for Bearer auth, but in order to check users passwords during an LDAP bind we are exploiting ownClouds authentication implementation that will grant access when Basic auth is used. An LDAP Bind you may ask? Read on!\n Start ocis-glauth We are going to use the above ownCloud 10 and graphapi app to turn it into the datastore for an LDAP proxy.\nGrab it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-glauth.git $ cd ocis-glauth $ make This should give you a bin/ocis-glauth binary. Try listing the help with bin/ocis-glauth --help.\nRun it! You need to point ocis-glauth to your owncloud domain:\n$ bin/ocis-glauth --log-level debug server --backend-datastore owncloud --backend-server https://cloud.example.com --backend-basedn dc=example,dc=com --log-level debug is only used to generate more verbose output --backend-datastore owncloud switches to tho owncloud datastore --backend-server https://cloud.example.com is the url to an ownCloud instance with an enabled graphapi app --backend-basedn dc=example,dc=com is used to construct the LDAP dn. The user admin will become cn=admin,dc=example,dc=com.\nCheck it is up and running You should now be able to list accounts from your ownCloud 10 oc_accounts table using:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixaccount)\u0026#39; Groups should work as well:\n$ ldapsearch -x -H ldap://localhost:9125 -b dc=example,dc=com -D \u0026#34;cn=admin,dc=example,dc=com\u0026#34; -W \u0026#39;(objectclass=posixgroup)\u0026#39;  Note: This is currently a readonly implementation and minimal to the usecase of authenticating users with idp.\n Start ocis-web Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis.git $ cd web $ make This should give you a bin/web binary. Try listing the help with bin/web --help.\nRun it! Point ocis-web to your owncloud domain and tell it where to find the openid connect issuing authority:\n$ bin/web server --web-config-server https://cloud.example.com --oidc-authority https://192.168.1.100:9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration --oidc-client-id ocis ocis-web needs to know\n --web-config-server https://cloud.example.com is ownCloud url with webdav and ocs endpoints (oc10 or ocis) --oidc-authority https://192.168.1.100:9130 the openid connect issuing authority, in our case oidc-idp, running on port 9130 --oidc-metadata-url https://192.168.1.100:9130/.well-known/openid-configuration the openid connect configuration endpoint, typically the issuer host with .well-known/openid-configuration, but there are cases when another endpoint is used, eg. ping identity provides multiple endpoints to separate domains --oidc-client-id ocis the client id we will register later with ocis-idp in the identifier-registration.yaml  Start ocis-idp Get it! In an ocis folder\n$ git clone git@github.com:owncloud/ocis-idp.git $ cd ocis-idp $ make This should give you a bin/ocis-idp binary. Try listing the help with bin/ocis-idp --help.\nSet environment variables Konnectd needs environment variables to configure the LDAP server:\nexport LDAP_URI=ldap://192.168.1.100:9125 export LDAP_BINDDN=\u0026#34;cn=admin,dc=example,dc=com\u0026#34; export LDAP_BINDPW=\u0026#34;its-a-secret\u0026#34; export LDAP_BASEDN=\u0026#34;dc=example,dc=com\u0026#34; export LDAP_SCOPE=sub export LDAP_LOGIN_ATTRIBUTE=uid export LDAP_EMAIL_ATTRIBUTE=mail export LDAP_NAME_ATTRIBUTE=givenName export LDAP_UUID_ATTRIBUTE=uid export LDAP_UUID_ATTRIBUTE_TYPE=text export LDAP_FILTER=\u0026#34;(objectClass=posixaccount)\u0026#34; Don\u0026rsquo;t forget to use an existing user and the correct password.\nConfigure clients Now we need to configure a client we can later use to configure the ownCloud 10 openidconnect app. In the assets/identifier-registration.yaml have:\n---# OpenID Connect client registry.clients:- id:ocisname:ownCloudInfiniteScaleinsecure:yesapplication_type:webredirect_uris:- https://cloud.example.com/apps/openidconnect/redirect- http://localhost:9100/oidc-callback.html- http://localhost:9100- http://localhost:9100/You will need the insecure: yes if you are using self signed certificates.\nReplace cloud.example.com in the redirect URI with your ownCloud 10 host and port. Replace localhost:9100 in the redirect URIs with your ocis-web host and port.\nRun it! You can now bring up ocis-idp with:\n$ bin/ocis-idp server --iss https://192.168.1.100:9130 --identifier-registration-conf assets/identifier-registration.yaml --signing-kid gen1-2020-02-27 ocis-idp needs to know\n --iss https://192.168.1.100:9130 the issuer, which must be a reachable https endpoint. For testing an ip works. HTTPS is NOT optional. This url is exposed in the https://192.168.1.100:9130/.well-known/openid-configuration endpoint and clients need to be able to connect to it --identifier-registration-conf assets/identifier-registration.yaml the identifier-registration.yaml you created --signing-kid gen1-2020-02-27 a signature key id, otherwise the jwks key has no name, which might cause problems with clients. a random key is ok, but it should change when the actual signing key changes.  Check it is up and running  Try getting the configuration:  $ curl https://192.168.1.100:9130/.well-known/openid-configuration Check if the login works at https://192.168.1.100:9130/signin/v1/identifier   Note: If you later get a Unable to find a key for (algorithm, kid):PS256, ) Error make sure you did set a --signing-kid when starting ocis-idp by checking it is present in https://192.168.1.100:9130/konnect/v1/jwks.json\n Patch owncloud While the UserSession in ownCloud 10 is currently used to test all available IAuthModule implementations, it immediately logs out the user when an exception occurs. However, existing owncloud 10 instances use the oauth2 app to create Bearer tokens for mobile and desktop clients.\nTo give the openidconnect app a chance to verify the tokens we need to change the code a bit. See https://github.com/owncloud/core/pull/37043 for a possible solution.\n Note: The PR is hot \u0026hellip; as in younger than this list of steps. And it messes with authentication. Use with caution.\n Install the owncloud 10 openidconnect app In an owncloud 10 apps folder\n$ git clone git@github.com:owncloud/openidconnect.git $ cd openidconnect $ composer install After enabling the app configure it in config/oidc.config.php\n$CONFIG = [ \u0026#39;openid-connect\u0026#39; =\u0026gt; [ \u0026#39;provider-url\u0026#39; =\u0026gt; \u0026#39;https://192.168.1.100:9130\u0026#39;, \u0026#39;client-id\u0026#39; =\u0026gt; \u0026#39;ocis\u0026#39;, \u0026#39;loginButtonName\u0026#39; =\u0026gt; \u0026#39;OpenId Connect @ Konnectd\u0026#39;, ], \u0026#39;debug\u0026#39; =\u0026gt; true, // if using self signed certificates // allow the different domains access to the ocs and webdav endpoints: \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [ \u0026#39;https://cloud.example.com\u0026#39;, \u0026#39;http://localhost:9100\u0026#39;, ], ]; In the above configuration replace\n provider-url with the URL to your ocis-idp issuer https://cloud.example.com with the URL to your ownCloud 10 instance http://localhost:9100 with the URL to your ownCloud Web instance   Note: By default the openidconnect app will use the email of the user to match the user from the oidc userinfo endpoint with the ownCloud account. So make sure your users have a unique primary email.\n Next steps Aside from the above todos these are the next steps\n tie it all together behind ocis-proxy create an ocis bridge command that runs all the ocis services in one step with a properly preconfigured ocis-idp identifier-registration.yaml file for ownCloud Web and the owncloud 10 openidconnect app, as well as a randomized --signing-kid.  "},{"id":55,"href":"/ocis/development/build/","title":"Build","parent":"Development","content":"    Build requirements Get the sources Build the oCIS binary Build a local oCIS docker image     Build requirements see Development - Getting Started\nGet the sources git clone https://github.com/owncloud/ocis.git cd ocis Build the oCIS binary You only need to run following command if you have changed protobuf definitions or the frontend part in one of the extensions. Run the command in the root directory of the repository. Otherwise you can skip this step and proceed to build the oCIS binary. This will usually modify multiple embed.go files because we embed the frontend build output in these embed.go files and a timestamp will be updated and also minor differences are expected between different Node.js versions.\nmake generate The next step is to build the actual oCIS binary. Therefore you need to navigate to the subdirectory ocis and start the build process.\ncd ocis make build After the build process finished, you can find the binary within the bin/ folder (in ocis/bin relative to the oCIS repository root folder).\nTry to run it: ./bin/ocis h\nBuild a local oCIS docker image If you are developing and want to run your local changes in a docker or docker-compose setup, you have to build an image locally.\nTherefore run following commands in the root of the oCIS repository:\ndocker build -t owncloud/ocis:dev . Then you can test as usual via\ndocker run --rm -ti owncloud/ocis:dev "},{"id":56,"href":"/ocis/storage-backends/eos/","title":"EOS","parent":"Storage backends","content":"    Docker dev environment for eos storage  1. Start eos \u0026amp; ocis containers 2. LDAP support 3. Home storage 4. Users storage 5. Metadata storage 6. Accounts service   Verification Further exploration Cleaning up Troubleshooting  Docker-compose exits right away Where are the logs ? How do I update a service in the ocis container? Creation and upload of files does not work Uploading big files appears to hang Running out of space quickly       oCIS can be configured to run on top of eos. While the eos documentation does cover a lot of topics, it leaves out some details that you may have to either pull from various docker containers, the forums or even the source itself.\nThis document is a work in progress of the current setup.\nDocker dev environment for eos storage We begin with the docker-compose.yml found in https://github.com/owncloud/ocis/tree/master/ocis/ and switch it to eos-storage.\n1. Start eos \u0026amp; ocis containers Start the eos cluster and ocis via the compose stack.\ndocker-compose up -d The first time the ocis container starts up, it will compile ocis from scratch which can take a while. To follow progress, run docker-compose logs -f --tail=10 ocis  2. LDAP support Configure the OS to resolve users and groups using ldap\ndocker-compose exec -d ocis /start-ldap Check that the OS in the ocis container can now resolve einstein or the other demo users\n$ docker-compose exec ocis id einstein uid=20000(einstein) gid=30000(users) groups=30000(users),30001(sailing-lovers),30002(violin-haters),30007(physics-lovers) If the user is not found at first you might need to wait a few more minutes in case the ocis container is still compiling.  We also need to restart the storage-userprovider service, so it picks up the changed environment. Without a restart it is not able to resolve users from LDAP.\ndocker-compose exec ocis ./bin/ocis kill storage-userprovider docker-compose exec ocis ./bin/ocis run storage-userprovider 3. Home storage Kill the home storage. By default it uses the ocis storage driver. We need to switch it to the eoshome driver:\ndocker-compose exec ocis ./bin/ocis kill storage-home docker-compose exec -e STORAGE_HOME_DRIVER=eoshome ocis ./bin/ocis run storage-home 4. Users storage Kill the users storage. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill storage-users docker-compose exec -e STORAGE_USERS_DRIVER=eos ocis ./bin/ocis run storage-users 5. Metadata storage First we need to create the metadata root in eos and set an owner:\ndocker-compose exec ocis eos mkdir -p /eos/dockertest/ocis/metadata docker-compose exec ocis eos chown 2:2 /eos/dockertest/ocis/metadata The uid and gid 2 are referencing the user daemon inside the ocis container. That user is also configured when restarting the accounts service later. For production systems you should create a dedicated user for the metadata storage.  Kill the metadata storage. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill storage-metadata docker-compose exec -e STORAGE_METADATA_DRIVER=eos -e STORAGE_METADATA_ROOT=/eos/dockertest/ocis/metadata ocis ./bin/ocis run storage-metadata 6. Accounts service Kill the accounts service. By default it uses the ocis storage driver. We need to switch it to the eos driver:\ndocker-compose exec ocis ./bin/ocis kill accounts docker-compose exec -e ACCOUNTS_SERVICE_USER_USERNAME=daemon -e ACCOUNTS_SERVICE_USER_UID=2 -e ACCOUNTS_SERVICE_USER_GID=2 ocis ./bin/ocis run accounts Verification Login with einstein / relativity, upload a file to einsteins home and verify the file is there using\ndocker-compose exec ocis eos ls -l /eos/dockertest/reva/users/4/4c510ada-c86b-4815-8820-42cdf82c3d51/ -rw-r--r-- 1 einstein users 10 Jul 1 15:24 newfile.txt If the problem persists, please check the troubleshooting section about uploads.\nFurther exploration EOS has a built in shell that you can enter using\n$ docker-compose exec mgm-master eos # --------------------------------------------------------------------------- # EOS Copyright (C) 2011-2019 CERN/Switzerland # This program comes with ABSOLUTELY NO WARRANTY; for details type `license\u0026#39;. # This is free software, and you are welcome to redistribute it # under certain conditions; type `license\u0026#39; for details. # --------------------------------------------------------------------------- EOS_INSTANCE=eostest EOS_SERVER_VERSION=4.6.5 EOS_SERVER_RELEASE=1 EOS_CLIENT_VERSION=4.6.5 EOS_CLIENT_RELEASE=1 EOS Console [root://localhost] |/\u0026gt; help access Access Interface accounting Accounting Interface acl Acl Interface archive Archive Interface attr Attribute Interface backup Backup Interface clear Clear the terminal cd Change directory chmod Mode Interface chown Chown Interface config Configuration System console Run Error Console cp Cp command debug Set debug level exit Exit from EOS console file File Handling fileinfo File Information find Find files/directories newfind Find files/directories (new implementation) fs File System configuration fsck File System Consistency Checking fuse Fuse Mounting fusex Fuse(x) Administration geosched Geoscheduler Interface group Group configuration health Health information about system help Display this text info Retrieve file or directory information inspector Interact with File Inspector io IO Interface json Toggle JSON output flag for stdout license Display Software License ls List a directory ln Create a symbolic link map Path mapping interface member Check Egroup membership mkdir Create a directory motd Message of the day mv Rename file or directory node Node configuration ns Namespace Interface pwd Print working directory quit Exit from EOS console quota Quota System configuration reconnect Forces a re-authentication of the shell recycle Recycle Bin Functionality rmdir Remove a directory rm Remove a file role Set the client role route Routing interface rtlog Get realtime log output from mgm \u0026amp; fst servers silent Toggle silent flag for stdout space Space configuration stagerrm Remove disk replicas of a file if it has tape replicas stat Run \u0026#39;stat\u0026#39; on a file or directory squash Run \u0026#39;squashfs\u0026#39; utility function test Run performance test timing Toggle timing flag for execution time measurement touch Touch a file token Token interface tracker Interact with File Tracker transfer Transfer Interface version Verbose client/server version vid Virtual ID System Configuration whoami Determine how we are mapped on server side who Statistics about connected users ? Synonym for \u0026#39;help\u0026#39; .q Exit from EOS console EOS Console [root://localhost] |/\u0026gt; But this is a different adventure. See the links at the top of this page for other sources of information on eos.\nCleaning up To clean up and start completely from scratch, run docker-compose down -v. Then delete the local \u0026ldquo;bin\u0026rdquo; folder as root which contains the ocis binaries compiled by the \u0026ldquo;ocis\u0026rdquo; docker.\nTroubleshooting Docker-compose exits right away When running docker-compose up -d ocis exits right away.\nYou can check the error code using docker-compose ps and investigate further by running only ocis again using docker-compose up ocis (without -d so you can see what is going on in the foreground). One reason might be that the binary was already built but does not match the container env. Try running make clean before running docker-compose up ocis so it gets built inside the container.\nWhere are the logs ? The ocis logs can be accessed using docker-compose logs ocis. Add -f for following.\nHow do I update a service in the ocis container?  docker-compose exec ocis make clean build to update the binary docker-compose exec ocis ./bin/ocis kill \u0026lt;service\u0026gt; to kill the service docker-compose exec ocis ./bin/ocis run \u0026lt;service\u0026gt; to start the service. Do not forget to set any env vars, eg. docker-compose exec -e STORAGE_HOME_DRIVER=eoshome -e STORAGE_DRIVER_EOS_LAYOUT=\u0026quot;{{substr 0 1 .Id.OpaqueId}}/{{.Id.OpaqueId}}\u0026quot; ocis ./bin/ocis run storage-home  Creation and upload of files does not work If the upload did not work, please check the status of the eos space using the command docker-compose exec mgm-master eos fs ls. In case the default space appears as offline, run docker-compose exec mgm-master eos space set default on.\nUploading big files appears to hang Please note that the uploads first go into the \u0026ldquo;ocis\u0026rdquo; docker and land in its \u0026ldquo;/tmp\u0026rdquo; folder, then gets copied over to the EOS docker using xrdcopy. This is why uploading first transfers all bytes and then seem to hang for a while during the final copy.\nRunning out of space quickly The EOS dockers are configured with replication, so every file uploaded there will be replicated 4 times, so make sure there is enough physical space on disk when testing.\nAlso please note that older failed uploads might still be present in the \u0026ldquo;/tmp\u0026rdquo; directory of the \u0026ldquo;ocis\u0026rdquo; container.\n"},{"id":57,"href":"/extensions/onlyoffice/building/","title":"Building","parent":"OnlyOffice","content":"    Backend     As this project is built with Go, so you need to install that first. The installation of Go is out of the scope of this document, please follow the official documentation for Go, to build this project you have to install Go \u0026gt;= v1.12. After the installation of the required tools you need to get the sources:\ngit clone https://github.com/owncloud/ocis/onlyoffice.git cd ocis-onlyoffice All required tool besides Go itself and make are bundled or getting automatically installed within the GOPATH. All commands to build this project are part of our Makefile.\nBackend make generate make build Finally you should have the binary within the bin/ folder now, give it a try with ./bin/onlyoffice -h to see all available options.\n"},{"id":58,"href":"/extensions/storage/users/","title":"Users","parent":"Storage","content":"Demo driver This is a simple user driver for testing. It contains three users:\neinstein:relativity marie:radioactivity richard:superfluidity In order to use the demo driver you need to export the relevant environment variable:\nexport STORAGE_USERS_DRIVER=demo JSON driver In order to switch from the ldap driver to JSON based users you need to export the relevant environment variables:\nexport STORAGE_USERS_DRIVER=json export STORAGE_USERS_JSON=/path/to/users.json For the format of the users.json have a look at the reva examples\nLDAP driver This is the default user driver.\nIf the below defaults don\u0026rsquo;t match your environment change them accordingly:\nexport STORAGE_LDAP_HOSTNAME=localhost export STORAGE_LDAP_PORT=9126 export STORAGE_LDAP_BASE_DN=\u0026#39;dc=example,dc=org\u0026#39; export STORAGE_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export STORAGE_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export STORAGE_LDAP_BIND_DN=\u0026#39;cn=reva,ou=sysusers,dc=example,dc=org\u0026#39; export STORAGE_LDAP_BIND_PASSWORD=reva export STORAGE_LDAP_SCHEMA_UID=uid export STORAGE_LDAP_SCHEMA_MAIL=mail export STORAGE_LDAP_SCHEMA_DISPLAYNAME=sn export STORAGE_LDAP_SCHEMA_CN=cn Then restart the bin/storage users and bin/storage auth-basic services for the changes to take effect.\n"},{"id":59,"href":"/extensions/storage/storages/","title":"Storages","parent":"Storage","content":"Storage commands storage has multiple storage provider commands to preconfigure different default configurations for the reva storage provider service. While you could rerun storage storage-oc multiple times with different flags to get multiple instances we are giving the different commands the necessary default configuration to allow the ocis binary to simply start them and not deal with configuration.\nStorage providers To manage the file tree oCIS uses storage providers that are accessing the underlying storage using a storage driver. The driver can be used to change the implementation of a storage aspect to better reflect the actual underlying storage capabilities. As an example a move operation on a POSIX filesystem (theoretically) is an atomic operation. When trying to implement a file tree on top of S3 there is no native move operation that can be used. A naive implementation might fall back on a COPY and DELETE. Some S3 implementations provide a COPY operation that uses an existing key as the source, so the file at least does not need to be reuploaded. In the worst case scenario, which is renaming a folder with hundreds of thousands of objects, a reupload for every file has to be made. Instead of hiding this complexity a better choice might be to disable renaming of files or at least folders on S3. There are however implementations of filesystems on top of S3 that store the tree metadata in dedicated objects or use a completely different persistence mechanism like a distributed key value store to implement the file tree aspect of a storage.\nWhile the storage provider is responsible for managing the tree, file up- and downloads are delegated to a dedicated data provider. See below.  Storage aspects A lot of different storage technologies exist, ranging from general purpose file systems with POSIX semantics to software defined storage with multiple APIs. Choosing any of them is making a tradeoff decision. Or, if a storage technology is already in place it automatically predetermines the capabilities that can be made available. Not all storage systems are created equal.\nUnfortunately, no POSIX filesystem natively supports all storage aspects that ownCloud 10 requires:\nA hierarchical file tree An important aspect of a filesystem is organizing files and directories in a file hierarchy, or tree. It allows you to create, move and delete nodes. Beside the name a node also has well known metadata like size and mtime that are persisted in the tree as well.\nFolders are not directories There is a difference between folder and directory: a directory is a file system concept. A folder is a metaphor for the concept of a physical file folder. There are also virtual folders or smart folders like the recent files folder which are no file system directories. So, every directory and every virtual folder is a folder, but not every folder is a directory. See the folder metaphor in wikipedia. Also see the activity history below.  Id based lookup While traditionally nodes in the tree are reached by traversing the path the tree persistence should be prepared to look up a node by an id. Think of an inode in a POSIX filesystem. If this operation needs to be cached for performance reasons keep in mind that cache invalidation is hard and crawling all files to update the inode to path mapping takes O(n), not O(1).\nETag propagation For the state based sync a client can discover changes by recursively descending the tree and comparing the ETag for every node. If the storage technology supports propagating ETag changes up the tree, only the root node of a tree needs to be checked to determine if a discovery needs to be started and which nodes need to be traversed. This allows using the storage technology itself to persist all metadata that is necessary for sync, without additional services or caches.\nSubtree size accounting The tree can keep track of how many bytes are stored in a folder. Similar to ETag propagation a change in file size is propagated up the hierarchy.\nETag and Size propagation When propagating the ETag (mtime) and size changes up the tree the question is where to stop. If all changes need to be propagated to the root of a storage then the root or busy folders will become a hotspot. There are two things to keep in mind: 1. propagation only happens up to the root of a single space (a user private drive or a single group drive), 2. no cross storage propagation. The latter was used in oc10 to let clients detect when a file in a received shared folder changed. This functionality is moving to the storage registry which caches the ETag for every root so clients can discover if and which storage changed.  Rename Depending on the underlying storage technology some operations may either be slow, up to a point where it makes more sense to disable them entirely. One example is a folder rename: on S3 a simple folder rename translates to a copy and delete operation for every child of the renamed folder. There is an exception though: this restriction only applies if the S3 storage is treated like a filesystem, where the keys are the path and the value is the file content. There are smarter ways to implement file systems on top of S3, but again: there is always a tradeoff.\nS3 has no rename Technically, S3 has no rename operation at all. By design, the location of the value is determined by the key, so it always has to do a copy and delete. Another example is the redis RENAME operation: while being specified as O(1) it executes an implicit DEL operation, so if the deleted key contains a very big value it may cause high latency\u0026hellip;  Arbitrary metadata persistence In addition to well known metadata like name size and mtime, users might be able to add arbitrary metadata like tags, comments or dublin core. In POSIX filesystems this maps to extended attributes.\nGrant persistence The CS3 API uses grants to describe access permissions. Storage systems have a wide range of permissions granularity and not all grants may be supported by every storage driver. POSIX ACLs for example have no expiry. If the storage system does not support certain grant properties, e.g. expiry, then the storage driver may choose to implement them in a different way. Expiries could be persisted in a different way and checked periodically to remove the grants. Again: every decision is a tradeoff.\nTrash persistence After deleting a node the storage allows listing the deleted nodes and has an undo mechanism for them.\nVersions persistence A user can restore a previous version of a file.\nSnapshots are not versions Modern POSIX filesystems support snapshotting of volumes. This is different from keeping track of versions to a file or folder, but might be another implementation strategy for a storage driver to allow users to restore content.  Activity History The storage keeps an activity history, tracking the different actions that have been performed. This does not only include file changes but also metadata changes like renames and permission changes.\nStorage drivers Reva currently has four storage driver implementations that can be used for storage providers an well as data providers.\nLocal Storage Driver The minimal storage driver for a POSIX based filesystem. It literally supports none of the storage aspect other than basic file tree management. Sharing can - to a degree - be implemented using POSIX ACLs.\n tree provided by a POSIX filesystem  inefficient path by id lookup, currently uses the file path as id, so ids are not stable  can store a uuid in extended attributes and use a cache to look them up, similar to the ownCloud driver   no native ETag propagation, five options are available:  built in propagation (changes bypassing ocis are not picked up until a rescan) built in inotify (requires 48 bytes of RAM per file, needs to keep track of every file and folder) external inotify (same RAM requirement, but could be triggered by external tools, e.g. a workflow engine) kernel audit log (use the linux kernel audit to capture file events on the storage and offload them to a queue) fuse filesystem overlay   no subtree accounting, same options as for ETag propagation efficient rename arbitrary metadata using extended attributes   grant persistence  using POSIX ACLs  requires an LDAP server to make guest accounts available in the OS  oCIS has glauth which contains all users an existing LDAP could be used if guests ar provisioned in another way     using extended attributes to implement expiry or sharing that does not require OS level integration fuse filesystem overlay   no native trash  could use the The FreeDesktop.org Trash specification fuse filesystem overlay   no native versions, multiple options possible  git for folders rcs for single files rsnapshot for hourly / daily / weekly / monthly backups \u0026hellip; but this is not versioning as known from oc10 design new freedesktop spec, basically what is done in oc10 without the limitations or borrow ideas from the freedesktop trash spec fuse filesystem overlay    To provide the other storage aspects we plan to implement a FUSE overlay filesystem which will add the different aspects on top of local filesystems like ext4, btrfs or xfs. It should work on NFSv45 as well, although NFSv4 supports RichACLs and we will explore how to leverage them to implement sharing at a future date. The idea is to use the storages native capabilities to deliver the best user experience. But again: that means making the right tradeoffs.\nOwnCloud Storage Driver This is the current default storage driver. While it implements the file tree (using redis, including id based lookup), ETag propagation, trash, versions and sharing (including expiry) using the data directory layout of ownCloud 10 it has known limitations that cannot be fixed without changing the actual layout on disk.\nTo setup it up properly in a distributed fashion, the storage-home and the storage-oc need to share the same underlying FS. Their \u0026ldquo;data\u0026rdquo; counterparts also need access to the same shared FS. For a simple docker-compose setup, you can create a volume which will be used by the \u0026ldquo;storage-storage-home\u0026rdquo;, \u0026ldquo;storage-storage-home-data\u0026rdquo;, \u0026ldquo;storage-storage-oc\u0026rdquo; and \u0026ldquo;storage-storage-oc-data\u0026rdquo; containers. Using the owncloud/ocis docker image, the volume would need to be hooked in the /var/tmp/ocis folder inside the containers.\n tree provided by a POSIX filesystem  file layout is mapped to the old ownCloud 10 layout  the root of tree for a user on disk is prefixed with /path/to/data/\u0026lt;username\u0026gt;/files/   efficient path by id lookup  all files and folders get assigned a uuid in the extended attributes when starting the storage provider it will walk all files to populate a redis kv store for uuid to path lookup slow to boot trees with lots of nodes   build in ETag propagation  ETags are calculated based on mtime mtime is propagated by the storage driver changes bypassing ocis are not picked up until a restart of the storage provider   no subtree accounting, same options as for local storage efficient rename  TODO update the kv store for path lookup, this is an O(n) operation   arbitrary metadata using extended attributes   grant persistence  using custom ACLs that are stored as extended attributes  a grant corresponds to one extended attribute of 40-100 bytes, effectively limiting the number of shares to ~100-40 extended attributes have varying limitations, based on the underlying filesystem  the linux kernel imposes a limit of 255bytes per name and 64KiB per value ext2/3/4: total bytes for all attributes of a file is limited to 4KiB (a filesystem block) xfs: limit of 64KiB per value btrfs: total bytes used for the name, value, and implementation overhead bytes 16KiB (the default filesystem nodesize value)     does not require OS level integration   built in trash  trashed files are moved to /path/to/data/\u0026lt;username\u0026gt;/files_trashbin/ trashed files are appended a timestamp .d\u0026lt;unixtime\u0026gt;, which breaks trashing of files that reach the filesystems specific name limit   built in versions  file versions are stored in /path/to/data/\u0026lt;username\u0026gt;/files_versions/ file versions are appended a timestamp .d\u0026lt;unixtime\u0026gt;, which breaks versioning of files that reach the filesystems specific name limit    EOS Storage Driver The CERN eos storage has evolved with ownCloud and natively supports id based lookup, ETag propagation, subtree size accounting, sharing, trash and versions. To use it you need to change the default configuration of the storage storage-home command (or have a look at the Makefile ̀ eos-start` target):\nexport STORAGE_HOME_DRIVER=eos export STORAGE_DRIVER_EOS_NAMESPACE=/eos export STORAGE_DRIVER_EOS_MASTER_URL=\u0026#34;root://eos-mgm1.eoscluster.cern.ch:1094\u0026#34; export STORAGE_DRIVER_EOS_ENABLE_HOME=true export STORAGE_DRIVER_EOS_LAYOUT=\u0026#34;dockertest/{{.Username}}\u0026#34; Running it locally also requires the eos and xrootd binaries. Running it using make eos-start will use CentOS based containers that already have the necessary packages installed.\nPull requests to add explicit storage storage-(s3|custom|...) commands with working defaults are welcome.  S3 Storage Driver A naive driver that treats the keys in an S3 capable storage as / delimited path names. While it does not support MOVE or ETag propagation it can be used to read and write files. Better integration with native capabilities like versioning is possible but depends on the Use Case. Several storage solutions that provide an S3 interface also support some form of notifications that can be used to implement ETag propagation.\nData Providers Clients using the CS3 API use an InitiateFileDownload and ]InitiateUpload](https://cs3org.github.io/cs3apis/#cs3.storage.provider.v1beta1.InitiateFileUploadRequest) request at the storage gateway to obtain a URL endpoint that can be used to either GET the file content or upload content using the resumable tus.io protocol.\nThe data provider uses the same storage driver as the storage provider but can be scaled independently.\nThe dataprovider allows uploading the file to a quarantine area where further data analysis may happen before making the file accessible again. One use case for this is anti virus scanning for files coming from untrusted sources.\nFuture work FUSE overlay filesystem We are planning to further separate the concerns and use a local storage provider with a FUSE filesystem overlaying the actual POSIX storage that can be used to capture deletes and writes that might happen outside of ocis/reva.\nIt would allow us to extend the local storage driver with missing storage aspects while keeping a tree like filesystem that end users are used to see when sshing into the machine.\nUpload to Quarantine area Antivirus scanning of random files uploaded from untrusted sources and executing metadata extraction or thumbnail generation should happen in a sandboxed system to prevent malicious users from gaining any information about the system. By spawning a new container with access to only the uploaded data we can further limit the attack surface.\n"},{"id":60,"href":"/ocis/development/testing/","title":"Testing","parent":"Development","content":"    Testing with test suite in docker  Run full test suite Run single feature test oCIS image to be tested (or: skip build and take existing image) Test log output Cleanup   Testing with test suite natively installed  Getting the tests Run ocis Run the acceptance tests use existing tests for BDD       For running tests in the test suite you have two options. You may go the easy way and just run the test suite in docker. But for some tasks you could also need to install the test suite natively, which requires a little bit more setup since PHP and some dependencies need to be installed.\nBoth ways to run tests with the test suites are described here.\nTesting with test suite in docker Let\u0026rsquo;s see what is available. Invoke the following command from within the root of the oCIS repository.\nmake -C tests/acceptance/docker help Basically we have two sources for feature tests and test suites:\n oCIS feature test and test suites ownCloud feature tests and test suites  At the moment both can be applied to oCIS since the api of oCIS is designed to be compatible to ownCloud.\nSince we have to offer an migration path to existing users of ownCloud, you can use your existing ownCloud as storage backend for oCIS. As another storage backend we offer oCIS native storage, also called \u0026ldquo;oCIS\u0026rdquo;. This stores files directly on disk. Which storage backend is used is also reflected in the tests, there are always different tests for oCIS storage and ownCloud storage.\nYou can invoke two types of test suite runs:\n run a full test suite, which consists of multiple feature tests run a single feature test  Run full test suite The names of the full test suite make targets have the same naming as in the CI pipeline.\nFor example make -C tests/acceptance/docker localApiTests-apiBugDemonstration-ocis runs the same tests as the localApiTests-apiBugDemonstration-ocis CI pipeline, which runs the oCIS test suite \u0026ldquo;apiBugDemonstration\u0026rdquo; against an oCIS with oCIS storage.\nFor example make -C tests/acceptance/docker Core-API-Tests-owncloud-storage-3runs the same tests as the Core-API-Tests-owncloud-storage-3 CI pipeline, which runs the third (out of ten) ownCloud test suite against an oCIS with owncloud storage.\nRun single feature test The single feature tests can also be run against the different storage backends. Therefore multiple make targets with the schema test--feature-exists. For selecting a single feature test you have to add an additional BEHAT_FEATURE=... parameter when invoking the make command:\nmake -C tests/acceptance/docker test-ocis-feature-ocis BEHAT_FEATURE=\u0026#39;tests/acceptance/features/apiBugDemonstration/apiAuthOcs-ocsDELETEAuth.feature\u0026#39; This must be pointing to a valid feature definition.\noCIS image to be tested (or: skip build and take existing image) By default the tests will be run against docker image built from your current working state of the oCIS repository. For some purposes it might also be handy to use a oCIS image from Docker Hub. Therefore you can provide the optional flag OCIS_IMAGE_TAG=... which must contain an available docker tag of the owncloud/ocis registry on Docker Hub (eg. \u0026lsquo;latest\u0026rsquo;).\nmake -C tests/acceptance/docker localApiTests-apiBugDemonstration-ocis OCIS_IMAGE_TAG=latest Test log output While a test is running or when it is finished, you can attach to the logs generated by the tests.\nmake -C tests/acceptance/docker show-test-logs The log output is opened in less. You can navigate up and down with your cursors. By pressing \u0026ldquo;F\u0026rdquo; you can follow the latest line of the output.  Cleanup During testing we start an redis and oCIS docker container. These will not be stopped automatically. You can stop them with:\nmake -C tests/acceptance/docker clean Testing with test suite natively installed We are using the ownCloud 10 acceptance test suite against oCIS.\nGetting the tests All you need to do to get the acceptance tests is check out the core repo:\ngit clone https://github.com/owncloud/core.git Run ocis To start ocis:\nPROXY_ENABLE_BASIC_AUTH=true bin/ocis server PROXY_ENABLE_BASIC_AUTH will allow the acceptance tests to make requests against the provisioning api (and other endpoints) using basic auth.\nRun the acceptance tests First we will need to clone the testing app in owncloud which contains the skeleton files required for running the tests. In the ownCloud 10 core clone the testing app with the following command:\ngit clone https://github.com/owncloud/testing apps/testing Then run the api acceptance tests with the following command from the root of the ownCloud 10 core repository:\nmake test-acceptance-api \\ TEST_SERVER_URL=https://localhost:9200 \\ TEST_OCIS=true \\ SKELETON_DIR=apps/testing/data/apiSkeleton \\ DELETE_USER_DATA_CMD=\u0026#39;rm -rf /var/tmp/ocis/storage/users/nodes/root/* /var/tmp/ocis/storage/users/nodes/*-*-*-*\u0026#39; \\ BEHAT_FILTER_TAGS=\u0026#39;~@notToImplementOnOCIS\u0026amp;\u0026amp;~@toImplementOnOCIS\u0026#39; Make sure to adjust the settings TEST_SERVER_URL and OCIS_REVA_DATA_ROOT according to your environment.\nThis will run all tests that are relevant to oCIS.\nTo run a single test add BEHAT_FEATURE=\u0026lt;feature file\u0026gt;\nuse existing tests for BDD As a lot of scenarios are written for oC10, we can use those tests for Behaviour driven development in ocis. Every scenario that does not work in oCIS with \u0026ldquo;owncloud\u0026rdquo; storage, is listed in tests/acceptance/expected-failures-on-OWNCLOUD-storage.md with a link to the related issue. Every scenario that does not work in oCIS with \u0026ldquo;ocis\u0026rdquo; storage, is listed in tests/acceptance/expected-failures-on-OCIS-storage.md with a link to the related issue.\nThose scenarios are run in the ordinary acceptance test pipeline in CI. The scenarios that fail are checked against the expected failures. If there are any differences then the CI pipeline fails. Similarly, scenarios that do not work in oCIS with EOS storage are listed in tests/acceptance/expected-failures-on-EOS-storage.md. Additionally, some issues have scenarios that demonstrate the current buggy behaviour in ocis(reva). Those scenarios are in this ocis repository in tests/acceptance/features/apiBugDemonstration. Have a look into the documentation to understand why we are writing those tests.\nIf you want to work on a specific issue\n  adjust the core commit id to the latest commit in core so that CI will run the latest test code and scenarios from core. For that change CORE_COMMITID in .drone.env:\n# The test runner source for API tests CORE_COMMITID=38c91e5cf5fc4ffdc0536ba1d147a2a618ef83b5 CORE_BRANCH=master    locally run each of the tests marked with that issue in the expected failures file.\nE.g.:\nmake test-acceptance-api \\ TEST_SERVER_URL=https://localhost:9200 \\ TEST_OCIS=true \\ DELETE_USER_DATA_CMD=\u0026#39;rm -rf /var/tmp/ocis/storage/users/nodes/root/* /var/tmp/ocis/storage/users/nodes/*-*-*-*\u0026#39; \\ BEHAT_FEATURE=\u0026#39;tests/acceptance/features/apiComments/comments.feature:123\u0026#39;   the tests will fail, try to understand how and why they are failing\n  fix the code\n  go back to 2. and repeat till the tests are passing.\n  remove those tests from the expected failures file\n  run each of the local tests that were demonstrating the buggy behavior. They should fail.\n  delete each of the local tests that were demonstrating the buggy behavior.\n  make a PR that has the fixed code, relevant lines removed from the expected failures file and bug demonstration tests deleted.\n  "},{"id":61,"href":"/clients/web/backend-oc10/","title":"Setup with ownCloud 10","parent":"ownCloud Web","content":"    Prerequisites Setting up the ownCloud Server  Adjusting config.php Setting up OAuth2 Setting up Web   Running Web Running acceptance tests     Prerequisites Decide on which host and port Web will be served, for example https://web-host:9100/web-path/. In this document, we will refer to the following:\n \u0026lt;web-url\u0026gt; as the full URL, for example https://web-host:9100/web-path/ \u0026lt;web-domain\u0026gt; as the protocol, domain and port, for example: https://web-host:9100  Setting up the ownCloud Server Make sure you have an ownCloud Server already installed.\nAdjusting config.php Add the following entries to config/config.php:\n tell ownCloud where Web is located:  \u0026#39;web.baseUrl\u0026#39; =\u0026gt; \u0026#39;\u0026lt;web-url\u0026gt;\u0026#39;,  add a CORS domain entry for Web in config.php:  \u0026#39;cors.allowed-domains\u0026#39; =\u0026gt; [\u0026#39;\u0026lt;web-domain\u0026gt;\u0026#39;],  optional: when developing against unstable APIs (technical preview), these need to be enabled in the server core:  dav.enable.tech_preview =\u0026gt; true, Setting up OAuth2 To connect to the ownCloud server, it is necessary to set it up with OAuth2.\nInstall and enable the oauth2 app:\n% occ market:install oauth2 % occ app:enable oauth2 Login as administrator in the ownCloud Server web interface and go to the \u0026ldquo;User Authentication\u0026rdquo; section in the admin settings and add an entry for Web as follows:\n pick an arbitrary name for the client set the redirection URI to \u0026lt;web-url\u0026gt;/oidc-callback.html make sure to take note of the client identifier value as it will be needed in the Web configuration later on  Setting up Web In the local Web checkout, copy the config/config.json.sample-oc10 file to config/config.json and adjust it accordingly:\n Set the \u0026ldquo;server\u0026rdquo; key to the URL of the ownCloud server including path. If the URL contains a path, please also add a trailing slash there. Set the \u0026ldquo;clientId\u0026rdquo; key to the client identifier as copied from the \u0026ldquo;User Authentication\u0026rdquo; section before. Adjust \u0026ldquo;url\u0026rdquo; and \u0026ldquo;authUrl\u0026rdquo; using the ownCloud server URL as prefix for both Optionally adjust \u0026ldquo;apps\u0026rdquo; for the list of apps to be loaded. These match the app names inside the \u0026ldquo;apps\u0026rdquo; folder.  Running Web  if running from source, make sure to build Web first run by launching a rollup dev server yarn serve when working on the Web code, rollup will recompile the code automatically  Running acceptance tests For testing, please refer to the ownCloud 10 testing section\n"},{"id":62,"href":"/ocis/development/extensions/","title":"Extensions","parent":"Development","content":"    How to build and run ocis-simple Hacking ocis-hello  Option 1:   Hacking ownCloud Web (and ocis-web) The ownCloud design system External ownCloud Web apps ownCloud Web extension points  ownCloud Web Files app   API driven development     How to build and run ocis-simple oCIS uses build tags to build different flavors of the binary. In order to work on a new extension we are going to reduce the scope a little and use the simple tag. Let us begin by creating a dedicated folder:\nmkdir ocis-extension-workshop \u0026amp;\u0026amp; ocis-extension-workshop Following https://github.com/owncloud/ocis\ngit clone https://github.com/owncloud/ocis.git cd ocis TAGS=simple make generate build Q: Can you specify which version of ownCloud Web to use? A: No, the ownCloud Web that is used is compiled into the assets of ocis-web which is currently not automatically updated. We\u0026rsquo;ll see how to use a custom ownCloud Web later.\nbin/ocis server\nOpen the browser at https://localhost:9200\n You land on the login screen. click login You are redirected to an idp at https://localhost:9200/signin/v1/identifier with a login mask. Use einstein:relativity (one of the three demo users) to log in You are redirected to http://localhost:9100/#/hello the ocis-hello app Replace World with something else and submit. You should see Hello %something else%  Q: One of the required ports is already in use. Ocis seems to be trying to restart the service over and over. What gives? A: Using the ocis binary to start the server will case ocis to keep track of the different services and restart them in case they crash.\nHacking ocis-hello go back to the ocis-extension-workshop folder\ncd .. Following https://github.com/owncloud/ocis-hello\ngit clone https://github.com/owncloud/ocis-hello.git cd ocis-hello yarn install # this actually creates the assets yarn build # this will compile the assets into the binary make generate build Two options:\n run only the necessary services from ocis and ocis-hello independently compile ocis with the updated ocis-hello  Option 1: get a list of ocis services:\nps ax | grep ocis Try to kill ocis hello\nRemember: For now, killing a service will cause ocis to restart it. This is subject to change.\nIn order to be able to manage the processes ourselves we need to start them independently:\nbin/ocis server starts the same services as:\nbin/ocis micro \u0026amp; bin/ocis web \u0026amp; bin/ocis hello \u0026amp; bin/ocis reva \u0026amp; Now we can kill the ocis hello and use our custom built ocis-hello binary:\ncd ../ocis-hello bin/ocis-hello server Hacking ownCloud Web (and ocis-web) Following https://github.com/owncloud/web we are going to build the current ownCloud Web\ngit clone https://github.com/owncloud/web.git cd web yarn install yarn dist We can tell ocis to use the compiled assets:\nKill ocis web, then use the compiled assets when starting ownCloud Web.\ncd ../ocis WEB_ASSET_PATH=\u0026#34;`pwd`/../web/dist\u0026#34; bin/ocis web The ownCloud design system The ownCloud design system contains a set of ownCloud vue components for ownCloud Web or your own ocis extensions. Please use it for a consistent look and feel.\nExternal ownCloud Web apps This is what hello is: copy and extend!\n  ownCloud Web is configured using the config.json which is served by the ocis-web service (either bin/ocis web or bin/web server)\n  point ocis-web to the web config which you extended with an external app: WEB_UI_CONFIG=\u0026quot;pwd/../web/config.json\u0026quot; ASSET_PATH=\u0026quot;pwd/../web/dist\u0026quot; bin/ocis web\n  { \u0026#34;server\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;https://localhost:9200/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:9105/hello.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } }, { \u0026#34;id\u0026#34;: \u0026#34;myapp\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:6789/superapp.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;backend\u0026#34;: \u0026#34;http://someserver:1234\u0026#34;, \u0026#34;myconfig\u0026#34;: \u0026#34;is awesome\u0026#34; } } ] } ownCloud Web extension points For an up to date list check out the ownCloud Web documentation.  Several ones available:\nownCloud Web  App switcher (defined in config.json) App container (loads UI of your extension)  Files app  File action Create new file action Sidebar Quick access for sidebar inside of file actions (in the file row)  Example of a file action in the app.js:\nconst appInfo = { name: \u0026#39;MarkdownEditor\u0026#39;, id: \u0026#39;markdown-editor\u0026#39;, icon: \u0026#39;text\u0026#39;, isFileEditor: true, extensions: [{ extension: \u0026#39;txt\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new plain text file…\u0026#39;) } } }, { extension: \u0026#39;md\u0026#39;, newFileMenu: { menuTitle ($gettext) { return $gettext(\u0026#39;Create new mark-down file…\u0026#39;) } } }] } For the side bar have a look at the files app, defaults.js \u0026amp; fileSideBars\nAPI driven development Until now we only had a look at the ui and how the extensions are managed on the cli. But how do apps actually talk to the server?\nShort answer: any way you like\nLong answer: micro and ocis-hello follow a protocol driven development:\n  specify the API using protobuf\n  generate client and server code\n  evolve based on the protocol\n  CS3 api uses protobuf as well and uses GRPC\n  ocis uses go-micro, which provides http and grpc gateways\n  the gateways and protocols are optional\n  owncloud and kopano are looking into a MS graph like api to handle ownCloud Web requests.\n they might be about user, contacts, calendars \u0026hellip; which is covered by the graph api we want to integrate with eg. kopano and provide a common api (file sync and share is covered as well)    as an example for protobuf take a look at ocis-hello\n  "},{"id":63,"href":"/ocis/storage-backends/","title":"Storage backends","parent":"oCIS - ownCloud Infinite Scale","content":""},{"id":64,"href":"/extensions/onlyoffice/license/","title":"License","parent":"OnlyOffice","content":"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"},{"id":65,"href":"/extensions/web/releasing/","title":"Releasing","parent":"ownCloud Web","content":"    Releasing  Package Hierarchy  Prerequisites Updating ocis-web         Releasing The next generation Web Frontend is shipped as an oCIS Extension. The ocis-web extension is also embedded in the single binary and part of the ocis server command.\nTo update this package within all the deliveries, we need to update the package in the following chain from the bottom to the top.\nPackage Hierarchy  ocis  ocis-web  ocis-pkg ownCloud Web      Prerequisites Before updating the assets, make sure that ownCloud Web has been released first and take note of its release tag name.\nUpdating ocis-web  Create a branch update-web-$version in the ocis repository Change into web package folder via cd web Inside web/, update the Makefile so that the WEB_ASSETS_VERSION variable references the currently released version of https://github.com/owncloud/web Inside web/, replace the current assets with newly released ones by running make pull-assets Inside web/, run make generate. The output should look something like this: web: embed.go - YYY/MM/DD ... to write [./embed.go] from config file ... Move to the changelog (cd ../changelog/) and add a changelog file to the unreleased/ folder (You can copy an old web release changelog item as a template) Move to the repo root (cd ..)and update the WEB_COMMITID in the /.drone.env file to the commit id from the released version (unless the existing commit id is already newer) Optional: Test the changes locally by running cd ocis \u0026amp;\u0026amp; go run cmd/ocis/main.go server, visiting https://localhost:9200 and confirming everything renders correctly Commit your changes, push them and create a PR  "},{"id":66,"href":"/ocis/migration/","title":"Migration","parent":"oCIS - ownCloud Infinite Scale","content":"Migration The migration happens in subsequent stages while the service is online. First all users need to migrate to the new architecture, then the data on disk can be migrated user by user by switching the storage driver.\nUser Stories As an admin I need to avoid downtime. As an admin I want to migrate certain groups of users before others. As a user, I need a seamless migration and not lose data by any chance.\nStage-0 Is the pre-migration stage having a functional ownCloud 10 instance.\nStage-1 Introduce OpenID Connect to server and Clients\nStage-2 Install and introduce ownCloud Web and let users test it voluntarily.\nStage-3 Start oCIS backend and make read only tests on existing data using the owncloud storage driver which will read (and write)\n blobs from the same datadirectory layout as in ownCloud 10 and metadata from the ownCloud 10 databas The oCIS share manager will read share infomation from the owncloud database as well. we need a share manager that can read from the oc 10 db as well as from whatever new backend will be used for a pure oCIS setup. Currently, that would be the json file. Or that is migrated after all users have switched to oCIS. \u0026ndash; jfd  Stage-4 Test writing data with oCIS into the existing ownCloud 10 datafolder using the owncloud storage driver.\nStage-5 Introduce reverse proxy and switch over early adoptors, let admins gain trust in the new backend by comparing metrics of the two systems and having it running in parallel.\nStage-6 Voluntary transition period and subsequent hard deadline for all users\nStage-7 Disable oc10 in the proxy, all requests are now handled by oCIS, shut down oc10 web servers and redis (or keep for calendar \u0026amp; contacts only? rip out files from oCIS?)\nStage-8 User by user storage migration from owncloud driver to ocis/s3ng/cephfs\u0026hellip;\nStage-9 Migrate share data to \u0026lt;yet to determine\u0026gt; share manager backend and shut down owncloud database\nStage-10 Profit! (db for file metadata no longer necessary, less maintenance effort)\nArchitectural differences The fundamental difference between ownCloud 10 and oCIS is that the file metadata is moved from the database in the oc_filecache table (which is misnamed, as it actually is an index) to the storage provider who can place metadata as close to the underlying storage system as possible. In effect, the file metadata is sharded over multiple specialized services.\nData that will be migrated Currently, oCIS focuses on file sync and share use cases.\nBlob data In ownCloud 10 the files are laid out on disk in the data directory using the following layout:\ndata ├── einstein │ ├── cache │ ├── files │ │ ├── Photos │ │ │ └── Portugal.jpg │ │ ├── Projects │ │ │ └── Notes.md │ │ └── ownCloud Manual.pdf │ ├── files_external │ ├── files_trashbin │ │ ├── files │ │ │ ├── Documents.d1564687985 │ │ │ ├── TODO.txt.d1565721976 │ │ │ └── welcome.txt.d1564775872 │ │ └── versions │ │ │ ├── TODO.txt.v1564605543.d1565721976 │ │ │ └── TODO.txt.v1564775936.d1565721976 │ ├── files_versions │ │ ├── Projects │ │ │ ├── Notes.md.v1496912691 │ │ │ └── Notes.md.v1540305560 │ │ └── ownCloud Manual.pdf.v1396628249 │ ├── thumbnails │ │ └── 123 │ │ │ ├── 2048-1536-max.png │ │ │ └── 32-32.png // the file id, eg. of /Photos/Portugal.jpg │ └── uploads ├── einstein │ ├── files │ ├── files_trash │ └── files_versions │ … ├── marie … The data directory may also contain subfolders for owncloud 10 applications like avatars, gallery, files_external and cache.\nWhen an objectstorage is used as the primary storage all file blobs are stored by their file id and a prefix, eg.: urn:oid:\u0026lt;fileid\u0026gt;.\nThe three types of blobs we need to migrate are stored in\n files for file blobs, the current file content, files_trashbin for trashed files (and their versions) and files_versions for file blobs of older versions.  Filecache table In both cases the file metadata, including a full replication of the file tree, is stored in the oc_filecache table of an ownCloud 10 database. The primary key of a row is the file id. It is used to attach additional metadata like shares, tags, favorites or arbitrary file properties.\nThe filecache table itself has more metadata:\n   Field Type Null Key Default Extra Comment Migration     fileid bigint(20) NO PRI NULL auto_increment  MUST become the oCIS opaqueid of a file reference. ocis driver stores it in extendet attributes and can use numbers as node ids on disk. for eos see note below table   storage int(11) NO MUL 0  the filecache holds metadata for multiple storages corresponds to an oCIS storage space   path varchar(4000) YES  NULL  the path relative to the storages root MUST become the path relative to the storage root. files prefix needs to be trimmed.   path_hash varchar(32) NO    *mysql once had problems indexing long paths, so we stored a hash for lookup by path. -   parent bigint(20) NO MUL 0  used to implement the hierarchy and listing children of a folder by id. redundant with path -   name varchar(250) YES  NULL  basename of path -   mimetype int(11) NO  0  joined with the oc_mimetypes table. only relevant for objectstorage deployments can be determined from blob / file extension   mimepart int(11) NO  0  \u0026quot; can be determined from blob / file extension   size bigint(20) NO  0  same as blob size unless encryption is used MAY become size, can be determined from blob   mtime bigint(20) NO  0  same as blob mtime for files MAY become mtime (can be determined from blob as well), for directories MUST become tmtime   encrypted int(11) NO  0  encrypted flag oCIS currently does not support encryption   etag varchar(40) YES  NULL  used to propagate changes in a tree MUST be migrated (or calculated in the same way) to prevent clients from syncing unnecessarily   unencrypted_size bigint(20) NO  0  same as blob size oCIS currently does not support encryption   storage_mtime bigint(20) NO  0  used to detect external storage changes oCIS delegates that to the storage providers and drivers   permissions int(11) YES  0  *used as the basis for permissions. synced from disk when running a file scan. * oCIS delegates that to the storage providers and drivers   checksum varchar(255) YES  NULL  same as blob checksum SHOULD become the checksum in the storage provider. eos calculates it itself, ocis driver stores it in extendetd attributes     Note: for EOS a hot migration only works seamlessly if file ids in oc10 are already read from eos. otherwise either a mapping from the oc10 filecache file id to the new eos file id has to be created under the assumption that these id sets do not intersect or files and corresponding shares need to be exported and imported offline to generate a new set of ids. While this will preserve public links, user, group and even federated shares, old internal links may still point to different files because they contain the oc10 fileid\n share table used to store\n Public links Private shares with users and groups Federated shares partly Guest shares     Field Type Null Key Default Extra Comment CS3 API     id int(11) NO PRI NULL auto_increment  ShareId.opaqueid string   share_type smallint(6) NO  0  in CS3 every type is handled by a dedicated API. See below the table does NOT map to Share.ShareType TODO clarify   share_with varchar(255) YES MUL NULL   Share.grantee Grantee   uid_owner varchar(64) NO     ShareId.owner UserID   parent int(11) YES  NULL   -   item_type varchar(64) NO MUL    Share.resource_id ResourceId   item_source varchar(255) YES MUL NULL   Share.resource_id ResourceId   item_target varchar(255) YES  NULL   Share.resource_id ResourceId   file_source bigint(20) YES MUL NULL  cannot store uuid style file ids from ocis. when all users have migrated to ocis the share manager needs to be updated / migrated to a version that does. Share.resource_id ResourceId   file_target varchar(512) YES  NULL   Share.resource_id ResourceId   permissions smallint(6) NO  0   Share.Permissions SharePermissions   stime bigint(20) NO  0   Share.ctime, Share.mtime   accepted smallint(6) NO  0   ReceivedShare.ShareState ShareState   expiration datetime YES  NULL  only used for the Link API and storage provider api, currently cannot be added using the Collaboration or OCM API Grant   token varchar(32) YES MUL NULL   PublicShare.token   mail_send smallint(6) NO  0   -   uid_initiator varchar(64) YES  NULL   ShareId.creator UserID   share_name varchar(64) YES  NULL  only exists for public shares PublicShare.display_name   attributes longtext YES  NULL  additional share attributes could be implemented using opaque data, but should be added to the CS3 api    In the CS3 API\n public links are handled by the PublicShareProvider using the Link API internal shares are handled by the UserShareProvider using the Collaboration API. This covers user and group shares. federated shares are handled by the OcmShareProvider using the OCM Share Provider AP aka. Open Cloud Mesh.  share_external Used to store additional metadata for federated shares.\n   Field Type Null Key Default Extra Comment     id bigint(20) NO PRI NULL auto_increment    remote varchar(512) NO  NULL  Url of the remote owncloud instance   share_token varchar(64) NO  NULL  Public share token   password varchar(64) YES  NULL  Optional password for the public share   name varchar(64) NO  NULL  Original name on the remote server   owner varchar(64) NO  NULL  User that owns the public share on the remote server   user varchar(64) NO MUL NULL  Local user which added the external share   mountpoint varchar(4000) NO  NULL  Full path where the share is mounted   mountpoint_hash varchar(32) NO  NULL  md5 hash of the mountpoint   remote_id varchar(255) NO  -1     accepted int(11) NO  0      TODO document how the reva OCM service currently persists the data\ntrusted_servers used to determine if federated shares can automatically be accepted\n   Field Type Null Key Default Extra Comment     id int(11) NO PRI NULL auto_increment    url varchar(512) NO  NULL  Url of trusted server   url_hash varchar(255) NO UNI   sha1 hash of the url without the protocol   token varchar(128) YES  NULL  token used to exchange the shared secret   shared_secret varchar(256) YES  NULL  shared secret used to authenticate   status int(11) NO  2  current status of the connection   sync_token varchar(512) YES  NULL  cardDav sync token    TODO clarify how OCM handles this andt where we store / configure this. It seems related to trusted IdPs\nuser data Users are migrated in two steps:\n They should all be authenticated using openid connect, which already moves them to a common identity management system. To search share recipients, both, ownCloud 10 and oCIS need acces to the same user directory using eg. LDAP.  TODO: add state to CS3 API, so we can \u0026lsquo;disable\u0026rsquo; users TODO: how do we map (sub) admins? -\u0026gt; map to roles \u0026amp; permissions\naccounts:\n   Field Type Null Key Default Extra Comment     id bigint(20) unsigned NO PRI NULL auto_increment    email varchar(255) YES MUL NULL     user_id varchar(255) NO UNI NULL     lower_user_id varchar(255) NO UNI NULL     display_name varchar(255) YES MUL NULL     quota varchar(32) YES  NULL     last_login int(11) NO  0     backend varchar(64) NO  NULL     home varchar(1024) NO  NULL     state smallint(6) NO  0      users:\n   Field Type Null Key Default Extra Comment     uid varchar(64) NO PRI      password varchar(255) NO       displayname varchar(64) YES  NULL      groups:\nThe groups table really only contains the group name.\n   Field Type Null Key Default Extra     gid varchar(64) NO PRI      LDAP TODO clarify if metadata from ldap \u0026amp; user_shibboleth needs to be migrated\n the dn -\u0026gt; owncloud internal username mapping that currently lives in the oc_ldap_user_mapping table needs to move into a dedicated ownclouduuid attribute in the LDAP server. The idp should send it as a claim so the proxy does not have to look up the user using LDAP again. The username cannot be changed in ownCloud 10 and the oCIS provisioning API will not allow changing it as well. When we introduce the graph api we may allow changing usernames when all clients have moved to that api.  The problem is that the username in owncloud 10 and in oCIS also need to be the same, which might not be the case when the ldap mapping used a different column. In that case we should add another owncloudusername attribute to the ldap server \u0026hellip;\nactivities dedicated service, not yet implemented, requires decisions about an event system \u0026ndash; jfd\n   Field Type Null Key Default Extra Comment     activity_id bigint(20) NO PRI NULL auto_increment    timestamp int(11) NO MUL 0     priority int(11) NO  0     type varchar(255) YES  NULL     user varchar(64) YES  NULL     affecteduser varchar(64) NO MUL NULL     app varchar(255) NO  NULL     subject varchar(255) NO  NULL     subjectparams longtext NO  NULL     message varchar(255) YES  NULL     messageparams longtext YES  NULL     file varchar(4000) YES  NULL     link varchar(4000) YES  NULL     object_type varchar(255) YES MUL NULL     object_id bigint(20) NO  0      Links The data_exporter has logic that allows exporting and importing users, including shares. The model classes contain the exact mapping.\n"},{"id":67,"href":"/ocis/flow-docs/login-flow/","title":"Login Flow","parent":"Flow documentation","content":"Login Flow The following sequence diagram describes the openid connect auth code flow. The eight numbered steps and notes correspond to the openid connect auth code flow steps. Example requests are based on the spec as well:\n  document.addEventListener(\"DOMContentLoaded\", function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  sequenceDiagram %% we have comments!! \\o/ %% this documents the login workflow %% examples taken from the oidc spec https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth %% TODO add PKCE, see https://developer.okta.com/blog/2019/08/22/okta-authjs-pkce#use-pkce-to-make-your-apps-more-secure participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant glauth as ocis-glauth participant graph as ocis-graph participant accounts as ocis-accounts participant ldap as external LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND no (or expired) auth Note over client,proxy: ocis needs to know the IdP that is\nused to authenticate users. The\nproxy will redirect unauthenticated\nrequests to that IdP. proxy---client: 302 Found Note over client, idp: HTTP/1.1 302 Found\nLocation: https://server.example.com/authorize?\nresponse_type=code\u0026\nscope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb Note over client, idp: We should follow the OpenID Connect Discovery protocol Note over client, idp: Clients might fall back to the ocis server if the discovery failed.\nWe can provide a webfinger endpoint there to let guests use an idp\nthat is backed by the accounts service. Note over client, idp: For now, clients can only handle one IdP, which is configured in ocis. client--client: 1. Client prepares an Authentication Request\ncontaining the desired request parameters. client-+idp: 2. Client sends the request to the Authorization Server. Note over client, idp: GET /authorize?\nresponse_type=code\n\u0026scope=openid%20profile%20email\n\u0026client_id=s6BhdRkqt3\n\u0026state=af0ifjsldkj\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1\nHost: server.example.com Note over user, idp: 3. Authorization Server Authenticates the End-User. Note over idp,ldap: Either an IdP already exists or a new one is introduced. Since we are not yet using oidc discovery we can only use one IdP. alt all users managed by idp/ocis idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result Note over accounts,ldap: In case internal users are managed\nin an external ldap they have to be\nsynced to the accounts service to\nshow up as recipients during sharing. else all users authenticated by an external idp idp-+ldap: LDAP query/bind ldap---idp: LDAP result alt guest accounts managed in ocis / lookup using glauth proxy: Note over idp,glauth: Idp is configured to use glauth as a\nsecond ldap server. idp-+glauth: LDAP query/bind glauth-+graph: GET user with Basic Auth\nGraphAPI graph-+accounts: internal GRPC accounts---graph: response graph---glauth: OData response glauth---idp: LDAP result else guest account provisioned by other means Note over accounts, ldap: In case guest accounts are managed\nin an existing ldap they need to be\nsynced to the accounts service to\nbe able to login and show up as\nrecipients during sharing. end end Note over user, idp: 4. Authorization Server obtains End-User Consent/Authorization. idp---client: 5. Authorization Server sends the End-User back\nto the Client with an Authorization Code. Note over client, idp: HTTP/1.1 302 Found\nLocation: https://client.example.org/cb?\ncode=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj client-+idp: 6. Client requests a response using the\nAuthorization Code at the Token Endpoint. Note over client, idp: POST /token HTTP/1.1\nHost: server.example.com\nContent-Type: application/x-www-form-urlencoded\ngrant_type=authorization_code\u0026code=SplxlOBeZQQYbYS6WxSbIA\n\u0026redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb idp---client: 7. Client receives a response that contains an\nID Token and Access Token in the response body. Note over client, idp: HTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n{\n\"access_token\": \"SlAV32hkKG\",\n\"token_type\": \"Bearer\",\n\"refresh_token\": \"8xLOxBtZp8\",\n\"expires_in\": 3600,\n\"id_token\": \"a ... b.c ... d.e ... f\" // must be a JWT\n} client--client: 8. Client validates the ID token and\nretrieves the End-User's Subject Identifier. client-+proxy: PROPFIND With access token proxy---client: 207 Multi-Status client---user: List of Files X, Y, Z ...  "},{"id":68,"href":"/ocis/metrics/","title":"Metrics","parent":"oCIS - ownCloud Infinite Scale","content":"Metrics This service provides some Prometheus metrics through the debug endpoint, you can optionally secure the metrics endpoint by some random token, which has to be configured either through the flag --debug-token or the environment variable OCIS_DEBUG_TOKEN mentioned above. By default, the metrics endpoint is bound to http://0.0.0.0:8001/metrics.\n go_gc_duration_seconds A summary of the GC invocation durations go_gc_duration_seconds_sum A summary of the GC invocation durations go_gc_duration_seconds_count A summary of the GC invocation durations go_goroutines Number of goroutines that currently exist go_info Information about the Go environment go_memstats_alloc_bytes Number of bytes allocated and still in use go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table go_memstats_frees_total Total number of frees go_memstats_gc_cpu_fraction The fraction of this program\u0026rsquo;s available CPU time used by the GC since the program started go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use go_memstats_heap_idle_bytes Number of heap bytes waiting to be used go_memstats_heap_inuse_bytes Number of heap bytes that are in use go_memstats_heap_objects Number of allocated objects go_memstats_heap_released_bytes Number of heap bytes released to OS go_memstats_heap_sys_bytes Number of heap bytes obtained from system go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection go_memstats_lookups_total Total number of pointer lookups go_memstats_mallocs_total Total number of mallocs go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place go_memstats_other_sys_bytes Number of bytes used for other system allocations go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator go_memstats_sys_bytes Number of bytes obtained from system go_threads Number of OS threads created promhttp_metric_handler_requests_in_flight Current number of scrapes being served promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code  "},{"id":69,"href":"/ocis/flow-docs/request-flow/","title":"Request Flow","parent":"Flow documentation","content":"Request Flow The following sequence diagram describes the general request flow. It shows where account provisioning and token minting are happening:\n  document.addEventListener(\"DOMContentLoaded\", function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  sequenceDiagram %% we have comments!! \\o/ participant user as User participant client as Client participant proxy as ocis-proxy participant idp as IdP participant accounts as ocis-accounts participant ldap as corporate LDAP server user-+client: What is the content of my home? client-+proxy: PROPFIND Bearer auth using oidc auth token Note over client,proxy: What is in a bearer token? The spec recommends opaque tokens. Treat it as random byte noise. Note over client,proxy: the proxy MUST authenticate users using ocis-accounts because it needs to decide where to send the request %% Mention introspection endpoint for opaque tokens %% idp uses jwt, so we can save a request %% either way the token can be used to look up the sub and iss of the user %% or is token check enough? proxy-+idp: GET /userinfo alt userinfo succeeds idp--proxy: 200 OK Note over proxy,accounts: Content-Type: application/json\n{\n\"sub\": \"248289761001\",\n\"name\": \"Jane Doe\",\n\"given_name\": \"Jane\",\n\"family_name\": \"Doe\",\n\"preferred_username\": \"j.doe\",\n\"email\": \"janedoe@example.com\",\n\"picture\": \"http://example.com/janedoe/me.jpg\"\n} %% see: https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse else userinfo fails idp---proxy: 401 Unauthorized Note over proxy,accounts: WWW-Authenticate: error=\"invalid_token\",\nerror_description=\"The Access Token expired\" proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-+accounts: TODO API call to exchange sub@iss with account UUID Note over proxy,accounts: does not autoprovision users. They are explicitly provsioned later. alt account exists or has been migrated accounts--proxy: existing account UUID else account does not exist opt oc10 endpoint is configured Note over proxy,oc10: Check if user exists in oc10 proxy-+oc10: GET /apps/graphapi/v1.0/users/\u0026lt;uuid\u0026gt; opt user exists in oc10 oc10---proxy: 200 %% TODO auth using internal token proxy-+oc10: PROPFIND Note over proxy,oc10: forward existing bearer auth oc10---proxy: Multistatus response proxy--client: Multistatus response client--user: List of Files X, Y, Z ... end end Note over proxy,accounts: provision a new account including displayname, email and sub@iss TODO only if the user is allowed to login, based on group membership in the ldap server proxy-proxy: generate new uuid proxy-+accounts: TODO create account with new generated uuid accounts---proxy: OK / error else account has been disabled accounts---proxy: account is disabled proxy--client: 401 Unauthorized or 302 Found with redirect to idp Note over client: start at login flow\nor refresh the token end proxy-proxy: store uuid in context %% what if oc10 does not support a certain request / API proxy-proxy: mint an internal jwt that includes the UUID and username using revas `x-access-token` header proxy-+reva: PROPFIND Token auth using internal JWT reva---proxy: Multistatus response proxy---client: Multistatus response client---user: List of Files X, Y, Z ...  "},{"id":70,"href":"/ocis/flow-docs/public-upload-flow/","title":"Public upload Flow","parent":"Flow documentation","content":"Public Upload flow The following diagram describes the flow of requests:\nocis-reva sharing\nREVA_SHARING_ADDR = 0.0.0.0:9150\nocis-reva sharing...ocis-reva frontend\nREVA_FRONTEND_ADDR = 0.0.0.0:9140\nREVA_GATEWAY_URL = ocis:9142\nocis-reva frontend...ocis-proxy\nPROXY_HTTP_ADDR = 0.0.0.0:9200\nocis-proxy...2  POST http://ocis:9140/remote.php/dav/files/einstein/2 POST http:/...ocdav\nprefix = \"\"\ntimeout = 86400\nocdav...datagateway\nprefix = \"data\"\ntimeout = 86400\ndatagateway...client\nclient\u0026#xa;22  PATCH https://oc.example.org/data/{token}\nTus-Resumable: 1.0.022 PATCH http...ocis-reva gateway\nREVA_GATEWAY_ADDR = 0.0.0.0:9142\nocis-reva gateway...storage-registry\nstorage-registry\u0026#xa;Expose: trueExpose: true24  PATCH http://ocis:9156/data/u-u-i-d24 PATCH http...4  GetStorageProvider\n(ShareReference)4 GetStorageP...5  ProviderInfo5 ProviderInfostorageprovider\nREVA_STORAGE_HOME_ADDR = 0.0.0.0:9154\nREVA_STORAGE_HOME_DRIVER = eoshome\nREVA_STORAGE_HOME_EXPOSE_DATA_SERVER = false\nREVA_STORAGE_HOME_DATA_SERVER_URL =\nhttp://ocis:9156/data\nstorageprovider...Expose: falseExpose: false6  InitiateFileUpload\n(ShareReference)6 InitiateFil...EOSEOS15  WriteFile(upload info)15 WriteFile(...7  GetPublicShare7 GetPublicSh...19  UploadEndpoint\nhttps://oc.example.org/data/{token}19 UploadEndp...20  201 Created\nLocation: https://oc.example.org/data/{token}20 201 Create...21  201 Created\nLocation: https://oc.example.org/data/{token}21 201 Create...1 POST https://oc.example.org/remote.php/dav/files/einstein/\nUpload-Length: 100\nTus-Resumable: 1.0.0\nUpload-Metadata: filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==,dir d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==1 POST https:...23  PATCH http://ocis:9140/data/{token}\nTus-Resumable: 1.0.023 PATCH http...3  InitiateFileUpload3 InitiateFil...25  Write(bytes)25 Write(byte...26  204 No Content26 204 No Con...27  204 No Content27 204 No Con...28  204 No Content28 204 No Con...publicstorageprovider\nexpose-data-server = true\npublicstorageprovider...publicshareprovider\npublicshareprovider\u0026#xa;8  GetPublicShare8 GetPublicSh...9  PublicShare9 PublicShare10  PublicShare10 PublicShare11  InitiateFileUpload(TargetReference)11 InitiateFi...12  GetStorageProvider\n(TargetReference)12 GetStorage...13  ProviderInfo13 ProviderIn...14  InitiateFileUpload(TargetReference)14 InitiateFi...16  UploadEndpoint\nhttp://ocis:9156/data/u-u-i-d\nExpose: false16 UploadEndp...17 UploadEndpoint\nhttps://oc.example.org/data/\ntoken: sign(http://ocis:9156/data/u-u-i-d)17 UploadEndp...18  UploadEndpoint\nhttps://oc.example.org/data/{token}\nExpose: true18 UploadEndp...gateway\nREVA_TRANSFER_EXPIRES = 86400\nREVA_FRONTEND_URL =\nhttps://oc.example.org\nREVA_DATAGATEWAY_URL =\nhttps://oc.example.org/data\n\ngateway...When a storage provider\nsets the Expose flag of an Upload/Download Endpoint to false the gateway will wrap the url in a JWT and return the URL of the datagateway along with a transfer-token.When a storage provider...dataprovider\nREVA_STORAGE_HOME_DATA_ADDR = 0.0.0.0:9156\nREVA_STORAGE_HOME_DATA_DRIVER = eoshome\ndataprovider...GOAL: transfer bytes from the client up here ...GOAL: tran...... to the storage system somewhere down here... to the storage syst...Viewer does not support full SVG 1.1 "},{"id":71,"href":"/extensions/storage/updating/","title":"Updating reva","parent":"Storage","content":"    Updating reva     Updating reva  Run go get github.com/cs3org/reva@master Create a changelog entry containing changes that were done in reva Create a Pull Request to ocis-reva master with those changes If test issues appear, you might need to adjust the tests After the PR is merged, consider doing a release of the storage submodule  "},{"id":72,"href":"/extensions/settings/bundles/","title":"Settings Bundles","parent":"Settings","content":"A Settings Bundle is a collection of settings, uniquely identified by the key of the extension registering the bundle and the key of the bundle itself. It\u0026rsquo;s purpose is to let oCIS extensions define settings and make them available to users. They are dynamically rendered into forms, available in the frontend.\nAs of now we support five different types of settings:\n boolean integer string single choice list of integers or strings multiple choice list of integers or strings  Each Setting is uniquely identified by a key within the bundle. Some attributes depend on the chosen type of setting. Through the information provided with the attributes of the setting, the settings frontend dynamically renders form elements, allowing users to change their settings individually.\nExample { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34; }, \u0026#34;displayName\u0026#34;: \u0026#34;Profile\u0026#34;, \u0026#34;settings\u0026#34;: [ { \u0026#34;settingKey\u0026#34;: \u0026#34;lastname\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Lastname\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for lastname\u0026#34;, \u0026#34;stringValue\u0026#34;: { \u0026#34;placeholder\u0026#34;: \u0026#34;Set lastname\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;age\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Age\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Input for age\u0026#34;, \u0026#34;intValue\u0026#34;: { \u0026#34;min\u0026#34;: \u0026#34;16\u0026#34;, \u0026#34;max\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;step\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;placeholder\u0026#34;: \u0026#34;Set age\u0026#34; } }, { \u0026#34;settingKey\u0026#34;: \u0026#34;timezone\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;Timezone\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;User timezone\u0026#34;, \u0026#34;singleChoiceValue\u0026#34;: { \u0026#34;options\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34; }, { \u0026#34;stringValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34;, \u0026#34;displayValue\u0026#34;: \u0026#34;Asia/Kathmandu\u0026#34; } ] } } ] } "},{"id":73,"href":"/clients/web/backend-ocis/","title":"Setup with OCIS","parent":"ownCloud Web","content":"    Setting up OCIS services Setting up Web Running Web Running acceptance tests     Setting up OCIS services  Setup OCIS by following the setup instructions. Kill the oCIS Web service ./ocis kill web  Setting up Web  Copy \u0026lsquo;./config/config.json.sample-ocis\u0026rsquo; to \u0026lsquo;./config/config.json\u0026rsquo; and adjust values if required  Running Web  in the Web checkout folder, run yarn serve open https://localhost:9200 and accept the certificate. when signing in, use one of the available test users whenever code changes are made, you need to manually reload the browser page (no hot reload)  Running acceptance tests For testing, please refer to the OCIS testing section\n"},{"id":74,"href":"/ocis/development/debugging/","title":"Debugging","parent":"Development","content":"    Debugging  Start ocis  Use the debug binary and attach to the process as needed Start all services independently to replace one of them with a debug process   Gather error messages Managing dependencies and testing changes       Debugging As a single binary for easy deployment running ocis server just forks itself to start all the services, which makes debugging those processes a little harder.\nUltimately, we want to be able to stop a single service using eg. ocis kill web so that you can start the service you want to debug in debug mode. We need to change the way we fork processes though, otherwise the runtime will automatically restart a service if killed.\nStart ocis For debugging there are two workflows that work well, depending on your preferences.\nUse the debug binary and attach to the process as needed Run the debug binary with OCIS_LOG_LEVEL=debug bin/ocis-debug server and then find the service you want to debug using:\n# ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug idp 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug web 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Then you can set a breakpoint in the service you need and attach to the process via processid. To debug the reva-sharing service the VS Code launch.json would look like this:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ocis attach\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;go\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;processId\u0026#34;: 12897 } ] } Start all services independently to replace one of them with a debug process  You can use this ./ocis.sh script to start all services independently, so they don\u0026rsquo;t get restarted by the runtime when you kill them:  #/bin/sh LOG_LEVEL=\u0026#34;debug\u0026#34; bin/ocis --log-level=$LOG_LEVEL micro \u0026amp; bin/ocis --log-level=$LOG_LEVEL glauth \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph-explorer \u0026amp; bin/ocis --log-level=$LOG_LEVEL graph \u0026amp; #bin/ocis --log-level=$LOG_LEVEL hello \u0026amp; bin/ocis --log-level=$LOG_LEVEL idp \u0026amp; #bin/ocis --log-level=$LOG_LEVEL ocs \u0026amp; bin/ocis --log-level=$LOG_LEVEL web \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-basic \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-auth-bearer \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-frontend \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-gateway \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-sharing \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-home-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-oc-data \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-storage-root \u0026amp; bin/ocis --log-level=$LOG_LEVEL reva-users \u0026amp; #bin/ocis --log-level=$LOG_LEVEL webdav bin/ocis --log-level=$LOG_LEVEL proxy \u0026amp; Get the list of running processes:  # ps ax | grep ocis 12837 pts/1 Sl+ 0:00 bin/ocis-debug server 12845 pts/1 Sl 0:00 bin/ocis-debug graph 12847 pts/1 Sl 0:00 bin/ocis-debug reva-auth-bearer 12848 pts/1 Sl 0:00 bin/ocis-debug graph-explorer 12849 pts/1 Sl 0:00 bin/ocis-debug ocs 12850 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc-data 12863 pts/1 Sl 0:00 bin/ocis-debug webdav 12874 pts/1 Sl 0:00 bin/ocis-debug reva-frontend 12897 pts/1 Sl 0:00 bin/ocis-debug reva-sharing 12905 pts/1 Sl 0:00 bin/ocis-debug reva-gateway 12912 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home 12920 pts/1 Sl 0:00 bin/ocis-debug reva-users 12929 pts/1 Sl 0:00 bin/ocis-debug glauth 12940 pts/1 Sl 0:00 bin/ocis-debug reva-storage-home-data 12948 pts/1 Sl 0:00 bin/ocis-debug idp 12952 pts/1 Sl 0:00 bin/ocis-debug proxy 12961 pts/1 Sl 0:00 bin/ocis-debug thumbnails 12971 pts/1 Sl 0:00 bin/ocis-debug reva-storage-oc 12981 pts/1 Sl 0:00 bin/ocis-debug web 12993 pts/1 Sl 0:00 bin/ocis-debug api 12998 pts/1 Sl 0:00 bin/ocis-debug registry 13004 pts/1 Sl 0:00 bin/ocis-debug web 13015 pts/1 Sl 0:00 bin/ocis-debug reva-auth-basic Kill the service you want to start in debug mode:  # kill 17628 Start the service you are interested in in debug mode. When using make to build the binary there is already a bin/ocis-debug binary for you. When running an IDE tell it which service to start by providing the corresponding sub command, eg. bin\\ocis-debug reva-frontend.  Gather error messages We recommend you collect all related information in a single file or in a GitHub issue. Let us start with an error that pops up in the Web UI:\n Error while sharing. error sending a grpc stat request\n This popped up when I tried to add marie as a collaborator in ownCloud Web. That triggers a request to the server which I copied as curl. We can strip a lot of headers and the gist of it is:\n# curl \u0026#39;https://localhost:9200/ocs/v1.php/apps/files_sharing/api/v1/shares\u0026#39; -d \u0026#39;shareType=0\u0026amp;shareWith=marie\u0026amp;path=%2FNeuer+Ordner\u0026amp;permissions=1\u0026#39; -u einstein:relativity -k -v | xmllint -format - [... headers ...] \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;ocs\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;status\u0026gt;error\u0026lt;/status\u0026gt; \u0026lt;statuscode\u0026gt;998\u0026lt;/statuscode\u0026gt; \u0026lt;message\u0026gt;error sending a grpc stat request\u0026lt;/message\u0026gt; \u0026lt;/meta\u0026gt; \u0026lt;/ocs\u0026gt; The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  TODO add ocis cli tool to obtain a bearer token.  We also have a few interesting log entries:\n0:43PM INF home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=OK end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:44078 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=95841 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/grpc/interceptors/log/log.go:69 \u0026gt; unary code=Unknown end=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; from=tcp://[::1]:43910 pid=17836 pkg=rgrpc start=\u0026#34;18/Mar/2020:22:43:40 +0100\u0026#34; time_ns=586115 traceid=b4eb9a9f45921f7d3632523ca32a42b0 uri=/cs3.gateway.v1beta1.GatewayAPI/Stat user-agent=grpc-go/1.26.0 10:43PM ERR home/jfd/go/pkg/mod/github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94 \u0026gt; error sending a grpc stat request error=\u0026#34;rpc error: code = Unknown desc = gateway: error calling Stat: rpc error: code = Unavailable desc = connection error: desc = \\\u0026#34;transport: Error while dialing dial tcp [::1]:9152: connect: connection refused\\\u0026#34;\u0026#34; pid=17832 pkg=rhttp traceid=b4eb9a9f45921f7d3632523ca32a42b0 TODO return the trace id in the response so we can correlate easier. For reva tracked in https://github.com/cs3org/reva/issues/587  The last line gives us a hint where the log message originated: .../github.com/cs3org/reva@v0.0.2-0.20200318111623-a2f97d4aa741/internal/http/services/owncloud/ocs/reqres.go:94. Which looks like this:\n89: // WriteOCSResponse handles writing ocs responses in json and xml 90: func WriteOCSResponse(w http.ResponseWriter, r *http.Request, res *Response, err error) { 91: var encoded []byte 92: 93: if err != nil { 94: appctx.GetLogger(r.Context()).Error().Err(err).Msg(res.OCS.Meta.Message) 95: } Ok, so this seems to be a convenience method that is called from multiple places an also handles errors. Unfortunately, this hides the actual source of the error. We could set a breakpoint in line 94 and reproduce the problem, which can be a lot harder than just clicking the share button or sending a curl request again. So let us see what else the log tells us.\nThe previous line tells us that a Stat request failed: uri=/cs3.gateway.v1beta1.GatewayAPI/Stat. This time the line is written by the grpc log interceptor. What else is there?\nThe first line tells us that looking up the responsible storage provider seems to have succeeded: uri=/cs3.storage.registry.v1beta1.RegistryAPI/GetStorageProvider.\nAt this point it your familiarity with the codebase starts to become a factor. If you are new you should probably go back to setting a break point on the log line and check the stack trace.\nDebug wherever the call trace leads you to \u0026hellip; good luck!\nManaging dependencies and testing changes You can either run and manage the services independently, or you can update the go.mod file and replace dependencies with your local version.\nTo debug the reva frontend we need to add two replacements:\n// use the local ocis-reva repo replace github.com/owncloud/ocis-reva =\u0026gt; ../ocis-reva // also use the local reva repo replace github.com/cs3org/reva =\u0026gt; ../reva The username and password only work when basic auth is available. Otherwise you have to obtain a bearer token, eg. by grabbing it from the browser.  Rebuild ocis to make sure the dependency is used. It should be sufficient to just restart the service you want to debug.\n"},{"id":75,"href":"/extensions/accounts/grpc/","title":"GRPC API","parent":"Accounts","content":"    accounts.proto  Account AddMemberRequest CreateAccountRequest CreateGroupRequest DeleteAccountRequest DeleteGroupRequest GetAccountRequest GetGroupRequest Group Identities ListAccountsRequest ListAccountsResponse ListGroupsRequest ListGroupsResponse ListMembersRequest ListMembersResponse OnPremisesProvisioningError PasswordProfile RebuildIndexRequest RebuildIndexResponse RemoveMemberRequest UpdateAccountRequest UpdateGroupRequest AccountsService GroupsService IndexService   Scalar Value Types     accounts.proto Account Account follows the properties of the ms graph api user resuorce. See https://docs.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0#properties\n   Field Type Label Description     id string  The unique identifier for the user. Key. Not nullable. Non reassignable. Read-only.   account_enabled bool  true* if the account is enabled; otherwise, *false*. This property is required when a user is created. Supports $filter.   is_resource_account bool  A resource account is also known as a /disabled user object/ in Azure AD, and can be used to represent resources in general. In Exchange it might be used to represent conference rooms, for example, and allow them to have a phone number. You could give printers or machines with a sync client resource accounts as well. A resource account can be homed in Microsoft 365 or on premises using Skype for Business Server 2019. true if the user is a resource account; otherwise, false. Null value should be considered false.   creation_type string  Indicates whether the account was created as - a regular school or work account (\u0026rdquo;\u0026rdquo; / emptystring), - a local account, fully managed by oCIS (LocalAccount), includes synced accounts or - an external account (Invitation), - self-service sign-up using email verification (EmailVerified). Read-only.   identities Identities repeated Represents the identities that can be used to sign in to this account. An identity can be provided by oCIS (also known as a local account), by organizations, or by social identity providers such as Facebook, Google, and Microsoft, and is tied to an account. May contain multiple items with the same signInType value. Supports $filter.   display_name string  The name displayed in the address book for the account. This is usually the combination of the user\u0026rsquo;s first name, middle initial and last name. This property is required when a user is created and it cannot be cleared during updates. Supports $filter and $orderby. posixaccount MUST cn   preferred_name string  The username posixaccount MUST uid   uid_number int64  TODO rename to on_premise_? or move to extension? see https://docs.microsoft.com/en-us/graph/extensibility-open-users used for exposing the user using ldap posixaccount MUST uidnumber   gid_number int64  used for exposing the user using ldap posixaccount MUST gidnumber   mail string  The SMTP address for the user, for example, \u0026ldquo;jeff@contoso.onmicrosoft.com\u0026rdquo;. Read-Only. Supports $filter. inetorgperson MAY mail   description string  A description, useful for resource accounts posixaccount MAY description   password_profile PasswordProfile  Specifies the password profile for the user. The profile contains the user’s password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. posixaccount MAY authPassword   memberOf Group repeated The groups, directory roles and administrative units that the user is a member of. Read-only. Nullable. should we only respond with repeated strings of ids? no clients should a proper filter mask!   created_date_time google.protobuf.Timestamp  The created date of the account object.   deleted_date_time google.protobuf.Timestamp  The date and time the user was deleted. Returned only on $select.   on_premises_sync_enabled bool  true* if this object is synced from an on-premises directory; *false* if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only   on_premises_immutable_id string  This property is used to associate an on-premises LDAP user to the oCIS account object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user’s userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when specifying this property. Supports $filter.   on_premises_security_identifier string  Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only.   on_premises_distinguished_name string  Contains the on-premises LDAP distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_sam_account_name string  Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_domain_name string  Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_user_principal_name string  Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only.   on_premises_last_sync_date_time google.protobuf.Timestamp  Indicates the last time at which the object was synced with the on-premises directory; Read-only.   on_premises_provisioning_errors OnPremisesProvisioningError repeated Errors when using synchronization during provisioning.   external_user_state string  For an external user invited to the tenant using the invitation API, this property represents the invited user\u0026rsquo;s invitation status. For invited users, the state can be PendingAcceptance or Accepted, or \u0026quot;\u0026rdquo; / emptystring for all other users. Returned only on $select. Supports $filter with the supported values. For example: $filter=externalUserState eq \u0026lsquo;PendingAcceptance\u0026rsquo;.   external_user_state_change_date_time google.protobuf.Timestamp  Shows the timestamp for the latest change to the externalUserState property. Returned only on $select.   refresh_tokens_valid_from_date_time google.protobuf.Timestamp  Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Returned only on $select. Read-only. Use invalidateAllRefreshTokens to reset.   sign_in_sessions_valid_from_date_time google.protobuf.Timestamp  Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset.    AddMemberRequest    Field Type Label Description     group_id string  The id of the group to add a member to   account_id string  The account id to add    CreateAccountRequest    Field Type Label Description     account Account  The account resource to create    CreateGroupRequest    Field Type Label Description     group Group  The account resource to create    DeleteAccountRequest    Field Type Label Description     id string      DeleteGroupRequest    Field Type Label Description     id string      GetAccountRequest    Field Type Label Description     id string      GetGroupRequest    Field Type Label Description     id string      Group    Field Type Label Description     id string  The unique identifier for the group. Returned by default. Inherited from directoryObject. Key. Not nullable. Read-only.   display_name string  The display name for the group. This property is required when a group is created and cannot be cleared during updates. Returned by default. Supports $filter and $orderby. groupofnames MUST cn    groupofnames MUST/MAY member | | members | Account | repeated | Users, contacts, and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported for security groups and mail-enabled security groups), DELETE (supported only for security groups) Read-only. Nullable. TODO accounts (users) only for now, we can add groups with the dedicated message using oneof construct later | | owners | Account | repeated | groupofnames MAY businessCategory groupofnames MAY o groupofnames MAY ou groupofnames MAY owner, SINGLE-VALUE but there might be multiple owners | | description | string | | An optional description for the group. Returned by default. groupofnames MAY description | | gid_number | int64 | | used for exposing the user using ldap posixgroup MUST gidnumber\nposixgroup MAY authPassword posixgroup MAY userPassword posixgroup MAY memberUid -\u0026gt; groupofnames member posixgroup MAY description -\u0026gt; groupofnames | | created_date_time | google.protobuf.Timestamp | | Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created Returned by default. Read-only. | | deleted_date_time | google.protobuf.Timestamp | | For some Azure Active Directory objects (user, group, application), if the object is deleted, it is first logically deleted, and this property is updated with the date and time when the object was deleted. Otherwise this property is null. If the object is restored, this property is updated to null. Returned by default. Read-only. | | expiration_date_time | google.protobuf.Timestamp | | Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group is created. Returned by default. Read-only. | | hide_from_address_lists | bool | | True if the group is not displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups; false otherwise. Default value is false. Returned only on $select. | | visibility | string | | Specifies the visibility of an Office 365 group. Possible values are: Private, Public, or Hiddenmembership; blank values are treated as public. See group visibility options to learn more. Visibility can be set only when a group is created; it is not editable. Returned by default. | | on_premises_sync_enabled | bool | | true* if this group is synced from an on-premises directory; *false* if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter. | | on_premises_immutable_id | string | | This property is used to associate an on-premises LDAP user to the oCIS account object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user’s userPrincipalName (UPN) property. Important: The $ and _ characters cannot be used when specifying this property. Supports $filter. | | on_premises_security_identifier | string | | Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Returned by default. Read-only. | | on_premises_distinguished_name | string | | Contains the on-premises LDAP distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Read-only. | | on_premises_sam_account_name | string | | Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to ocis-accounts. Returned by default. Read-only. | | on_premises_domain_name | string | | Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Returned by default. Read-only. | | on_premises_net_bios_name | string | | Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Returned by default. Read-only. | | on_premises_last_sync_date_time | string | | Indicates the last time at which the group was synced with the on-premises directory. Returned by default. Read-only. Supports $filter. | | on_premises_provisioning_errors | OnPremisesProvisioningError | repeated | Errors when using synchronization during provisioning. |\nIdentities Identities Represents an identity used to sign in to a user account. An identity can be provided by oCIS, by organizations, or by social identity providers such as Facebook, Google, or Microsoft, that are tied to a user account. This enables the user to sign in to the user account with any of those associated identities. They are also used to keep a history of old usernames.\n   Field Type Label Description     sign_in_type string  Specifies the user sign-in types in your directory, such as emailAddress, userName or federated. Here, federated represents a unique identifier for a user from an issuer, that can be in any format chosen by the issuer. Additional validation is enforced on issuer_assigned_id when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.   issuer string  Specifies the issuer of the identity, for example facebook.com. For local accounts (where signInType is not federated), this property is the local B2C tenant default domain name, for example contoso.onmicrosoft.com. For external users from other Azure AD organization, this will be the domain of the federated organization, for example contoso.com. Supports $filter. 512 character limit.   issuer_assigned_id string  Specifies the unique identifier assigned to the user by the issuer. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts). When signInType is set to: * emailAddress, (or starts with emailAddress like emailAddress1) issuerAssignedId must be a valid email address * userName, issuer_assigned_id must be a valid local part of an email address Supports $filter. 512 character limit.    ListAccountsRequest    Field Type Label Description     page_size int32  Optional. The maximum number of accounts to return in the response   page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the accounts to return. If no search criteria is specified then all accounts will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query email=foo@example.com returns accounts with email set to foo@example.com * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns accounts with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; |  ListAccountsResponse    Field Type Label Description     accounts Account repeated The field name should match the noun \u0026ldquo;accounts\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    ListGroupsRequest    Field Type Label Description     page_size int32  Optional. The maximum number of groups to return in the response   page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the groups to return. If no search criteria is specified then all groups will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns groups with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; |  ListGroupsResponse    Field Type Label Description     groups Group repeated The field name should match the noun \u0026ldquo;group\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    ListMembersRequest    Field Type Label Description     page_size int32     page_token string  Optional. A pagination token returned from a previous call to Get that indicates from where search should continue   field_mask google.protobuf.FieldMask  Optional. Used to specify a subset of fields that should be returned by a get operation or modified by an update operation.   query string  Optional. Search criteria used to select the groups to return. If no search criteria is specified then all groups will be returned    TODO update query language Query expressions can be used to restrict results based upon the account properties where the operators =, NOT, AND and OR can be used along with the suffix wildcard symbol *.\nThe string properties in a query expression should use escaped quotes for values that include whitespace to prevent unexpected behavior.\nSome example queries are:\n Query display_name=Th* returns accounts whose display_name starts with \u0026ldquo;Th\u0026rdquo; * Query display_name=\\\\\u0026quot;Test String\\\\\u0026quot; returns groups with display names that include both \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;String\u0026rdquo; | | id | string | | The id of the group to list members from |  ListMembersResponse    Field Type Label Description     members Account repeated The field name should match the noun \u0026ldquo;members\u0026rdquo; in the method name. There will be a maximum number of items returned based on the page_size field in the request   next_page_token string  Token to retrieve the next page of results, or empty if there are no more results in the list    OnPremisesProvisioningError    Field Type Label Description     category string  Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.   occurred_date_time google.protobuf.Timestamp  The date and time at which the error occurred.   property_causing_error string  Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress   value string  Value of the property causing the error.    PasswordProfile    Field Type Label Description     password string  The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next login. The password must satisfy minimum requirements as specified by the user’s passwordPolicies property. By default, a strong password is required.   last_password_change_date_time google.protobuf.Timestamp  The time when this account last changed their password.   password_policies string repeated Specifies password policies for the user. This value is an enumeration with one possible value being “DisableStrongPassword”, which allows weaker passwords than the default policy to be specified. “DisablePasswordExpiration” can also be specified.   force_change_password_next_sign_in bool  true* if the user must change her password on the next login; otherwise false.   force_change_password_next_sign_in_with_mfa bool  If true, at next sign-in, the user must perform a multi-factor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multi-factor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false.    RebuildIndexRequest RebuildIndexResponse RemoveMemberRequest    Field Type Label Description     group_id string  The id of the group to remove a member from   account_id string  The account id to remove    UpdateAccountRequest    Field Type Label Description     account Account  The account resource which replaces the resource on the server   update_mask google.protobuf.FieldMask  The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask    UpdateGroupRequest    Field Type Label Description     group Group  The group resource which replaces the resource on the server   update_mask google.protobuf.FieldMask  The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask    AccountsService Follow recommended Methods for rpc APIs https://cloud.google.com/apis/design/resources?hl=de#methods https://cloud.google.com/apis/design/standard_methods?hl=de#list https://cloud.google.com/apis/design/naming_convention?hl=de\n   Method Name Request Type Response Type Description     ListAccounts ListAccountsRequest ListAccountsResponse Lists accounts   GetAccount GetAccountRequest Account Gets an account   CreateAccount CreateAccountRequest Account Creates an account   UpdateAccount UpdateAccountRequest Account Updates an account   DeleteAccount DeleteAccountRequest .google.protobuf.Empty Deletes an account    GroupsService    Method Name Request Type Response Type Description     ListGroups ListGroupsRequest ListGroupsResponse Lists groups   GetGroup GetGroupRequest Group Gets an groups   CreateGroup CreateGroupRequest Group Creates a group   UpdateGroup UpdateGroupRequest Group Updates a group   DeleteGroup DeleteGroupRequest .google.protobuf.Empty Deletes a group   AddMember AddMemberRequest Group group:addmember https://docs.microsoft.com/en-us/graph/api/group-post-members?view=graph-rest-1.0\u0026amp;tabs=http   RemoveMember RemoveMemberRequest Group group:removemember https://docs.microsoft.com/en-us/graph/api/group-delete-members?view=graph-rest-1.0   ListMembers ListMembersRequest ListMembersResponse group:listmembers https://docs.microsoft.com/en-us/graph/api/group-list-members?view=graph-rest-1.0    IndexService    Method Name Request Type Response Type Description     RebuildIndex RebuildIndexRequest RebuildIndexResponse     Scalar Value Types    .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":76,"href":"/extensions/settings/grpc/","title":"GRPC API","parent":"Settings","content":"    settings.proto  AddSettingToBundleRequest AddSettingToBundleResponse AssignRoleToUserRequest AssignRoleToUserResponse Bool Bundle GetBundleRequest GetBundleResponse GetPermissionByIDRequest GetPermissionByIDResponse GetValueByUniqueIdentifiersRequest GetValueRequest GetValueResponse Identifier Int ListBundlesRequest ListBundlesResponse ListOption ListOptionValue ListPermissionsByResourceRequest ListPermissionsByResourceResponse ListRoleAssignmentsRequest ListRoleAssignmentsResponse ListValue ListValuesRequest ListValuesResponse MultiChoiceList Permission RemoveRoleFromUserRequest RemoveSettingFromBundleRequest Resource SaveBundleRequest   requests and responses for settings bundles  SaveBundleResponse SaveValueRequest SaveValueResponse Setting SingleChoiceList String UserRoleAssignment Value ValueWithIdentifier Bundle.Type Permission.Constraint Permission.Operation Resource.Type BundleService PermissionService RoleService ValueService   Scalar Value Types     settings.proto AddSettingToBundleRequest    Field Type Label Description     bundle_id string     setting Setting      AddSettingToBundleResponse    Field Type Label Description     setting Setting      AssignRoleToUserRequest    Field Type Label Description     account_uuid string     role_id string  the role_id is a bundle_id internally    AssignRoleToUserResponse    Field Type Label Description     assignment UserRoleAssignment      Bool    Field Type Label Description     default bool     label string      Bundle    Field Type Label Description     id string     name string     type Bundle.Type     extension string     display_name string     settings Setting repeated    resource Resource      GetBundleRequest    Field Type Label Description     bundle_id string      GetBundleResponse    Field Type Label Description     bundle Bundle      GetPermissionByIDRequest    Field Type Label Description     permission_id string      GetPermissionByIDResponse    Field Type Label Description     permission Permission      GetValueByUniqueIdentifiersRequest    Field Type Label Description     account_uuid string     setting_id string      GetValueRequest    Field Type Label Description     id string      GetValueResponse    Field Type Label Description     value ValueWithIdentifier      Identifier    Field Type Label Description     extension string     bundle string     setting string      Int    Field Type Label Description     default int64     min int64     max int64     step int64     placeholder string      ListBundlesRequest    Field Type Label Description     bundle_ids string repeated     ListBundlesResponse    Field Type Label Description     bundles Bundle repeated     ListOption    Field Type Label Description     value ListOptionValue     default bool     display_value string      ListOptionValue    Field Type Label Description     string_value string     int_value int64      ListPermissionsByResourceRequest    Field Type Label Description     resource Resource      ListPermissionsByResourceResponse    Field Type Label Description     permissions Permission repeated     ListRoleAssignmentsRequest    Field Type Label Description     account_uuid string      ListRoleAssignmentsResponse    Field Type Label Description     assignments UserRoleAssignment repeated     ListValue    Field Type Label Description     values ListOptionValue repeated     ListValuesRequest    Field Type Label Description     bundle_id string     account_uuid string      ListValuesResponse    Field Type Label Description     values ValueWithIdentifier repeated     MultiChoiceList    Field Type Label Description     options ListOption repeated     Permission    Field Type Label Description     operation Permission.Operation     constraint Permission.Constraint      RemoveRoleFromUserRequest    Field Type Label Description     id string      RemoveSettingFromBundleRequest    Field Type Label Description     bundle_id string     setting_id string      Resource    Field Type Label Description     type Resource.Type     id string      SaveBundleRequest  requests and responses for settings bundles    Field Type Label Description     bundle Bundle      SaveBundleResponse    Field Type Label Description     bundle Bundle      SaveValueRequest    Field Type Label Description     value Value      SaveValueResponse    Field Type Label Description     value ValueWithIdentifier      Setting    Field Type Label Description     id string     name string     display_name string     description string     int_value Int     string_value String     bool_value Bool     single_choice_value SingleChoiceList     multi_choice_value MultiChoiceList     permission_value Permission     resource Resource      SingleChoiceList    Field Type Label Description     options ListOption repeated     String    Field Type Label Description     default string     required bool     min_length int32     max_length int32     placeholder string      UserRoleAssignment    Field Type Label Description     id string  id is generated upon saving the assignment   account_uuid string     role_id string  the role_id is a bundle_id internally    Value    Field Type Label Description     id string  id is the id of the Value. It is generated on saving it.   bundle_id string     setting_id string  setting_id is the id of the setting from within its bundle.   account_uuid string     resource Resource     bool_value bool     int_value int64     string_value string     list_value ListValue      ValueWithIdentifier    Field Type Label Description     identifier Identifier     value Value      Bundle.Type    Name Number Description     TYPE_UNKNOWN 0    TYPE_DEFAULT 1    TYPE_ROLE 2     Permission.Constraint    Name Number Description     CONSTRAINT_UNKNOWN 0    CONSTRAINT_OWN 1    CONSTRAINT_SHARED 2    CONSTRAINT_ALL 3     Permission.Operation    Name Number Description     OPERATION_UNKNOWN 0    OPERATION_CREATE 1    OPERATION_READ 2    OPERATION_UPDATE 3    OPERATION_DELETE 4    OPERATION_WRITE 5 WRITE is a combination of CREATE and UPDATE   OPERATION_READWRITE 6 READWRITE is a combination of READ and WRITE    Resource.Type    Name Number Description     TYPE_UNKNOWN 0    TYPE_SYSTEM 1    TYPE_FILE 2    TYPE_SHARE 3    TYPE_SETTING 4    TYPE_BUNDLE 5    TYPE_USER 6    TYPE_GROUP 7     BundleService    Method Name Request Type Response Type Description     SaveBundle SaveBundleRequest SaveBundleResponse    GetBundle GetBundleRequest GetBundleResponse    ListBundles ListBundlesRequest ListBundlesResponse    AddSettingToBundle AddSettingToBundleRequest AddSettingToBundleResponse    RemoveSettingFromBundle RemoveSettingFromBundleRequest .google.protobuf.Empty     PermissionService    Method Name Request Type Response Type Description     ListPermissionsByResource ListPermissionsByResourceRequest ListPermissionsByResourceResponse    GetPermissionByID GetPermissionByIDRequest GetPermissionByIDResponse     RoleService    Method Name Request Type Response Type Description     ListRoles ListBundlesRequest ListBundlesResponse    ListRoleAssignments ListRoleAssignmentsRequest ListRoleAssignmentsResponse    AssignRoleToUser AssignRoleToUserRequest AssignRoleToUserResponse    RemoveRoleFromUser RemoveRoleFromUserRequest .google.protobuf.Empty     ValueService    Method Name Request Type Response Type Description     SaveValue SaveValueRequest SaveValueResponse    GetValue GetValueRequest GetValueResponse    ListValues ListValuesRequest ListValuesResponse    GetValueByUniqueIdentifiers GetValueByUniqueIdentifiersRequest GetValueResponse     Scalar Value Types    .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":77,"href":"/extensions/store/grpc/","title":"GRPC API","parent":"Store","content":"    store.proto  DatabasesRequest DatabasesResponse DeleteOptions DeleteRequest DeleteResponse Field ListOptions ListRequest ListResponse ReadOptions ReadOptions.WhereEntry ReadRequest ReadResponse Record Record.MetadataEntry TablesRequest TablesResponse WriteOptions WriteRequest WriteResponse Store   Scalar Value Types     store.proto DatabasesRequest DatabasesResponse    Field Type Label Description     databases string repeated     DeleteOptions    Field Type Label Description     database string     table string      DeleteRequest    Field Type Label Description     key string     options DeleteOptions      DeleteResponse Field    Field Type Label Description     type string  type of value e.g string, int, int64, bool, float64   value string  the actual value    ListOptions    Field Type Label Description     database string     table string     prefix string     suffix string     limit uint64     offset uint64      ListRequest    Field Type Label Description     options ListOptions      ListResponse    Field Type Label Description     keys string repeated     ReadOptions    Field Type Label Description     database string     table string     prefix bool     suffix bool     limit uint64     offset uint64     where ReadOptions.WhereEntry repeated     ReadOptions.WhereEntry    Field Type Label Description     key string     value Field      ReadRequest    Field Type Label Description     key string     options ReadOptions      ReadResponse    Field Type Label Description     records Record repeated     Record    Field Type Label Description     key string  key of the recorda   value bytes  value in the record   expiry int64  time.Duration (signed int64 nanoseconds)   metadata Record.MetadataEntry repeated the associated metadata    Record.MetadataEntry    Field Type Label Description     key string     value Field      TablesRequest    Field Type Label Description     database string      TablesResponse    Field Type Label Description     tables string repeated     WriteOptions    Field Type Label Description     database string     table string     expiry int64  time.Time   ttl int64  time.Duration    WriteRequest    Field Type Label Description     record Record     options WriteOptions      WriteResponse Store    Method Name Request Type Response Type Description     Read ReadRequest ReadResponse    Write WriteRequest WriteResponse    Delete DeleteRequest DeleteResponse    List ListRequest ListResponse stream    Databases DatabasesRequest DatabasesResponse    Tables TablesRequest TablesResponse     Scalar Value Types    .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":78,"href":"/extensions/thumbnails/grpc/","title":"GRPC API","parent":"Thumbnails","content":"    thumbnails.proto  GetRequest GetResponse GetRequest.FileType ThumbnailService   Scalar Value Types     thumbnails.proto GetRequest A request to retrieve a thumbnail\n   Field Type Label Description     filepath string  The path to the source image   filetype GetRequest.FileType  The type to which the thumbnail should get encoded to.   etag string  The etag of the source image   width int32  The width of the thumbnail   height int32  The height of the thumbnail   authorization string  The authorization token   username string  The user requesting the resource.    GetResponse The service response\n   Field Type Label Description     thumbnail bytes  The thumbnail as a binary   mimetype string  The mimetype of the thumbnail    GetRequest.FileType The file types to which the thumbnail cna get encoded to.\n   Name Number Description     PNG 0 Represents PNG type   JPG 1 Represents JPG type    ThumbnailService A Service for handling thumbnail generation\n   Method Name Request Type Response Type Description     GetThumbnail GetRequest GetResponse Generates the thumbnail and returns it.    Scalar Value Types    .proto Type Notes C++ Java     double   double double   float   float float   int32  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead. int32 int   int64  Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead. int64 long   uint32  Uses variable-length encoding. uint32 int   uint64  Uses variable-length encoding. uint64 long   sint32  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int   sint64  Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long   fixed32  Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int   fixed64  Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long   sfixed32  Always four bytes. int32 int   sfixed64  Always eight bytes. int64 long   bool   bool boolean   string  A string must always contain UTF-8 encoded or 7-bit ASCII text. string String   bytes  May contain any arbitrary sequence of bytes. string ByteString    "},{"id":79,"href":"/extensions/ocis_hello/configuration-with-ocis/","title":"Running","parent":"Hello","content":"Configuring ocis-hello with ocis We will need various services to run ocis\nRunning a ldap server in docker container We will use the ldap server as users provider for ocis.\ndocker run --hostname ldap.my-company.com \\ -e LDAP_TLS_VERIFY_CLIENT=never \\ -e LDAP_DOMAIN=owncloud.com \\ -e LDAP_ORGANISATION=ownCloud \\ -e LDAP_ADMIN_PASSWORD=admin \\ --name docker-slapd \\ -p 127.0.0.1:389:389 \\ -p 636:636 -d osixia/openldap Running a redis server in a docker container Redis will be used by ocis for various caching purposes.\ndocker run -e REDIS_DATABASES=1 -p 6379:6379 -d webhippie/redis:latest Running ocis In order to run this extension we will need to run ocis first. For that clone and build the ocis single binary from the github repo https://github.com/owncloud/ocis. After that we will need to create a config file for phoenix so that we can load the hello app in the frontend. Create a file phoenix-config.json with the following contents.\n{ \u0026#34;server\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;theme\u0026#34;: \u0026#34;owncloud\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;, \u0026#34;openIdConnect\u0026#34;: { \u0026#34;metadata_url\u0026#34;: \u0026#34;https://localhost:9200/.well-known/openid-configuration\u0026#34;, \u0026#34;authority\u0026#34;: \u0026#34;https://localhost:9200\u0026#34;, \u0026#34;client_id\u0026#34;: \u0026#34;phoenix\u0026#34;, \u0026#34;response_type\u0026#34;: \u0026#34;code\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;openid profile email\u0026#34; }, \u0026#34;apps\u0026#34;: [ \u0026#34;files\u0026#34;, \u0026#34;draw-io\u0026#34;, \u0026#34;pdf-viewer\u0026#34;, \u0026#34;markdown-editor\u0026#34;, \u0026#34;media-viewer\u0026#34; ], \u0026#34;external_apps\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;hello\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;http://localhost:9105/hello.js\u0026#34;, \u0026#34;config\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } } ] } Here we can add the url for the js file from where the hello app will be loaded.\nAfter that we will need a configuration file for ocis where we can specify the path for the hello app in the backend. For this you can use the existing proxy-example.json file from the ocis-proxy repo. Just add an extra endpoint at the end for the hello app.\n{ \u0026#34;endpoint\u0026#34;: \u0026#34;/api/v0/greet\u0026#34;, \u0026#34;backend\u0026#34;: \u0026#34;http://localhost:9105\u0026#34; } With all this in place we can finally start ocis. But first we will need to set some configuration variables.\nexport REVA_USERS_DRIVER=ldap export REVA_LDAP_HOSTNAME=localhost export REVA_LDAP_PORT=636 export REVA_LDAP_BASE_DN=\u0026#39;dc=owncloud,dc=com\u0026#39; export REVA_LDAP_USERFILTER=\u0026#39;(\u0026amp;(objectclass=posixAccount)(cn=%s))\u0026#39; export REVA_LDAP_GROUPFILTER=\u0026#39;(\u0026amp;(objectclass=posixGroup)(cn=%s))\u0026#39; export REVA_LDAP_BIND_DN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export REVA_LDAP_BIND_PASSWORD=admin export REVA_LDAP_SCHEMA_UID=uid export REVA_LDAP_SCHEMA_MAIL=mail export REVA_LDAP_SCHEMA_DISPLAYNAME=displayName export REVA_LDAP_SCHEMA_CN=cn export LDAP_URI=ldap://localhost export LDAP_BINDDN=\u0026#39;cn=admin,dc=owncloud,dc=com\u0026#39; export LDAP_BINDPW=admin export LDAP_BASEDN=\u0026#39;dc=owncloud,dc=com\u0026#39; In addition to all these we will also need to set the config files we just modified. For that set these variables with the path to the config files.\nexport PHOENIX_WEB_CONFIG=\u0026lt;path to phoenix config file\u0026gt; export OCIS_CONFIG_FILE=\u0026lt;path to ocis proxy config file\u0026gt; And finally start the ocis server\nbin/ocis server After this we will need to start the ocis-hello service. For that just build ocis-hello binary.\ncd ocis-hello make And Run the service\nbin/ocis-hello server "},{"id":80,"href":"/extensions/ocis_hello/settings/","title":"Settings","parent":"Hello","content":"The ocis-settings service exposes an endpoint for registering so called settings bundles. This gives control to every service to define settings that are needed for fulfilling it\u0026rsquo;s intended purpose. There are different types of settings available out of the box - hopefully those already fit your needs. The settings defined through settings bundles can be changed by authenticated users through an ocis-web extension, which is also provided by the settings service. As a result, your service only has to register a settings bundle and oCIS takes care of everything else. Your service can simply use the settings values that were set by users.\nWith this chapter we want to show you, how to register a settings bundle and how to use the respective values that were set by users. We do this by customizing the greeter phrase from our greeter service in ocis-hello.\nYou can find the source code, especially how it\u0026rsquo;s integrated into the service, in the following files:\n pkg/service/v0/service.go for the requests, pkg/command/server.go for the integration of RegisterSettingsBundles into the service start.  Register settings bundle In order to register a settings bundle, you need to create a request message and then send it to the BundleService of ocis-settings through a gRPC call.\nCreate request request := \u0026amp;settings.SaveSettingsBundleRequest{ SettingsBundle: \u0026amp;settings.SettingsBundle{ Identifier: \u0026amp;settings.Identifier{ Extension: \u0026#34;ocis-hello\u0026#34;, BundleKey: \u0026#34;greeting\u0026#34;, }, DisplayName: \u0026#34;Greeting\u0026#34;, Settings: []*settings.Setting{ { SettingKey: \u0026#34;phrase\u0026#34;, DisplayName: \u0026#34;Phrase\u0026#34;, Description: \u0026#34;Phrase for replies on the greet request\u0026#34;, Value: \u0026amp;settings.Setting_StringValue{ StringValue: \u0026amp;settings.StringSetting{ Required: true, Default: \u0026#34;Hello\u0026#34;, MaxLength: 15, }, }, }, }, }, } The request holds only one field, which is a SettingsBundle. It consists of an Identifier, a DisplayName and a list of Settings.\n The Extension and BundleKey inside the Identifier are required and have to be alphanumeric (- and _ are allowed as well). The Identifier has to stay stable - if you change it, existing settings will not be migrated to the new identifier. The DisplayName is required and may contain any UTF8 character. It will be shown in the settings user frontend in a generated form, so please try to be descriptive. You can change the DisplayName at any time. Settings is the list of settings you want to make available with this settings bundle. In this example, there is only one setting defined - a string setting for the phrase our greeter uses in the response. You can explore more types of settings in the settings package. All of them come with their own characteristics and validations. For the phrase setting we decided to set it to Required, so that it can\u0026rsquo;t be empty, and to set a MaxLength of 15 characters, so that the phrase is not too long. The SettingKey is particularly important, as this is used for referencing the setting in other requests. It has to fulfill the same rules as the other Identifier attributes. Please also take the time to set a Description, in order to provide accessibility in the generated forms as good as possible.  Send request to ocis-settings This request message can be sent to the BundleService of ocis-settings like this:\nbundleService := settings.NewBundleService(\u0026#34;com.owncloud.api.settings\u0026#34;, mclient.DefaultClient) response, err := bundleService.SaveSettingsBundle(context.Background(), request) We run this request on every start of ocis-hello so that the settings service always has the most recent version of the settings bundle.\nUse settings value We registered the greeter phrase setting for a reason: We want to allow the authenticated user to customize how they want to be greeted by ocis-hello. In order to do this, we need to ask ocis-settings on every request, what the greeter phrase of the authenticated user is.\nAccount UUID The settings request has one important prerequisite: As our service is stateless, we need to know the account UUID of the authenticated user the incoming POST request to our greeter service is coming from. As that POST request is coming through ocis-proxy, there is an HTTP header x-access-token that holds a JWT with the account UUID in it. We just have to dismantle the JWT to get the UUID. There is a middleware for that in ocis-pkg. You can look up the server configuration for that middleware in pkg/server/http/server.go. In essence, it dismantles the x-access-token, extracts the account UUID and makes it available in the context. It can be subsequently retrieved from the context like this:\nownAccountUUID := ctx.Value(middleware.UUIDKey).(string) Create request With the account UUID we can build an Identifier for the request to ocis-settings as follows:\nrequest := \u0026amp;settings.GetSettingsValueRequest{ Identifier: \u0026amp;settings.Identifier{ Extension: \u0026#34;ocis-hello\u0026#34;, BundleKey: \u0026#34;greeting\u0026#34;, SettingKey: \u0026#34;phrase\u0026#34;, AccountUuid: ownAccountUUID, }, } The Identifier for getting a value from ocis-settings needs the three fields for extension, bundle and setting that we chose in the settings bundle. The fourth field is the UUID of the authenticated user.\nSend request to ocis-settings This request message can be sent to the ValueService of ocis-settings like this:\nvalueService := settings.NewValueService(\u0026#34;com.owncloud.api.settings\u0026#34;, mclient.DefaultClient) response, err := valueService.GetSettingsValue(ctx, request) If this request is successful we will have a - possibly customized - greeting phrase. It could also be the default value, if the user didn\u0026rsquo;t customize their phrase in the settings frontend.\nConclusion You have learned how to register settings bundles, how to get the account UUID of the authenticated user and how to query the settings service for settings values.\n"},{"id":81,"href":"/extensions/ocis_hello/testing/","title":"Testing","parent":"Hello","content":"This repository provides a general guideline for creating tests for the ocis extensions. The tests can be written in various levels from unit, integration, and end-to-end. It is not essential to write tests on all these levels as it can be redundant in some cases. This repository provides a reference for all levels of tests.\nUnit tests Unit tests generally live inside *_test.go files in the /pkg directory. One such example in this extension is in /pkg/service/v0/service_test.go. Similarly the unit test for the protobuf generated code can also be written just like in /pkg/proto/hello.pb_test.go.\nIntegration tests There are mainly 2 types of integration tests, namely HTTP tests, and GRPC tests. These tests mostly live in /pkg/proto directory where all the protobuf definitions are specified. The examples for the HTTP integration tests are in /pkg/proto/hello.pb.web_test.go whereas the GRPC tests are in /pkg/proto/hello.pb.micro_test.go.\nEnd-to-End tests For extensions with an UI, we can also write end-to-end tests using the Nightwatch test framework. These tests live in /ui/tests directory. We can reuse already existing Gherkin steps from the phoenix tests here.\nRunning the tests Unit and integration tests The unit and integration tests are run using the simple go test command. If you wish to run all the tests with the coverage you can just use make command.\nmake test You can also run a specific file with the go test command\ngo test \u0026lt;path to package or file\u0026gt; End-to-End tests Running end-to-end tests is a bit more complicated than unit and integration tests. First of all we will need a complete ocis setup with ocis-hello running. For that refer to this guide.\nAfter that, We need to set the proper test environment. To run the end-to-end tests, first-of-all we need the phoenix repository where all the test infrastructure exists. So, clone the phoenix repository in your system in any location.\ngit clone https://github.com/owncloud/phoenix $HOME/phoenix Next we will need to start the selenium server which will control the browser. There is a script in the phoenix repo that starts the selenium server, just run that to start selenium.\ncd $HOME/phoenix yarn run selenium Now we can run the tests. The tests will take several configuration variables which can be found here. Without configuration, most of the defaults will work. We just need make sure to set these values through env variable.\nexport PHOENIX_PATH=$HOME/phoenix export OCIS_SKELETON_DIR=\u0026lt;path to the skeleton directory\u0026gt; export PHOENIX_CONFIG=\u0026lt;path to the config.json file used by phoenix\u0026gt; The phoenix path should be set to the directory where the phoenix source files are. Our tests use the existing infrastructure from the phoenix directory to run the tests.\nThe skeleton directory for the webui tests can be found in the testing app. You can just clone that repository in your local machine and point the env variable to the correct path.\nWhile running ocis we should always use a config file for phoenix because our tests will read this file and sometimes even change it which cannot be done if you use env variables or the default values.\nWith all this in place we can just run the tests with a simple make command. First go to the ocis-hello repository\ncd \u0026lt;path to ocis-hello\u0026gt; Then Simply run\nmake test-acceptance-webui To run just one feature you can run\nmake test-acceptance-webui \u0026lt;path-to-feature file\u0026gt;:\u0026lt;line-number\u0026gt; "},{"id":82,"href":"/extensions/settings/values/","title":"Settings Values","parent":"Settings","content":"A Settings Value is the value an authenticated user has chosen for a specific setting, defined in a settings bundle. For choosing settings values as a user the sole entry point is the ocis-web extension provided by this service.\nIdentifying settings values A settings value is uniquely identified by four attributes. Three of them are coming from the definition of the setting within it\u0026rsquo;s settings bundle (see Settings Bundles for an example). The fourth identifies the user.\n extension: Key of the extension that registered the settings bundle, bundleKey: Key of the settings bundle, settingKey: Key of the setting as defined within the bundle, accountUuid: The UUID of the authenticated user who has saved the setting.  When requests are going through ocis-proxy, the accountUuid attribute can be set to the static keyword me instead of using a real UUID. ocis-proxy will take care of minting the UUID of the authenticated user into a JWT, providing it in the HTTP header as x-access-token. That UUID is then used in this service, to replace me with the actual UUID of the authenticated user.  Example of stored settings values { \u0026#34;values\u0026#34;: { \u0026#34;language\u0026#34;: { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;settingKey\u0026#34;: \u0026#34;language\u0026#34;, \u0026#34;accountUuid\u0026#34;: \u0026#34;5681371f-4a6e-43bc-8bb5-9c9237fa9c58\u0026#34; }, \u0026#34;listValue\u0026#34;: { \u0026#34;values\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;de\u0026#34; } ] } }, \u0026#34;timezone\u0026#34;: { \u0026#34;identifier\u0026#34;: { \u0026#34;extension\u0026#34;: \u0026#34;ocis-accounts\u0026#34;, \u0026#34;bundleKey\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;settingKey\u0026#34;: \u0026#34;timezone\u0026#34;, \u0026#34;accountUuid\u0026#34;: \u0026#34;5681371f-4a6e-43bc-8bb5-9c9237fa9c58\u0026#34; }, \u0026#34;listValue\u0026#34;: { \u0026#34;values\u0026#34;: [ { \u0026#34;stringValue\u0026#34;: \u0026#34;Europe/Berlin\u0026#34; } ] } } } } gRPC endpoints The obvious way of modifying settings is the ocis-web extension, as described earlier. However, services can use the respective gRPC endpoints of the ValueService to query and modify settings values as well. The gRPC endpoints require the same identifier attributes as described above, so for making a request to the ValueService you will have to make sure that the accountUuid of the authenticated user is available in your service at the time of the request.\n"},{"id":83,"href":"/ocis/development/tracing/","title":"Tracing","parent":"Development","content":"  By default, we use Jaeger for request tracing within oCIS. You can follow these steps to get started:\n Start Jaeger by using the all-in-one docker image: docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 14250:14250 \\ -p 9411:9411 \\ jaegertracing/all-in-one:1.17  Every single oCIS service has its own environment variables for enabling and configuring tracing.  You can enable and configure tracing on each service individually. For example, enable tracing in Reva when starting the oCIS single binary like this: REVA_TRACING_ENABLED=true \\ REVA_TRACING_ENDPOINT=localhost:6831 \\ REVA_TRACING_COLLECTOR=http://localhost:14268/api/traces \\ ./bin/ocis server  Enabling and configuring tracing on oCIS itself will forward the configuration to all services: OCIS_TRACING_ENABLED=true \\ OCIS_TRACING_ENDPOINT=localhost:6831 \\ OCIS_TRACING_COLLECTOR=http://localhost:14268/api/traces \\ ./bin/ocis server If you want to set individual tracing configuration for each service, make sure to set OCIS_TRACING_ENABLED=false.\n   Make the actual request that you want to trace. Open up the Jaeger UI to analyze request traces.  For more information on Jaeger, please refer to their Documentation.\n"},{"id":84,"href":"/clients/web/deployments/","title":"Deployments","parent":"ownCloud Web","content":"Showcases of different scenarios of deploying ownCloud Web.\n"},{"id":85,"href":"/extensions/storage/releasing/","title":"Releasing","parent":"Storage","content":"    Preparation Release     To release a new version of the storage submodule, you have to follow a few simple steps.\nPreparation  Before releasing, make sure that reva has been updated to the desired version  Release  Check out master git checkout master git pull origin master Create a new tag (preferably signed) and replace the version number accordingly. Prefix the tag with the submodule storage/v. git tag -s storage/vx.x.x -m \u0026#34;release vx.x.x\u0026#34; git push origin storage/vx.x.x Wait for CI and check that the GitHub release was published.  Congratulations, you just released the storage submodule!\n"},{"id":86,"href":"/clients/web/testing/","title":"Running acceptance tests","parent":"ownCloud Web","content":"    Setup Selenium  Setup using Docker Setup using Docker Desktop for Mac Setup using standalone Selenium server   Setup backend  ownCloud 10 oCIS   Setup ownCloud Web Run tests  with oC10 backend with oCIS backend Visual Regression Testing  Running the visual regression tests Updating the snapshots     Available settings to be set by environment variables Tips  too many open files   Acceptance Tests in CI  1. web Repo 2. ocis Repo       Setup Selenium There are multiple ways to run Selenium:\n Setup using Docker Setup using Docker Desktop for Mac Setup using a standalone Selenium server  Setup using Docker   Set the environment variables SELENIUM_HOST as localhost and SERVER_HOST in the format http://\u0026lt;ip_addr\u0026gt;:9100.\n  If you are a Linux user, run docker run --rm -d --network=\u0026quot;host\u0026quot; -v /dev/shm:/dev/shm -v ${REMOTE_UPLOAD_DIR:-$PWD/tests/acceptance/filesForUpload}:${LOCAL_UPLOAD_DIR:-/uploads}:ro --name web-tests-selenium selenium/standalone-chrome-debug\n  If you are a Mac user, run docker run --rm -d -p ${SELENIUM_PORT:-4444}:4444 -p 5900:5900 -v /dev/shm:/dev/shm -v ${REMOTE_UPLOAD_DIR:-$PWD/tests/acceptance/filesForUpload}:${LOCAL_UPLOAD_DIR:-/uploads}:ro --name web-tests-selenium selenium/standalone-chrome-debug\n This command creates a docker container which uses port forwarding instead of host networking which is not supported on Mac  If you are running selenium with these docker commands, you can run these commands from the web folder, then you wont need to set REMOTE_UPLOAD_DIR.\n  Setup using Docker Desktop for Mac In order to run acceptance tests with selenium running in Docker Desktop for Mac while having ownCloud Server and Web running as services on the host machine, localhost will not work as URL. Use the Docker host ip 172.17.0.1 or its alias host.docker.internal instead. This requires adjusting all relevant config files to use host.docker.internal instead of localhost (config.json in Web and config/config.php in oC10) and changing the web OIDC-callback url. Set the SERVER_HOST and BACKEND_HOST environment variables accordingly. In order to use the same url for development on the host machine, define it as an alias to 127.0.0.1 in /etc/hosts. After all these changes Web will be accessible at http://host.docker.internal:9100 for both development and acceptance tests.\nSetup using standalone Selenium server When running a standalone Selenium server, make sure to set the environment variable SELENIUM_HOST, SELENIUM_PORT and LOCAL_UPLOAD_DIR accordingly.\nSetup backend ownCloud 10  set up the ownCloud 10 backend clone and install the testing app into ownCloud  oCIS In order to run the acceptance tests you need to run ocis using the owncloud storage driver. Also, you need to enable basic auth on the server with these environment variables.\nPROXY_ENABLE_BASIC_AUTH=true STORAGE_HOME_DRIVER=owncloud STORAGE_USERS_DRIVER=owncloud\n  set up the oCIS backend\n if you are a Mac user, you need to start the server with additional environment variables: STORAGE_HOME_DATA_SERVER_URL='http://host.docker.internal:9155/data' STORAGE_DATAGATEWAY_PUBLIC_URL='https://host.docker.internal:9200/data' STORAGE_USERS_DATA_SERVER_URL='http://host.docker.internal:9158/data' STORAGE_FRONTEND_PUBLIC_URL='https://host.docker.internal:9200' PROXY_ENABLE_BASIC_AUTH=true PROXY_OIDC_ISSUER='https://host.docker.internal:9200' IDP_INSECURE='true' IDP_IDENTIFIER_REGISTRATION_CONF='\u0026lt;web-path\u0026gt;/tests/acceptance/mac-identifier-registration.yml' IDP_ISS='https://host.docker.internal:9200' IDP_TLS='true' (\u0026lt;web-path\u0026gt; needs to be replaced with the your local clone of ownCloud Web)    oCIS also uses redis for caching, so run redis with this command\ndocker run -e REDIS_DATABASES=1 -p 6379:6379 -d webhippie/redis:latest\n  Setup ownCloud Web  build Web start the Web server if you are running web against the oCIS backend, clone the testing app git clone git@github.com:owncloud/testing.git tests/testing-app  Run tests   set SERVER_HOST to point at the URL where the Web web pages are served, for example \u0026ldquo;http://localhost:9100\u0026rdquo;\n  set BACKEND_HOST to point to the URL of the backend, for example \u0026ldquo;http://localhost/owncloud/\u0026rdquo;\n  to be able to run federation tests, additional setup is needed:\n Install and set up a second ownCloud server-instance that is accessible by a different URL. That second server-instance must have its own database and data directory. clone and install the testing app into the second ownCloud server-instance from http://github.com/owncloud/testing . when running the acceptance tests use REMOTE_BACKEND_HOST environment variable to define its address, for example, REMOTE_BACKEND_HOST=http://\u0026lt;ip_address_of_second_ownCloud_server-instance\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-files-to-test\u0026gt;    set the SELENIUM_HOST environment variable to your host that runs selenium, mostly localhost\n  set the SELENIUM_PORT environment variable to your selenium port, mostly 4444\n  set the OCIS_SKELETON_DIR when running the tests on ocis pointing to the skeleton files available here. This is handled automatically by the testrunner while running the tests in oc10.\n  The feature files are located in the \u0026ldquo;tests/acceptance/features\u0026rdquo; subdirectories.\nsee available settings for further setup if needed\nwith oC10 backend  run yarn test:acceptance:oc10 \u0026lt;feature-files-to-test\u0026gt;  with oCIS backend  run yarn test:acceptance:ocis \u0026lt;feature-files-to-test\u0026gt; If you are a mac user, run STORAGE_HOME_DATA_SERVER_URL='http://host.docker.internal:9155/data' STORAGE_DATAGATEWAY_PUBLIC_URL='https://host.docker.internal:9200/data' STORAGE_USERS_DATA_SERVER_URL='http://host.docker.internal:9158/data' STORAGE_FRONTEND_PUBLIC_URL='https://host.docker.internal:9200' PROXY_ENABLE_BASIC_AUTH=true PROXY_OIDC_ISSUER='https://host.docker.internal:9200' IDP_INSECURE='true' IDP_IDENTIFIER_REGISTRATION_CONF='./tests/acceptance/mac-identifier-registration.yml' IDP_ISS='https://host.docker.internal:9200' IDP_TLS='true' yarn test:acceptance:ocis \u0026lt;feature-files-to-test\u0026gt;  Visual Regression Testing The test suite consists of snapshots of UI components which can be compared for visual regression testing when running the acceptance tests. These comparisons are done in the existing scenarios. You can check the existing snapshots of the components in the directory /tests/vrt/baseline.\nRunning the visual regression tests When you run the acceptance tests as usual, all the visual regression comparisons are skipped. To run the acceptance test suite with the visual comparison enabled you need to set the env variable, VISUAL_TEST to true\neg.\nVISUAL_TEST=true SERVER_HOST=http://\u0026lt;server_host\u0026gt; BACKEND_HOST=http://\u0026lt;backend_host\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-file-to-test\u0026gt; Updating the snapshots If there is some change in the components, and you want to update the snapshots of the components you can run the tests with UPDATE_VRT_SCREENSHOTS set to true. When this env variable is set, the testrunner will ignore if the visual comparison fails and updates the baseline images with the latest images if the comparison fails.\neg.\nVISUAL_TEST=true UPDATE_VRT_SCREENSHOTS=true SERVER_HOST=http://\u0026lt;server_host\u0026gt; BACKEND_HOST=http://\u0026lt;backend_host\u0026gt; yarn test:acceptance:oc10 \u0026lt;feature-file-to-test\u0026gt; note Visual regression testing may not be completely reliable every time as small changes such as window size and screen resolution may affect the result. For better results it is recommended that you run the tests using the selenium/standalone-chrome-debug image of selenium and window size of 1280x1024\nsee available settings for further setup if needed\nAvailable settings to be set by environment variables These values can be set using the environment variables to configure yarn test:acceptance:oc10 and yarn test:acceptance:ocis to match your local test environment.\n   setting meaning default     SERVER_HOST web URL http://localhost:9100   BACKEND_HOST ownCloud server URL (or reva service url for running with OCIS) http://localhost:8080   BACKEND_USERNAME ownCloud administrator username admin   BACKEND_PASSWORD ownCloud administrator password admin   SELENIUM_HOST selenium server host, if not set yarn will start selenium automaticallyif running the selenium docker container as mentioned above set to localhost    SELENIUM_PORT port of selenium server 4444   SCREEN_RESOLUTION width and height in px to set the browser resolution to e.g. 375x812 empty = fullscreen   REMOTE_UPLOAD_DIR path to filesForUpload directory, used when uploading files through api ./tests/acceptance/filesForUpload   LOCAL_UPLOAD_DIR filesForUpload directory available for selenium for direct uploadsIf using selenium-docker and example above, set it as /uploads.If running local selenium, set value same as REMOTE_UPLOAD_DIR (please, remember to use absolute path) /uploads   REMOTE_BACKEND_HOST ownCloud remote server URL http://localhost:8080   RUN_ON_OCIS Running the tests using the OCIS backend false   OCIS_REVA_DATA_ROOT Data directory of OCIS /var/tmp/reva   OCIS_SKELETON_DIR Skeleton files directory for new users -   WEB_UI_CONFIG Path for the web config file (usually in the dist folder) -   VISUAL_TEST Run the visual regression comparison while running the acceptance tests -   UPDATE_VRT_SCREENSHOTS Update the baseline snapshots with the latest images for visual regression tests -    Tips too many open files If tests were running fine and then suddenly start to fail your system might run into open file limits. In that case you will see messages in the OCIS log output that look like this:\n2020-05-12 11:33:43.974552 I | http: Accept error: accept tcp [::]:9200: accept4: too many open files; retrying in 1s\nIn that case increase the open file limits, how to do that would be beyond the scope of this documentation.\nAcceptance Tests in CI In the CI we run the UI tests using different backends on different repos. We use commit IDs to indicate the version of the backend or testrunner we want to use. These commit IDs should be regularly updated in the .drone.star file to keep the CI up to date. We run web UI tests in the following repos in the CI.\n1. web Repo In the owncloud/web repo, we run the tests using both the oc10 backend and the OCIS backend. For the oc10 backend, we use the owncloudci/core docker image which runs the latest daily-master-qa version of owncloud.\nFor the OCIS backend, we use the Commit ID from the owncloud/ocis repo to indicate which version of backend to use. This can be specified in the .drone.env file.\n# The version of OCIS to use in pipelines that test against OCIS OCIS_COMMITID=352034d9eba8be8c4bc4b80421f3c0093e7d472c OCIS_BRANCH=master If the version you want to run is on a different branch from master, you also need to change the branch name.\nIn order to check if new tests are compatible with OCIS, after changing the commit id and the branch name, we can create a draft PR in owncloud/web which triggers the CI, and we can see the result there.\n2. ocis Repo We follow the same approach in the owncloud/ocis repo too. In order to run the UI tests in CI we use commit IDs from web which can be changed in the .drone.env file.\n# The test runner source for UI tests WEB_COMMITID=3cab4e32bca513f14f59127a0387b44a409763a3 WEB_BRANCH=master This is the commit ID of web indicating the version of testrunner we want to use. If the version is on a branch other than master, we will also need to change the branch name.\n"},{"id":87,"href":"/extensions/settings/glossary/","title":"Glossary","parent":"Settings","content":"In the context of this extension and oCIS in general, we are using the following terminology.\nConfiguration  System configuration e.g. service host names and ports Changes need to be propagated to other services Typically modified on the CLI  Settings  Application level settings e.g. default language Can be modified at runtime without restarting the service Typically modified in the UI  Preferences  User settings Subset of \u0026ldquo;Settings\u0026rdquo; e.g. preferred language of a user  Settings Bundle  Collection of related settings Registered by an oCIS extension  Settings Value  Manifestation of a setting for a specific user E.g. used for customization (at runtime) in ocis-web ocis-web-settings extension for modifying settings values is provided by this service Can be queried and modified by other oCIS extensions  "},{"id":88,"href":"/extensions/ocis_hello/license/","title":"License","parent":"Hello","content":"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"},{"id":89,"href":"/ocis/development/build-docs/","title":"Documentation","parent":"Development","content":"    Build the documentation Add changes to the documentation     Build the documentation For building the documentation you need to have Make and Go 1.14 or higher installed.  Just run make -C docs docs-serve from within the root level of the oCIS git repository. This will make documentation available on localhost:1313 and also do a hot reload if you change something in the (non autogenerated) documentation files.\nAdd changes to the documentation Please keep this documentation in sync with the oCIS source code.\nChanges on the documentation are automatically applied to this site when merged to the master branch.\n"},{"id":90,"href":"/ocis/deployment/preparing_server/","title":"Preparing a server","parent":"Deployment","content":"    Example for Hetzner Cloud     Example for Hetzner Cloud   create server on Hetzner Cloud. Set labels \u0026ldquo;owner\u0026rdquo; and \u0026ldquo;for\u0026rdquo;. Example for hcloud cli: hcloud server create --type cx21 --image ubuntu-20.04 --ssh-key admin --name ocis-server --label owner=admin --label for=testing\n  Configure DNS A-records for needed domains pointing on the servers ip address, for example in CloudFlare\n  Access server via ssh as root\n  Create a new user\n$ adduser --disabled-password --gecos \u0026quot;\u0026quot; admin\n  Add user to sudo group\n$ usermod -aG sudo admin\n  Install docker\napt update apt install docker.io   Add user to docker group\nusermod -aG docker admin\n  Install docker-compose via\ncurl -L \u0026quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\u0026quot; -o /usr/local/bin/docker-compose\n(docker compose version 1.27.4 as of today)\n  Make docker-compose executable\nchmod +x /usr/local/bin/docker-compose\n  Add users pub key to\nmkdir /home/admin/.ssh echo \u0026#34;\u0026lt;pubkey\u0026gt;\u0026#34; \u0026gt;\u0026gt; /home/admin/.ssh/authorized_keys` chown admin:admin -R /home/admin/.ssh   Secure ssh daemon by editing /etc/ssh/sshd_config\nPermitRootLogin no ChallengeResponseAuthentication no PasswordAuthentication no UsePAM no   restart sshd server to apply settings systemctl restart sshd\n  Login as the user you created\n  "},{"id":91,"href":"/ocis/development/continuous-integration/","title":"Continuous Integration","parent":"Development","content":"    Concepts Things done in CI Flags in commit message and PR title  Knowledge base       oCIS uses DRONE as CI system. You can find the pipeline logs here or in your PR.\nConcepts The pipeline is defined in Starlark and transformed to YAML upon pipeline run. This enables us to do a highly dynamic and non repeating pipeline configuration.\nUpon running the pipeline, your branch gets merged to the master branch. This ensures that we always test your changeset if as it was applied to the master of oCIS. Please note that this does not apply to the pipeline definition (.drone.star).\nThings done in CI  static code analysis linting running UI tests running ownCloud 10 test suite against oCIS build and release docker images build and release binaries build and release documentation  Flags in commit message and PR title You may add flags to your commit message or PR title in order to speed up pipeline runs and take load from the CI runners.\n  [CI SKIP]: no ci is run on the commit or PR\n  [docs-only]: please add this flag, if you only changed documentation. This will only trigger documentation related CI steps.\n  [tests-only]: please add this flag, if you only changed tests or test-related tooling. You do not need to add a changelog for tests-only changes.\n  Knowledge base   My pipeline fails because some CI related files or commands are missing.\nPlease make sure to rebase your branch onto the latest master of oCIS. It could be that the pipeline definition (.drone.star) was changed on the master branch. This is the only file, that will not be auto merged to master upon pipeline run. So things could be out of sync.\n  How can I see the YAML drone pipeline definition?\nIn order to see the Yaml pipeline definition you can use the drone-cli to convert the Starlark file.\ndrone starlark If you experience a \u0026quot;build\u0026quot; struct has no .title attribute you need a newer version of drone-cli.\nYou currently need to build it yourself from this source code. If you are not using master as source, please ensure that this PR is included.\n   "},{"id":92,"href":"/ocis/license/","title":"License","parent":"oCIS - ownCloud Infinite Scale","content":"This project is licensed under the Apache 2.0 license. For the license of the used libraries you have to check the respective sources.\n"},{"id":93,"href":"/extensions/","title":"Extensions","parent":"ownCloud","content":""},{"id":94,"href":"/","title":"ownCloud","parent":"","content":"    Developer Documentation We love open source Join us     Developer Documentation Welcome to our developer documentation. Here you can find developer documentation on:\n oCIS server oCIS extensions Clients like:  ownCloud Web - the new web frontend for oCIS and ownCloud ownCloud Android app ownCloud iOS app ownCloud Desktop Syncing Client   Integrations  We love open source The oCIS server is Apache v2 licensed. The lower storage layer of oCIS is defined by the CS3 APIs and implemented in the REVA project. Our goal is to develop the CS3 APIs to an open standard and collaborate on the open source REVA reference implementation for CS3 APIs.\nYou can also find all client sources on GitHub.\nJoin us The oCIS server repository on GitHub is a good entry point for you to join the project. But we also develop clients for iOS, Android, Desktop and Web.\nFor communication on development, join our public chat talk.owncloud.com\nIf you want to help and improve ownCloud or oCIS, start coding or open issues on GitHub in the related repository.\nWe are very happy to hear your feedback and ideas!\n"},{"id":95,"href":"/ocis/release_notes/","title":"Release Notes","parent":"oCIS - ownCloud Infinite Scale","content":"ownCloud Infinite Scale 1.3.0 Technology Preview Version 1.3.0 is a regular maintenance and bugfix release. It provides the latest improvements to users and administrators.\nChanges in Reva Reva is one of the fundamental components of oCIS. It has these significant changes:\n Align href URL encoding with oc10 #1425 Fix public link webdav permissions #1461 Purge non-empty dirs from trash-bin #1429 Checksum support #1400 Set quota when creating home directory in EOS #1477 Add functionality to share resources with groups #1453 Add s3ng storage driver, storing blobs in a s3-compatible blobstore #1428  Changes in oCIS These are the major changes in oCIS:\n Update ownCloud Web to v2.0.2: #1776 Enhancement - Update go-micro to v3.5.1-0.20210217182006-0f0ace1a44a9: #1670 Enhancement - Update reva to v1.6.1-0.20210223065028-53f39499762e: #1683 Enhancement - Add initial nats and kubernetes registry support: #1697  More details about this release can be found in the full ownCloud Infinite Scale changelog and ownCloud Web changelog.\nBreaking changes We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  ownCloud Infinite Scale 1.2.0 Technology Preview Version 1.2.0 brings more functionality and stability to ownCloud Infinite Scale. ownCloud Web now loads a lot faster and is prepared for the introduction of accessibility features. An initial implementation for S3 storage support is available and file integrity checking has been introduced.\nThe most prominent changes in version 1.2.0 comprise:\n The initial loading time for ownCloud Web has been reduced by handling dependencies more efficiently (the bundle size of ownCloud Web has been drastically reduced) #4584 Preparations for accessibility features have been implemented to work towards WCAG 2.1 compliance #4594 Initial S3 storage support is available #1429 File integrity checking has been introduced: When uploading files, Infinite Scale now makes sure that the file integrity is protected between server and clients by comparing checksums #1400 Public link passwords are now stored as hashes to improve security #1462  You can also read the full ownCloud Infinite Scale changelog and ownCloud Web changelog for further details on what has changed.\nBreaking changes We are currently in a Tech Preview state and breaking changes may occur at any time. For more information see our release roadmap  Fix IDP service user Related: #1390, #1569\nAfter upgrading oCIS from a previous version to oCIS 1.2.0 you will not be able to login in ownCloud Web\nImplications:\n manual action required  Migration steps:\n Stop oCIS Open following file /var/tmp/ocis/storage/metadata/nodes/root/accounts/820ba2a1-3f54-4538-80a4-2d73007e30bf Change password to $2y$12$ywfGLDPsSlBTVZU0g.2GZOPO8Wap3rVOpm8e3192VlytNdGWH7x72 Change onPremisesSamAccountName to idp Change preferredName to idp Save the changed file Start oCIS You now are able to lock back in again.  Please have a look at how to secure an oCIS instance since you seem to run it with default secrets.\nReset shares Related: #1626\nAfter upgrading oCIS from a previous version to oCIS 1.2.0 you will will not be able to use previous shares or create new shares.\nImplications:\n manual action required loss of shares (manual resharing is needed, files will not be lost)  Migration steps:\n Stop oCIS Delete following file /var/tmp/ocis/storage/shares.json Start oCIS Recreate shares manually  ownCloud Infinite Scale 1.1.0 Technology Preview Version 1.1.0 is a hardening and patch release. It ships with the latest version of ownCloud Web and brings a couple of minor improvements. The minor version increase is needed due to non-backwards compatible changes in configuration. The documentation has been updated to reflect the changes. Please note that this version is still a Technology Preview and not suited for production use.\nThe most prominent changes in version 1.1.0 comprise\n Performance and stability improvements for installations with multiple concurrent users Simplified configuration by introducing the new environment variable OCIS_URL Beta release of ownCloud performance scripts Update ownCloud web to v1.0.1 Update reva to v1.5.1  You can also read the full ownCloud Infinite Scale changelog for further details on what has changed.\nownCloud Infinite Scale 1.0.0 Technology Preview We are pleased to announce the availability of ownCloud Infinite Scale 1.0.0 Technology Preview which is released as the first public version of the new Infinite Scale platform.\nMicroservice architecture ownCloud Infinite Scale is following the microservices architectural pattern. It is implemented as a set of microservices which are independent of each other. They are coupled with well-defined APIs. This architecture fosters a lot of benefits that we were aiming for with the new design for oCIS:\n Every service is independent, comparably small and brings it\u0026rsquo;s own webserver, backend/APIs and frontend components Each service runs as a separate service on the system, increasing security and stability Scalability: High performance demands can be fulfilled by scaling and distributing of services Testability: Each service can be tested on its own due to well-defined APIs and functionality Protocol-driven development using protobuf High-performance communication between services through gRPC Multi-platform support powered by Golang - only minimal dependency on platform packages Cloud-native deployment, update, monitoring, logging, tracing and orchestration strategies  Key figures  The all-new ownCloud Web frontend is shipped as part of the platform OpenID Connect is the future-proof technology choice for authentication An Identity Provider is bundled to ease deployment and operations. It can be replaced with an external OpenID IdP, if desired Automatically built and fully maintained Docker containers are available Flexible configuration through environment variables, config files or command-line flags Database-less architecture - metadata and data are kept together in the storage as a single source of truth Native storage capabilities are used where like native versioning and trashbin Public APIs like WebDAV and OCS have been kept compatible with ownCloud 10 A secure and flexible framework to create extensions  Supported platforms  Linux-amd64 Darwin-amd64 Experimental: Windows, ARM (e.g., Raspberry Pi, Termux on Android)  Client support All official ownCloud Clients support the Infinite Scale server with the following versions:\n Desktop \u0026gt;= 2.7 Android \u0026gt;= 2.15 iOS \u0026gt;= 1.2  Architecture components ownCloud Infinite Scale is built as a modular framework in which components can be scaled individually. It consists of\n a user management service a settings service a frontend service a storage backend service a built-in IdP an application gateway/proxy  These components can be deployed in a multi-tier deployment architecture. See the documentation for an overview of the services.\nOperation modes Standalone mode (with oCIS storage driver) In standalone mode oCIS uses its built-in orchestrator to start all necessary services. This allows you to run oCIS on a single node without any outside dependencies like docker-compose, kubernetes or even a webserver. It will start an OpenID IdP and create a self-signed certificate. You can start right away by navigating to https://localhost:9200.\nSingle services scaleout oCIS allows you to scale individual services using well-known orchestration frameworks like docker-compose, dockerSwarm and kubernetes.\nBridge mode with ownCloud 10 backend For the product transition phase, ownCloud Infinite Scale comes with an operation mode (\u0026ldquo;bridge mode\u0026rdquo;) that allows a hybrid deployment, between both server generations to operate the new web frontend with ownCloud 10 and Infinite Scale in parallel. This setup allows the ownCloud Web frontend to operate with both server generations and provides the foundation to migrate users gradually to the new backend.\nRequirements for the bridge mode\n ownCloud Server \u0026gt;= 10.6 Open ID Connect is used for user authentication The Graph API app is installed on ownCloud Server The latest client versions are rolled-out to users (required for OpenID Connect support). See the documentation for more information.  See the documentation on how to deploy Infinite Scale in bridge mode.\nTechnology Preview\nownCloud Infinite Scale is currently in Technology Preview. The bridge mode should only be used in non-production environments.\n What to expect? This is the first promoted public release of ownCloud Infinite Scale, released as \u0026ldquo;Technical Preview\u0026rdquo;. Infinite Scale is not yet ready for production installations. Technical audiences will be able to get a good understanding of the potential of ownCloud\u0026rsquo;s new platform.\nVersion 1.0.0 comes with the base functionality for sync and share with a much higher performance-, stability- and security-level compared to all available platforms. Based on ten years of experience in enterprise sync and share and a long standing collaboration with the biggest global science organizations this new platform will exceed what content collaboration is today.\nHow to get started? One of the most important objectives for oCIS was to ease the setup of a working instance dramatically. Since oCIS is built with Google\u0026rsquo;s powerful Go language it supports the single-file-deployment: Installing oCIS 1.0.0 is as easy as downloading a single file, applying execution permission to it and get started. No more fiddling around with complicated LAMP stacks.\nDeployment Options Given the architecture of oCIS, there are various deployment options based on the users requirements. In our experience setting up the LAMP stack for ownCloud 10 was difficult for many users. Therefore a big emphasis was put on easy yet functional deployment strategies.\nSingle binary  Delivery as single binary The single binary is the best option to test the new ownCloud Infinite Scale 1.0.0 Technical Preview release on a local machine. Follow these instructions to get the platform running in the most simple way:\n  Download the binary\nLinux curl https://download.owncloud.com/ocis/ocis/1.0.0/ocis-1.0.0-linux-amd64 -o ocis\nMacOS curl https://download.owncloud.com/ocis/ocis/1.0.0/ocis-1.0.0-darwin-amd64 -o ocis\n  Make it executable\nchmod +x ocis\n  Run it\n./ocis server\n  Navigate to https://localhost:9200 and log in to ownCloud Web (admin:admin)\n  Production environments will need a more sophisticated setup, see https://owncloud.github.io/ocis/deployment/ for more information.\n Docker  Containerized Setup For more sophisticated setups we recommend using one of our docker setup examples. See the documentation for a setup with Traefik as a reverse proxy which also includes automated SSL certificate provisioning using Letsencrypt tools.   ownCloud Web Features Framework  Framework  User avatars (compatible with oC 10 API) Alerts for information/errors Notifications (bell icon, compatible with oC 10 API) Extension points Available extensions  Media Viewer (images and videos) Draw.io     Files  Files  Listing and browsing the hierarchy Sorting by columns (name/size/updated) Breadcrumb Thumbnail previews for images (compatible with oC 10 API and Thumbnails service API) Upload (file/folder), using the TUS protocol for reliable uploads Download (file) Rename Copy Move Delete Indicators for resources shared with people (including subfiles and subfolders) Indicators for resources shared by link (including subfiles and subfolders) Quick actions  Add people Create public link on-the-fly and copy it to the clipboard   Favorites (view + add/remove) Shared with me (view) Shared with others (view) Deleted files Versions (list/restore/download/delete) File/folder search   Sharing  Sharing with People (user/group shares)  Adding people to a resource  Adding multiple people at once (users and groups) Autocomplete search to find users Roles: Viewer / Editor (folder) / Advanced permissions (granular permissions) Expiration date   Listing people who have access to a resource  People can be listed when a resource is directly shared and when it\u0026rsquo;s indirectly shared via a parent folder When listing people of an indirectly shared resource, there is a \u0026ldquo;via\u0026rdquo; indicator that guides to the directly shared parent Every person can recognize the owner of a resource Every person can recognize their role The owner of a resource can recognize persons that added other people (reshare indicator) Editing persons Removing persons     Links  Sharing with Links  Private links (copy) Public links  Adding public links on single files and folders  Roles: Viewer / Editor (folder) / Contributor (folder) / Uploader (folder) Password-protection Expiration date   Listing public links  Public links can be listed when a resource is directly shared and when it\u0026rsquo;s indirectly shared via a parent folder When listing public links of an indirectly shared resource, there is a \u0026ldquo;via\u0026rdquo; indicator that guides to the directly shared parent Copying existing public links Editing existing public links Removing existing public links   Viewing public links     User Profile  User Profile  Display basic profile information (user name, display name, e-mail, group memberships) \u0026ldquo;Edit\u0026rdquo; button guides to ownCloud 10 user settings (when used with oC 10)   User Settings  Basic user settings  Language of the web interface    oCIS Backend Features Storage  Storage The default oCIS storage driver deconstructs a filesystem to be able to efficiently look up files by fileid as well as path. It stores all folders and files by a uuid and persists share and other metadata using extended attributes. This allows using the linux VFS cache using stat syscalls instead of a database or key/value store. The driver implements trash, versions and sharing. It not only serves as the current default storage driver, but also as a blueprint for future storage driver implementations.  IDM  User and group management  Functionality available via API and frontend (\u0026ldquo;Accounts\u0026rdquo; extension) User listing (API/FE) User creation (API/FE) User deletion (API/FE) User activation/blocking (API/FE) Role assignment for users (API/FE) User editing (API) Multi-select in the frontend (delete \u0026amp; block/activate) Group creation (API) Add/remove users to/from groups (API) Group deletion (API) Create/read/update/delete users and groups (CLI)   Settings  Settings The settings service provides APIs for other services for registering a set of settings as Bundle. It also provides a pluggable extension for ownCloud Web which provides dynamically built web forms, so that users can customize their own settings. Some well known settings are directly used by ownCloud Web for adapted user experience, e.g. the UI language. Services can query the users\u0026rsquo; chosen settings for customized backend and frontend operations as needed.\nRoles \u0026amp; Permissions System Infinite Scale follows a role-based access control model. Based on permissions for actions which are provided by the system and by extensions, roles can be composed. Ultimately, these roles can be assigned to users to define what users are permitted to do. This model allows a segregation of duties for administration and allows granular control of how different types of users (e.g., Guests) can use the platform.\n Currently available permissions: Manage accounts (gives access to the internal user management), manage roles (allows assigning roles to users) The current roles are exemplary default roles which are used for demonstration purposes  \u0026ldquo;Admin\u0026rdquo;: Has the permissions to \u0026ldquo;manage accounts\u0026rdquo; and to \u0026ldquo;manage roles\u0026rdquo; \u0026ldquo;User\u0026rdquo;: Does not have any dedicated permission \u0026ldquo;Guest\u0026rdquo;: Does not have any dedicated permission   Currently a user can only have one role Users with the role \u0026ldquo;Admin\u0026rdquo; can assign/unassign roles to/from other users (as part of the permission to \u0026ldquo;manage roles\u0026rdquo;)   APIs  APIs  WebDAV OCS    Known issues  There are feature differences depending on the operation mode, e.g., no user management with ownCloud Web and oC 10 backend Public links do not yet respect the given role (a recipient has full permissions no matter which role has been set) Resharing does not yet work as expected  Share recipients can create public links with higher permissions than they originally had Share recipients can add other people but they will not be able to access the data   Sharing indicators in the file list will only be shown after opening the right sidebar for a resource Users can\u0026rsquo;t change their password yet Folder sizes will not be calculated Cleanups are not yet available (e.g., shares of a deleted user will not be removed) Sharing from the desktop client does not work yet There are no notifications yet There can be issues with access tokens not being refreshed correctly, leading to interruptions, e.g., during uploads Deleting non-empty folders from the trash bin does not work Emptying the whole trash bin does not work  For feedback and bug reports, please use the public issue tracker.\n"},{"id":96,"href":"/ocis/release_roadmap/","title":"Release Roadmap","parent":"oCIS - ownCloud Infinite Scale","content":"You may have asked yourself why there are major version 1 tags in our GitHub repository but the Readme still states ownCloud Infinite Scale is currently in a technical preview state. It will be subject to a lot of changes and is not yet ready for general production deployments.. How can that be if its a major version 1?\nOur initial and also our current plan is to stick to SemVer as versioning scheme. But sometimes there are other factors which cross your plans. Therefore we started releasing oCIS with version 1.0.0 Tech Preview.\nownCloud Infinite Scale 1.x technology preview releases All oCIS releases within major version 1 will be handled as technology previews. There will be no supported releases in terms of us guaranteeing production readiness. We will do releases every 3 weeks, and they will sometimes only include bugfixes, but also introduce new features or optimizations.\nWe will be fixing bugs if you report them and truly appreciate every report and contribution. Depending on the individual case, we will publish bugfix releases or add the fix to the next minor release.\nWe are going to stick to major version 1 until we feel confident about running oCIS in production environments. As a consequence of this we cannot raise the major version, like SemVer requires it, even if we need to introduce breaking changes. We will do our best to avoid breaking changes. If there is no way to circumvent this, we will add an automatic migration or at least point out manual migration steps, since we as oCIS developers are already using oCIS on a personal basis. The best place to see if a breaking change happens is our changelog which is available for every release. If things are not working out for you please contact us immediately. We want to know about this and solve it for you.\nIt isn\u0026rsquo;t our intention to scare you with our addendum \u0026ldquo;Tech Preview\u0026rdquo;. We want you to have a clear picture of what you can expect from oCIS. You could take it as a disclaimer or even compare it to running an Linux kernel in alpha stage. It can be very pleasing to be on the latest codebase but you could also find yourself with a lot of problems arising because of that.\nYou clearly can expect a totally new experience of file-sync and share with oCIS and we want you to use it now - but with understanding and caution.\nownCloud Infinite Scale 2.x general availability releases Starting with oCIS 2.0.0 release we will strictly stick to SemVer, just as we do right now for ownCloud Server. The general availability release will also mean that we can recommend oCIS warmly to everyone. Use it to store your precious family pictures or you confidential company data!\n"},{"id":97,"href":"/ocis/adr/0003-external-user-management/","title":"3. Use external User Management","parent":"Architecture Decisions","content":" Status: accepted Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2020-12-09  Technical Story: Skip account-service by talking to CS3 user-api\nContext and Problem Statement To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email and username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.\nDecision Drivers  oCIS should be a single binary that can run out of the box without external dependencies like an LDAP server. Time: we want to build a release candidate asap. oCIS should be able to be easily integrated with standard user management components  Considered Options  Accounts service wraps LDAP GLAuth wraps accounts service  Decision Outcome Chosen option: \u0026ldquo;Move accounts functionality to GLAuth and name it accounts\u0026rdquo;, by moving the existing accounts service file based persistence to GLAuth and use it as a drop in replacement for an LDAP server. The reverse index and web UI existing in the accounts service will move as well in order to make GLAuth a standalone, small scale user management with write capabilities.\nProduct summary  GLAuth is a drop in user management for small scale deployments that do not rely on an actual LDAP server. oCIS admins can either use the web UI to manage users in GLAuth or use existing tools in their IDM. We hide the complexity by embedding an OpenID Provider, an LDAP server and a user management web UI.  Resulting deployment options  Use internal user management  Recommended for small scale use cases and simple deployments Users, groups and roles are stored and managed within GLAuth   Use external user management  Recommended for mid and large scale use cases Users, groups and roles are stored and managed within an external LDAP / AD / IDM Separate oCIS and LDAP admin: oCIS admin relies on the LDAP admin to manage users   User permissions for roles are always managed in oCIS (settings service) because they are specific to oCIS  Resulting technical implications  Make the file based reverse index a standalone library Contribute to GLAuth  Add ms graph based rest API to manage users, groups and roles (the LDAP lib is currently readonly) Add web UI to glauth that uses the ms graph based rest API to manage users Add a backend that uses the file based reverse index, currently living in the oCIS accounts service Move fallback mechanism from ocis/glauth service to upstream GLAuth to support multiple LDAP servers  Make it a chain to support more than two LDAP servers Document the implications for merging result sets when searching for recipients At least one writeable backend is needed to support creating guest accounts     Make all services currently using the accounts service talk to the CS3 userprovider To support multiple LDAP servers we need to move the fallback mechanism in ocis/glauth service to upstream GLAuth The current CS3 API for user management should be enriched with pagination, field mask and a query language as needed properly register an auxiliary LDAP schema that adds an ownCloudUUID attribute to users and groups  Positive Consequences  The accounts service (which is our drop in LDAP solution) can be dropped. The CS3 userprovider service becomes the only service dealing with users. No sync  Negative Consequences  If users want to store users in their IDM and at the same time guests in a seperate user management we need to implement GLAuth backends that support more than one LDAP server.  Pros and Cons of the Options GLAuth wraps accounts service Currently, the accounts service is the source of truth and we use it to implement user management.\n Good, because it solves the problem of storing and looking up an owncloud UUID for a user (and group) Good, because we can manage users out of the box Good, because we can persist accounts in a CS3 storage provider Bad, because it maintains a separate user repository: it needs to either learn or sync users.  Move accounts functionality to GLAuth and name it accounts We should use an existing LDAP server and make GLAuth a drop in replacement for it.\n Good, because we can use an existing user repository (an LDAP server), no need to sync or learn users. Good, because admins can rely on existing user management tools. Good, because we would have a clear separation of concerns:  users reside in whatever repository, typically an LDAP server  could be an existing LDAP server or AD could be our embeddable drop in glauth server   we use a service to wrap the LDAP server with other APIs:  ms graph API - ODATA based restful API, SCIM - designed to manage user identities, supported by some IDPs, the current accounts API (which is a protobuf spec following the ms graph API)   our account management UI can use the ms graph based API service which can have different backends  an existing LDAP server our drop in glauth server (which might serve the ms graph based API itself) the CS3 API + a future guest provisioning API + a future CS3 user provisioning API (or generic space provisioning)   all oCIS services can use the service registry to look up the accounts service that provides an internal API  could be the CS3 user provider (and API) could be the internal protobuf accounts API   introduce a new guest provisioning API to CS3 which properly captures our requirement to have them in the user repository  guests need to be made available to the firewall storages like EOS that integrate with the os for acl based file permissions need a numeric user and group id     Good, because we can use the CS3 user provider with the existing LDAP / rest driver. Bad, because oCIS admins may not have the rights to manage role assignments. (But this is handled at a different department.) Bad, because oCIS admins may not have the rights to disable users if an external LDAP is used instead of the drop in GLAuth.  Links  supersedes ADR-0001  "},{"id":98,"href":"/ocis/adr/0004-support-hot-migration/","title":"4. Support Hot Migration","parent":"Architecture Decisions","content":"4. Support Hot Migration  Status: proposed Deciders: @butonic, @micbar, @dragotin, @hodyroff, @pmaier1 Date: 2021-03-16  Technical Story: [description | ticket/issue URL]\nContext and Problem Statement Migration is one of the most important topics of the oCIS story. We need to provide a concept how to migrate from oC10 to oCIS.\nDecision Drivers  Do not lose file blob or meta data.  To prevent a sync surge from clients the etag for files should be migrated. To prevent internal links from breaking or pointing to wrong files the file id of existing files needs to be migrated. To prevent data loss trash and version blobs should be migrated.   Existing shares like public links and federated shares must remain functional after the migration.  To prevent internal shares the share type, permissions and expiry needs to be migrated. To prevent public links from breaking the url token, permissions, expiry and password needs to be migrated. What about federated shares? What about additional share permissions, eg. comment on office files?   Legacy clients need to keep working  To keep existing clients working the remote.php/webdav and dav/files/\u0026lt;username\u0026gt; webdav endpoints as well as the ocs API need to be available.   What about app passwords/tokens?  Considered Options  Cold Migration: migrate data while systems are not online, so no user interaction happens in between. Hot Migration: one or both systems are online during migration.  Decision Outcome Chosen option: \u0026ldquo;[option 1]\u0026quot;, because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\nPositive Consequences  [e.g., improvement of quality attribute satisfaction, follow-up decisions required, …] …  Negative Consequences  [e.g., compromising quality attribute, follow-up decisions required, …] …  Pros and Cons of the Options Cold Migration The migration happens while the service is offline. File metadata, blobs and share data is exported from ownCloud 10 and imported in oCIS. This can happen user by user, where every user export would contain the file blobs, their metadata, trash, versions, shares and all metadata that belongs to the users storage. To prevent group shares from breaking, users in the same groups must be migrated in batch. Depending on the actual group shares in an instance this may effectively require a complete migration in a single batch.\n Good, because oCIS can be tested in a staging system without writing to the production system. Good, because file layout on disk can be changed to support new storage driver capabilities. Bad, because the export and import might require significant amounts of storage. Bad, because a rollback to the state before the migration might cause data loss of the changes that happend in between. Bad, because the cold migration can mean significant downtime.  Hot Migration The migration happens in subsequent stages while the service is online.\n Good, because the admin can migrate users from old to new backend in a controlled way. Good, because users and admins can learn to trust the new system. Good, because there can be preparations even long before the migrations happens in parallel on the oC10 codebase, ie. addition of metadata that is needed while the system operates. Good, because the downtime of the system can be fairly small. Bad, because it is more complex and might drag on for a long time.  Links  Clarify responsibilities of share providers and storage providers · Issue #1377 · cs3org/reva (github.com) because the share manager for oCIS should store share information on the storage system. And storageprovider should persist share creator · Issue #93 · cs3org/cs3apis (github.com) finally: eos: store share id in inherited xattr · Issue #543 · cs3org/reva (github.com)  "},{"id":99,"href":"/integration/","title":"Integrations","parent":"ownCloud","content":""},{"id":100,"href":"/ocis/adr/0002-persist-accounts-using-cs3-storage/","title":"2. Persist accounts in a CS3 storage","parent":"Architecture Decisions","content":" Status: accepted Deciders: @butonic, @felixboehm Date: 2020-08-21  Technical Story: File system based indexing\nContext and Problem Statement To set up High Availability (HA) or a geo-replicated setup we need to persist accounts in a distributed way. To efficiently query the accounts by email or username, and not only by id, they need to be indexed. Unfortunately, the bleve index we currently store locally on disk cannot be shared by multiple instances, preventing a scale out deployment.\nConsidered Options  Look into distributed bleve Persist users in a CS3 storage  Decision Outcome Chosen option: \u0026ldquo;Persist users in a CS3 storage\u0026rdquo;, because we have one service less running and can rely on the filesystem for geo-replication and HA.\nPositive Consequences  We can store accounts on the storage using the CS3 API, pushing geo-distribution to the storage layer. Backups of users and storage can be implemented without inconsistencies between using snapshots.  Negative Consequences  We need to spend time on implementing a reverse index based on files, and symlinks.  "},{"id":101,"href":"/ocis/adr/0001-introduce-accounts-service/","title":"1. Introduce an accounts service","parent":"Architecture Decisions","content":" Status: superseded by ADR-0003 Deciders: @butonic, @felixboehm, @micbar, @pmaier1 Date: 2020-06-15  Technical Story: persist accounts\nContext and Problem Statement To attach metadata like shares to users ownCloud relies on persistent, non-reassignable, unique identifiers for users (and files). Email und username can change when a user changes his name. But even the OIDC sub+iss combination may change when the IdP changes. While there is an account porting protocol that describes how a relying party (RP) such as ownCloud should behave, it still requires the RP to maintain its own user identifiers.\nDecision Drivers  oCIS should be a single binary that can run out of the box without external dependencies like an LDAP server. Time: we want to build a release candidate asap. Firewalls need access to guests, typically via LDAP. Not all external LDAPs are writeable for us to provision Guest accounts. We see multiple LDAP servers in deployments. Being able to handle them is important and should be covered by using OIDC + being able to query multiple LDAP servers.  Considered Options  Accounts service wraps LDAP GLAuth wraps accounts service  Decision Outcome Chosen option: \u0026ldquo;GLAuth wraps accounts service\u0026rdquo;, because we need write access to provision guest accounts and GLAuth currently has no write support.\nPositive Consequences  We can build a self contained user management in the accounts service and can adjust it to our requirements. We do not rely on an LDAP server which would only be possible by implementing write support in the LDAP libraries used by GLAuth (hard to estimate effort, when will that be merged upstream).  Negative Consequences  We need to spend time on implementing user management  Pros and Cons of the Options Accounts service wraps LDAP  Bad, because not all external LDAPs are writeable for us to provision Guest accounts.  "},{"id":102,"href":"/clients/","title":"Clients","parent":"ownCloud","content":""},{"id":103,"href":"/ocis/getting-started/","title":"Getting Started","parent":"oCIS - ownCloud Infinite Scale","content":"    Run oCIS  Binaries Docker   Usage  Login to ownCloud Web Basic Management Commands       Run oCIS We are distributing oCIS as binaries and Docker images.\nYou can find more deployment examples in the deployment section.\nBinaries You can find the latest official release of oCIS at our download mirror or on GitHub. The latest build from the master branch can be found at our download mirrors testing section.\nTo run oCIS as binary you need to download it first and then run the following commands. For this example, assuming version 1.2.0 of oCIS running on a Linux AMD64 host:\n# download curl https://download.owncloud.com/ocis/ocis/1.2.0/ocis-1.2.0-linux-amd64 --output ocis # make binary executable chmod +x ocis # run ./ocis server The default primary storage location is /var/tmp/ocis. You can change that value by configuration.\noCIS by default relies on Multicast DNS (mDNS), usually via avahi-daemon. If your system has a firewall, make sure mDNS is allowed in your active zone.  Docker Docker images for oCIS are available on Docker Hub.\nThe latest tag always reflects the current master branch.\ndocker pull owncloud/ocis docker run --rm -ti -p 9200:9200 owncloud/ocis Usage Login to ownCloud Web Open https://localhost:9200 and login using one of the demo accounts:\neinstein:relativity marie:radioactivity richard:superfluidity There are admin demo accounts:\nmoss:vista admin:admin Basic Management Commands The oCIS single binary contains multiple extensions and the ocis command helps you to manage them. You already used ocis server to run all available extensions in the Run oCIS section. We now will show you some more management commands, which you may also explore by typing ocis --help or going to the docs.\nTo start oCIS server:\nocis server The list command prints all running oCIS extensions. ocis list\nTo stop a particular extension: ocis kill web\nTo start a particular extension: ocis run web\nThe version command prints the version of your installed oCIS. ocis --version\nThe health command is used to execute a health check, if the exit code equals zero the service should be up and running, if the exist code is greater than zero the service is not in a healthy state. Generally this command is used within our Docker containers, it could also be used within Kubernetes.\nocis health --help "},{"id":104,"href":"/extensions/ocis_hello/","title":"Hello","parent":"Extensions","content":"\nAbstract When getting started with ocis development developers need to learn about the building blocks of ocis extensions. Without guidance or orientation of the why and what of an extension they may start feeling lost. The ocis-hello repository serves as a blueprint for ocis extensions. It allows developers to get started with ocis extension development by looking at the code, configuration and documentation.\n  document.addEventListener(\"DOMContentLoaded\", function(event) { mermaid.initialize({ flowchart: { useMaxWidth: true } }); });  graph TD subgraph ow[ocis-web] owh[ocis-web-hello] end owh ---|\"greet()\"| ows[ocis-hello-server]  ocis-hello provides a simple hello world example with\n a protobuf based greeter API a grpc service implementing the API a vue.js frontend using the API  It can be integrated into ocis web as documented in the extensions docs.\nTable of Contents    Getting Started     Building     Running     Settings     Testing     License     "},{"id":105,"href":"/categories/","title":"Categories","parent":"ownCloud","content":""},{"id":106,"href":"/tags/","title":"Tags","parent":"ownCloud","content":""}]